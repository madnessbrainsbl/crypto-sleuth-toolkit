#!/usr/bin/env python3
"""
Windows Key Extractor - –∞–¥–∞–ø—Ç–∞—Ü–∏—è CryKeX –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç ELF —Ñ–∞–π–ª unlock –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö HMAC/JWT –∫–ª—é—á–µ–π
"""

import os
import re
import binascii
import hashlib
import hmac
import jwt
import base64
from itertools import combinations

# –ù–∞—à —Ä–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"
WORKING_PAYLOAD = {
    "vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce",
    "iss": "CunBA",
    "timestamp": 1753096202
}

class WindowsKeyExtractor:
    def __init__(self, binary_path):
        self.binary_path = binary_path
        self.binary_data = None
        self.potential_keys = set()
        
    def load_binary(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            with open(self.binary_path, 'rb') as f:
                self.binary_data = f.read()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª {self.binary_path} ({len(self.binary_data)} –±–∞–π—Ç)")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def test_key(self, key):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞"""
        try:
            test_token = jwt.encode(WORKING_PAYLOAD, key, algorithm='HS256')
            return test_token == WORKING_TOKEN
        except:
            return False
    
    def extract_ascii_strings(self, min_length=4, max_length=128):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ASCII —Å—Ç—Ä–æ–∫ –∏–∑ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞"""
        print(f"üîç –ò–∑–≤–ª–µ–∫–∞–µ–º ASCII —Å—Ç—Ä–æ–∫–∏ ({min_length}-{max_length} —Å–∏–º–≤–æ–ª–æ–≤)...")
        
        strings = []
        current_string = ""
        
        for byte in self.binary_data:
            if 32 <= byte <= 126:  # ASCII printable characters
                current_string += chr(byte)
            else:
                if min_length <= len(current_string) <= max_length:
                    strings.append(current_string)
                current_string = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if min_length <= len(current_string) <= max_length:
            strings.append(current_string)
        
        unique_strings = list(set(strings))
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(unique_strings)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ASCII —Å—Ç—Ä–æ–∫")
        return unique_strings
    
    def find_crypto_patterns(self):
        """–ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π"""
        print("üîç –ò—â–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã...")
        
        patterns = []
        
        # 1. Base64 –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å base64 —Å–∏–º–≤–æ–ª–∞–º–∏)
        b64_pattern = re.compile(rb'[A-Za-z0-9+/]{16,}={0,2}')
        b64_matches = b64_pattern.findall(self.binary_data)
        
        for match in b64_matches:
            try:
                decoded = base64.b64decode(match).decode('ascii', errors='ignore')
                if len(decoded) >= 8:
                    patterns.append(decoded)
            except:
                pass
        
        # 2. Hex –ø–∞—Ç—Ç–µ—Ä–Ω—ã (–¥–ª–∏–Ω–Ω—ã–µ hex —Å—Ç—Ä–æ–∫–∏)
        hex_pattern = re.compile(rb'[0-9a-fA-F]{16,}')
        hex_matches = hex_pattern.findall(self.binary_data)
        
        for match in hex_matches:
            try:
                hex_str = match.decode('ascii')
                if len(hex_str) % 2 == 0:
                    decoded = binascii.unhexlify(hex_str).decode('ascii', errors='ignore')
                    if len(decoded) >= 8:
                        patterns.append(decoded)
                patterns.append(hex_str)
            except:
                pass
        
        # 3. UUID/GUID –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        uuid_pattern = re.compile(rb'[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}')
        uuid_matches = uuid_pattern.findall(self.binary_data)
        
        for match in uuid_matches:
            patterns.append(match.decode('ascii'))
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(patterns)} –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")
        return patterns
    
    def search_key_candidates(self):
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∫–ª—é—á–µ–π"""
        print("üîë –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ü–û–ò–°–ö –ö–õ–Æ–ß–ï–ô")
        print("="*50)
        
        # 1. ASCII —Å—Ç—Ä–æ–∫–∏
        ascii_strings = self.extract_ascii_strings()
        self.potential_keys.update(ascii_strings)
        
        # 2. –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã  
        crypto_patterns = self.find_crypto_patterns()
        self.potential_keys.update(crypto_patterns)
        
        # 3. –ü–æ–∏—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å—Ç—Ä–æ–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å JWT/CunBA
        jwt_related = []
        data_lower = self.binary_data.lower()
        
        jwt_keywords = [b'cunba', b'jwt', b'hmac', b'hs256', b'secret', b'key', b'unlock', b'mega', b'vehicle']
        
        for keyword in jwt_keywords:
            pos = 0
            while True:
                pos = data_lower.find(keyword, pos)
                if pos == -1:
                    break
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞
                start = max(0, pos - 64)
                end = min(len(self.binary_data), pos + 64)
                context = self.binary_data[start:end]
                
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                context_strings = []
                current = ""
                for byte in context:
                    if 32 <= byte <= 126:
                        current += chr(byte)
                    else:
                        if len(current) >= 4:
                            context_strings.append(current)
                        current = ""
                
                jwt_related.extend(context_strings)
                pos += 1
        
        self.potential_keys.update(jwt_related)
        
        # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö—ç—à–µ–π –æ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        hash_candidates = []
        for candidate in list(self.potential_keys):
            if len(candidate) >= 4:
                hash_candidates.extend([
                    hashlib.md5(candidate.encode()).hexdigest(),
                    hashlib.sha1(candidate.encode()).hexdigest(),
                    hashlib.sha256(candidate.encode()).hexdigest(),
                    hashlib.sha256(candidate.encode()).hexdigest()[:32],
                    hashlib.sha256(candidate.encode()).hexdigest()[:16],
                ])
        
        self.potential_keys.update(hash_candidates)
        
        print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(self.potential_keys)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π")
    
    def brute_force_test(self):
        """–ë—Ä—É—Ç—Ñ–æ—Ä—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π"""
        print("\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ö–õ–Æ–ß–ï–ô")
        print("="*50)
        
        tested = 0
        found_keys = []
        
        for key in self.potential_keys:
            tested += 1
            
            if tested % 1000 == 0:
                print(f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {tested}/{len(self.potential_keys)}...")
            
            if self.test_key(key):
                found_keys.append(key)
                print(f"\nüéâ –ù–ê–ô–î–ï–ù –ö–õ–Æ–ß!")
                print(f"–ö–ª—é—á: '{key}'")
                print(f"–î–ª–∏–Ω–∞: {len(key)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                verification_token = jwt.encode(WORKING_PAYLOAD, key, algorithm='HS256')
                match = verification_token == WORKING_TOKEN
                print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {'‚úÖ –°–û–í–ü–ê–î–ê–ï–¢' if match else '‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢'}")
        
        return found_keys
    
    def entropy_analysis(self):
        """–ê–Ω–∞–ª–∏–∑ —ç–Ω—Ç—Ä–æ–ø–∏–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π"""
        print("\nüìä –ê–ù–ê–õ–ò–ó –≠–ù–¢–†–û–ü–ò–ò")
        print("="*50)
        
        high_entropy_keys = []
        
        for key in self.potential_keys:
            if len(key) >= 16:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–ª–∏–Ω–Ω—ã–µ –∫–ª—é—á–∏
                # –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç —ç–Ω—Ç—Ä–æ–ø–∏–∏
                char_counts = {}
                for char in key:
                    char_counts[char] = char_counts.get(char, 0) + 1
                
                entropy = 0
                key_length = len(key)
                for count in char_counts.values():
                    probability = count / key_length
                    if probability > 0:
                        import math
                        entropy -= probability * math.log2(probability)
                
                if entropy > 3.5:  # –í—ã—Å–æ–∫–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è
                    high_entropy_keys.append((key, entropy))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —ç–Ω—Ç—Ä–æ–ø–∏–∏
        high_entropy_keys.sort(key=lambda x: x[1], reverse=True)
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(high_entropy_keys)} –∫–ª—é—á–µ–π —Å –≤—ã—Å–æ–∫–æ–π —ç–Ω—Ç—Ä–æ–ø–∏–µ–π")
        for key, entropy in high_entropy_keys[:10]:
            print(f"–≠–Ω—Ç—Ä–æ–ø–∏—è {entropy:.2f}: {key[:50]}...")
        
        return [key for key, _ in high_entropy_keys]

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîê WINDOWS KEY EXTRACTOR")
    print("="*60)
    print("–ê–¥–∞–ø—Ç–∞—Ü–∏—è CryKeX –¥–ª—è –ø–æ–∏—Å–∫–∞ JWT HMAC –∫–ª—é—á–µ–π –≤ ELF —Ñ–∞–π–ª–∞—Ö")
    print()
    
    binary_path = "unlock"
    if not os.path.exists(binary_path):
        print(f"‚ùå –§–∞–π–ª {binary_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    extractor = WindowsKeyExtractor(binary_path)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∏–Ω–∞—Ä–Ω–∏–∫
    if not extractor.load_binary():
        return
    
    # –ò—â–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    extractor.search_key_candidates()
    
    # –ê–Ω–∞–ª–∏–∑ —ç–Ω—Ç—Ä–æ–ø–∏–∏
    high_entropy = extractor.entropy_analysis()
    
    # –ë—Ä—É—Ç—Ñ–æ—Ä—Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    found_keys = extractor.brute_force_test()
    
    if found_keys:
        print(f"\nüéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ {len(found_keys)} —Ä–∞–±–æ—á–∏—Ö –∫–ª—é—á–µ–π:")
        for key in found_keys:
            print(f"  - '{key}'")
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –ø–µ—Ä–≤—ã–º –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º
        main_key = found_keys[0]
        
        generator_code = f'''#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† - –ö–õ–Æ–ß –ù–ê–ô–î–ï–ù –ß–ï–†–ï–ó –ê–ù–ê–õ–ò–ó –ë–ò–ù–ê–†–ù–ò–ö–ê
"""
import jwt
from datetime import datetime

SECRET_KEY = "{main_key}"

def generate_unlock_token(vehicle_id):
    payload = {{
        "vehicle_id": vehicle_id,
        "iss": "CunBA",
        "timestamp": int(datetime.now().timestamp())
    }}
    return jwt.encode(payload, SECRET_KEY, algorithm='HS256')

if __name__ == "__main__":
    import sys
    vehicle_id = sys.argv[1] if len(sys.argv) > 1 else input("Vehicle ID: ")
    token = generate_unlock_token(vehicle_id)
    print("="*80)
    print(token)
    print("="*80)
'''
        
        with open("D:/vzlom/crykex_generator.py", "w", encoding="utf-8") as f:
            f.write(generator_code)
        
        print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω crykex_generator.py —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º!")
    
    else:
        print("\nüòû –ö–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –ö–ª—é—á –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ–±—Ñ—É—Å—Ü–∏—Ä–æ–≤–∞–Ω")
        print("   - –ö–ª—é—á –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        print("   - –ö–ª—é—á —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º —Ñ–∞–π–ª–µ –∏–ª–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")

if __name__ == "__main__":
    main()
