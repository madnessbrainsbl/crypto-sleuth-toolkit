/*
 * Frida —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ unlock –±–∏–Ω–∞—Ä–Ω–∏–∫–∞
 * –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ HMAC, JWT –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 */

console.log("üöÄ Frida —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ unlock –±–∏–Ω–∞—Ä–Ω–∏–∫–∞");
console.log("=" * 50);

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
var potentialKeys = [];
var jwtOperations = [];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ hex –¥–∞–Ω–Ω—ã—Ö
function hexdump(data, maxLength) {
    maxLength = maxLength || 64;
    var length = Math.min(data.byteLength, maxLength);
    var result = '';
    
    for (var i = 0; i < length; i += 16) {
        var hex = '';
        var ascii = '';
        
        for (var j = 0; j < 16 && (i + j) < length; j++) {
            var byte = data[i + j];
            hex += ('0' + byte.toString(16)).slice(-2) + ' ';
            ascii += (byte >= 32 && byte <= 126) ? String.fromCharCode(byte) : '.';
        }
        
        result += hex.padEnd(48) + ' | ' + ascii + '\n';
    }
    
    return result;
}

// –ü–µ—Ä–µ—Ö–≤–∞—Ç —Ñ—É–Ω–∫—Ü–∏–π HMAC
function hookHMACFunctions() {
    console.log("üîç –ü–æ–∏—Å–∫ HMAC —Ñ—É–Ω–∫—Ü–∏–π...");
    
    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ HMAC —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ —Å–∏–º–≤–æ–ª–∞–º
    var hmacSymbols = [
        "HMAC_Init", "HMAC_Update", "HMAC_Final", "HMAC_CTX_new",
        "EVP_PKEY_new_mac_key", "EVP_DigestSignInit", "EVP_DigestSign"
    ];
    
    hmacSymbols.forEach(function(symbol) {
        try {
            var addr = Module.findExportByName(null, symbol);
            if (addr) {
                console.log("‚úì –ù–∞–π–¥–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è: " + symbol + " –≤ " + addr);
                
                Interceptor.attach(addr, {
                    onEnter: function(args) {
                        console.log("üîë HMAC –æ–ø–µ—Ä–∞—Ü–∏—è: " + symbol);
                        
                        // –î–ª—è HMAC_Init - –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–ª—é—á
                        if (symbol === "HMAC_Init" && args.length > 2) {
                            var keyPtr = args[1];
                            var keyLen = args[2].toInt32();
                            
                            if (keyPtr && !keyPtr.isNull() && keyLen > 0 && keyLen < 256) {
                                try {
                                    var keyData = keyPtr.readByteArray(keyLen);
                                    console.log("üìã –ü–µ—Ä–µ—Ö–≤–∞—á–µ–Ω HMAC –∫–ª—é—á (–¥–ª–∏–Ω–∞: " + keyLen + "):");
                                    console.log(hexdump(new Uint8Array(keyData)));
                                    
                                    potentialKeys.push({
                                        data: keyData,
                                        length: keyLen,
                                        source: "HMAC_Init"
                                    });
                                } catch (e) {
                                    console.log("‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è HMAC –∫–ª—é—á–∞: " + e);
                                }
                            }
                        }
                    },
                    onLeave: function(retval) {
                        // console.log("HMAC —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: " + symbol);
                    }
                });
            }
        } catch (e) {
            // –°–∏–º–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
        }
    });
}

// –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞ JWT —Ç–æ–∫–µ–Ω–æ–≤
function hookStringOperations() {
    console.log("üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π...");
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç strcmp –¥–ª—è JWT —Å—Ç—Ä–æ–∫
    var strcmp = Module.findExportByName(null, "strcmp");
    if (strcmp) {
        Interceptor.attach(strcmp, {
            onEnter: function(args) {
                try {
                    var str1 = args[0].readCString();
                    var str2 = args[1].readCString();
                    
                    // –ò—â–µ–º JWT-—Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                    var jwtPatterns = ["CunBA", "HS256", "jwt", "vehicle_id", "timestamp"];
                    
                    jwtPatterns.forEach(function(pattern) {
                        if ((str1 && str1.includes(pattern)) || (str2 && str2.includes(pattern))) {
                            console.log("üéØ JWT —Å—Ç—Ä–æ–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: '" + str1 + "' vs '" + str2 + "'");
                        }
                    });
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è —Å—Ç—Ä–æ–∫
                }
            }
        });
    }
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç memcmp –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    var memcmp = Module.findExportByName(null, "memcmp");
    if (memcmp) {
        Interceptor.attach(memcmp, {
            onEnter: function(args) {
                var size = args[2].toInt32();
                
                // –ò–Ω—Ç–µ—Ä–µ—Å—É–µ–º—Å—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è–º–∏ —Ä–∞–∑–º–µ—Ä–æ–º —Å JWT –ø–æ–¥–ø–∏—Å—å (32 –±–∞–π—Ç–∞)
                if (size === 32) {
                    console.log("üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ 32-–±–∞–π—Ç –¥–∞–Ω–Ω—ã—Ö (–≤–æ–∑–º–æ–∂–Ω–æ, HMAC –ø–æ–¥–ø–∏—Å—å)");
                    
                    try {
                        var data1 = args[0].readByteArray(size);
                        var data2 = args[1].readByteArray(size);
                        
                        console.log("–î–∞–Ω–Ω—ã–µ 1:");
                        console.log(hexdump(new Uint8Array(data1), 32));
                        console.log("–î–∞–Ω–Ω—ã–µ 2:");
                        console.log(hexdump(new Uint8Array(data2), 32));
                    } catch (e) {
                        console.log("‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö memcmp: " + e);
                    }
                }
            }
        });
    }
}

// –ü–æ–∏—Å–∫ –∏ –ø–µ—Ä–µ—Ö–≤–∞—Ç —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
function hookByInstructionPatterns() {
    console.log("üîç –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π...");
    
    // –°–∫–∞–Ω–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    Process.enumerateModules().forEach(function(module) {
        if (module.name === "unlock" || module.path.includes("unlock")) {
            console.log("üìÇ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª—å: " + module.name + " (" + module.base + ")");
            
            try {
                // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã ARM64 –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –¥–ª—è HMAC –æ–ø–µ—Ä–∞—Ü–∏–π
                var ranges = module.enumerateRanges("r-x");
                ranges.forEach(function(range) {
                    try {
                        // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ "CunBA" –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–π –æ–±–ª–∞—Å—Ç–∏
                        var cunbaPattern = "43756e4241"; // "CunBA" –≤ hex
                        Memory.scan(range.base, range.size, cunbaPattern, {
                            onMatch: function(address, size) {
                                console.log("üéØ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ 'CunBA' –ø–æ –∞–¥—Ä–µ—Å—É: " + address);
                                
                                // –ß–∏—Ç–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                                var context = address.sub(64).readByteArray(128);
                                console.log("–ö–æ–Ω—Ç–µ–∫—Å—Ç:");
                                console.log(hexdump(new Uint8Array(context)));
                            },
                            onError: function(reason) {
                                console.log("‚ö† –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: " + reason);
                            },
                            onComplete: function() {
                                // console.log("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–æ");
                            }
                        });
                    } catch (e) {
                        console.log("‚ö† –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞: " + e);
                    }
                });
            } catch (e) {
                console.log("‚ö† –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –º–æ–¥—É–ª—è: " + e);
            }
        }
    });
}

// –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤
function hookSystemCalls() {
    console.log("üîç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤...");
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç getprop –¥–ª—è vehicle_id
    var getprop = Module.findExportByName(null, "__system_property_get");
    if (getprop) {
        Interceptor.attach(getprop, {
            onEnter: function(args) {
                try {
                    var propName = args[0].readCString();
                    if (propName && propName.includes("vehicle_id")) {
                        console.log("üöó –ó–∞–ø—Ä–æ—Å vehicle_id: " + propName);
                        this.propName = propName;
                    }
                } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
                }
            },
            onLeave: function(retval) {
                if (this.propName) {
                    try {
                        var value = this.context.r1.readCString(); // ARM64
                        console.log("üöó vehicle_id –ø–æ–ª—É—á–µ–Ω: " + value);
                    } catch (e) {
                        console.log("‚ö† –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è vehicle_id: " + e);
                    }
                }
            }
        });
    }
}

// –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
function main() {
    console.log("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–æ–≤...");
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∏
    hookHMACFunctions();
    hookStringOperations();
    hookSystemCalls();
    hookByInstructionPatterns();
    
    console.log("‚úÖ –í—Å–µ –ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã. –û–∂–∏–¥–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏...");
    console.log("üí° –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ unlock –±–∏–Ω–∞—Ä–Ω–∏–∫ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ");
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
    setInterval(function() {
        if (potentialKeys.length > 0) {
            console.log("üìä –°—Ç–∞—Ç—É—Å: –Ω–∞–π–¥–µ–Ω–æ " + potentialKeys.length + " –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π");
            potentialKeys.forEach(function(key, index) {
                console.log("–ö–ª—é—á #" + (index + 1) + " (–∏—Å—Ç–æ—á–Ω–∏–∫: " + key.source + ", –¥–ª–∏–Ω–∞: " + key.length + "):");
                console.log(hexdump(new Uint8Array(key.data), 32));
            });
        }
    }, 10000); // –ö–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
}

// –ó–∞–ø—É—Å–∫
main();
