#!/usr/bin/env python3
import jwt
import json
import base64
import hashlib
import hmac
import itertools
import string
from datetime import datetime
import subprocess
import os
import re

# –†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω
working_token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"

def extract_qnx_system_info():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å QNX –ø—Ä–æ–≥—Ä–∞–º–º–∞"""
    system_candidates = []
    
    # QNX —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—É—Ç–∏ –∏ –¥–∞–Ω–Ω—ã–µ
    qnx_paths = [
        "/proc/cpuinfo",
        "/proc/meminfo", 
        "/proc/version",
        "/dev/shmem",
        "/data/local/tmp",
        "/system/bin"
    ]
    
    # QNX –∫–æ–º–∞–Ω–¥—ã –∏ —Å–≤–æ–π—Å—Ç–≤–∞
    qnx_properties = [
        "ro.build.version.release",
        "ro.build.id",
        "ro.build.display.id", 
        "ro.build.product",
        "ro.product.model",
        "ro.product.brand",
        "ro.product.name",
        "ro.serialno",
        "ro.boot.serialno",
        "persist.vendor.radio.imei"
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º known vehicle ID
    system_candidates.extend([
        "0d79ff047f5cec5bf2ec2ec7d3e464ce",
        "cunba",
        "CunBA", 
        "CUNBA",
        "mega",
        "platform",
        "A11",
        "qnx",
        "QNX",
        "unlock",
        "huron"
    ])
    
    return system_candidates

def generate_qnx_specific_keys(vehicle_id, timestamp):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç QNX-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –∫–ª—é—á–µ–π"""
    candidates = set()
    
    # –ë–∞–∑–æ–≤—ã–µ QNX —Å—Ç—Ä–æ–∫–∏
    base_strings = extract_qnx_system_info()
    
    # –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å timestamp –∏ vehicle_id
    for base in base_strings:
        candidates.update([
            base,
            f"{base}_{vehicle_id}",
            f"{base}_{timestamp}",
            f"{vehicle_id}_{base}",
            f"{timestamp}_{base}",
            f"{base}{vehicle_id}",
            f"{base}{timestamp}",
            f"{vehicle_id}{base}",
            f"{timestamp}{base}",
            # MD5 —Ö–µ—à–∏
            hashlib.md5(base.encode()).hexdigest(),
            hashlib.md5(f"{base}{vehicle_id}".encode()).hexdigest(),
            hashlib.md5(f"{base}{timestamp}".encode()).hexdigest(),
            # SHA256 —Ö–µ—à–∏
            hashlib.sha256(base.encode()).hexdigest(),
            hashlib.sha256(f"{base}{vehicle_id}".encode()).hexdigest(),
            hashlib.sha256(f"{base}{timestamp}".encode()).hexdigest(),
        ])
    
    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º
    automotive_keys = [
        "VIN", "ECU", "CAN", "OBD", "TCU", "BCM", "PCM",
        "mega_platform_A11", "cunba_unlock_key", "qnx_automotive",
        f"vehicle_{vehicle_id}", f"ecu_{vehicle_id}",
        "unlock_secret_key", "automotive_jwt_key"
    ]
    
    candidates.update(automotive_keys)
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –±–∞–π—Ç–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏
    result = []
    for candidate in candidates:
        if isinstance(candidate, str):
            result.append(candidate)
            result.append(candidate.encode('utf-8'))
            result.append(candidate.encode('ascii', errors='ignore'))
        else:
            result.append(candidate)
    
    return result

def test_jwt_key(token, key_candidate):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª—é—á —Å JWT –±–∏–±–ª–∏–æ—Ç–µ–∫–æ–π"""
    try:
        decoded = jwt.decode(token, key_candidate, algorithms=["HS256"])
        return True
    except:
        return False

def manual_hmac_verification(token, key_candidate):
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ HMAC –ø–æ–¥–ø–∏—Å–∏"""
    try:
        parts = token.split('.')
        message = f"{parts[0]}.{parts[1]}"
        expected_signature = base64.urlsafe_b64decode(parts[2] + '==')
        
        if isinstance(key_candidate, str):
            key_bytes = key_candidate.encode('utf-8')
        else:
            key_bytes = key_candidate
            
        computed_signature = hmac.new(key_bytes, message.encode('utf-8'), hashlib.sha256).digest()
        return computed_signature == expected_signature
    except:
        return False

def analyze_qnx_binary():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç QNX –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –∫–ª—é—á–µ–π"""
    print("üîç –ê–Ω–∞–ª–∏–∑ QNX –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ 'unlock'...")
    
    if not os.path.exists("unlock"):
        print("‚ùå –§–∞–π–ª 'unlock' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        return []
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –∏–∑ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞
    try:
        with open("unlock", "rb") as f:
            content = f.read()
        
        # –ò—â–µ–º ASCII —Å—Ç—Ä–æ–∫–∏ –¥–ª–∏–Ω–æ–π –æ—Ç 4 —Å–∏–º–≤–æ–ª–æ–≤
        ascii_strings = []
        current_string = b""
        
        for byte in content:
            if 32 <= byte <= 126:  # Printable ASCII
                current_string += bytes([byte])
            else:
                if len(current_string) >= 4:
                    ascii_strings.append(current_string.decode('ascii', errors='ignore'))
                current_string = b""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
        if len(current_string) >= 4:
            ascii_strings.append(current_string.decode('ascii', errors='ignore'))
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏
        potential_keys = []
        for s in ascii_strings:
            # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∫–ª—é—á–∞–º–∏
            if (len(s) >= 8 and 
                (re.match(r'^[a-zA-Z0-9_-]+$', s) or
                 'key' in s.lower() or
                 'secret' in s.lower() or
                 'token' in s.lower() or
                 'auth' in s.lower() or
                 'sign' in s.lower() or
                 'hmac' in s.lower() or
                 'cunba' in s.lower() or
                 'unlock' in s.lower())):
                potential_keys.append(s)
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(potential_keys)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ –±–∏–Ω–∞—Ä–Ω–∏–∫–µ:")
        for key in potential_keys[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
            print(f"  - {key}")
        
        return potential_keys
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞: {e}")
        return []

def brute_force_qnx_keys():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞ –∫–ª—é—á–µ–π –¥–ª—è QNX"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –∫–ª—é—á–∞ JWT –¥–ª—è QNX —Å–∏—Å—Ç–µ–º—ã...")
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    header = jwt.get_unverified_header(working_token)
    payload = jwt.decode(working_token, options={"verify_signature": False})
    
    vehicle_id = payload.get('vehicle_id', '')
    timestamp = payload.get('timestamp', 0)
    
    print(f"Vehicle ID: {vehicle_id}")
    print(f"Timestamp: {timestamp}")
    print(f"Issuer: {payload.get('iss', '')}")
    
    # 1. –ê–Ω–∞–ª–∏–∑ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞
    binary_keys = analyze_qnx_binary()
    
    # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è QNX-—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö –∫–ª—é—á–µ–π
    qnx_keys = generate_qnx_specific_keys(vehicle_id, timestamp)
    
    # 3. –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    all_candidates = binary_keys + qnx_keys
    
    # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    unique_candidates = []
    seen = set()
    for candidate in all_candidates:
        if candidate not in seen:
            unique_candidates.append(candidate)
            seen.add(candidate)
    
    print(f"\nüîé –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(unique_candidates)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    for i, candidate in enumerate(unique_candidates):
        if i % 100 == 0 and i > 0:
            print(f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {i}/{len(unique_candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
        
        # –¢–µ—Å—Ç 1: JWT –±–∏–±–ª–∏–æ—Ç–µ–∫–∞
        if test_jwt_key(working_token, candidate):
            print(f"üéâ –ö–õ–Æ–ß –ù–ê–ô–î–ï–ù (JWT): {candidate}")
            return candidate
        
        # –¢–µ—Å—Ç 2: –†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ HMAC
        if manual_hmac_verification(working_token, candidate):
            print(f"üéâ –ö–õ–Æ–ß –ù–ê–ô–î–ï–ù (HMAC): {candidate}")
            return candidate
    
    print("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    return None

def generate_new_token_without_exp(key, vehicle_id):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ë–ï–ó –ø–æ–ª—è exp (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Ç–æ–∫–µ–Ω–µ)"""
    payload = {
        "vehicle_id": vehicle_id,
        "iss": "CunBA",
        "timestamp": int(datetime.now().timestamp())
    }
    
    try:
        token = jwt.encode(payload, key, algorithm="HS256")
        print(f"‚úÖ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {token}")
        return token
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return None

if __name__ == "__main__":
    print("=== QNX JWT –ê–Ω–∞–ª–∏–∑ ===")
    
    # –ò—â–µ–º –∫–ª—é—á
    found_key = brute_force_qnx_keys()
    
    if found_key:
        print(f"\nüéØ –ù–ê–ô–î–ï–ù–ù–´–ô –ö–õ–Æ–ß: {found_key}")
        print(f"–¢–∏–ø –∫–ª—é—á–∞: {type(found_key)}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω
        vehicle_id = "0d79ff047f5cec5bf2ec2ec7d3e464ce"
        new_token = generate_new_token_without_exp(found_key, vehicle_id)
        
        if new_token:
            print(f"\nüöÄ –¢–ï–°–¢–û–í–´–ô –¢–û–ö–ï–ù –î–õ–Ø QNX: {new_token}")
            print("\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ QNX:")
            print("1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–æ–∫–µ–Ω –≤—ã—à–µ")
            print("2. –í—Å—Ç–∞–≤—å—Ç–µ –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞ QNX —Å–∏—Å—Ç–µ–º–µ")
            print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ ./unlock –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
    else:
        print("\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–¥—Ö–æ–¥—ã:")
        print("1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤ /data/local/tmp")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞ QNX —Å–∏—Å—Ç–µ–º–µ")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ—Ç–ª–∞–¥—á–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ñ—É–Ω–∫—Ü–∏–π –ø–æ–¥–ø–∏—Å–∏")
        print("4. –ü–æ–∏—â–∏—Ç–µ —Å–∫—Ä—ã—Ç—ã–µ —Ñ–∞–π–ª—ã —Å –∫–ª—é—á–∞–º–∏ –≤ —Å–∏—Å—Ç–µ–º–µ")
