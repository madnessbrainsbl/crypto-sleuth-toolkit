#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ FUN_00103994 –¥–ª—è –ø–æ–∏—Å–∫–∞ SECRET_KEY
–û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –¥–µ–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–¥–µ –∏–∑ Ghidra
"""
import jwt
import hashlib
import hmac
import base64
import struct
import binascii

# –†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"

EXACT_PAYLOAD = {
    "vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce",
    "iss": "CunBA",
    "timestamp": 1753096202
}

class GhidraFunctionAnalyzer:
    def __init__(self, binary_path="unlock"):
        self.binary_path = binary_path
        self.binary_data = None
        
        # –ö–ª—é—á–µ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ –¥–µ–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        self.key_offsets = {
            'data_buffer': 0x5db4,
            'data_pointer': 0x5d00, 
            'data_size': 0x5d20,
            'alt_buffer': 0x142c,
            'status_flag': 0x5c90,
            'context_ptr': 0x18,
            'magic_buffer': 0x5430
        }
        
        # –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.handler_functions = [
            0x0010d54c,  # FUN_0010d54c - case 3, bVar4 == true
            0x0010d5c4,  # FUN_0010d5c4 - case 3, bVar4 == false  
            0x00109ac4,  # FUN_00109ac4 - other cases, bVar4 == true
            0x0010d8e4   # FUN_0010d8e4 - other cases, bVar4 == false
        ]
        
    def load_binary(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            with open(self.binary_path, 'rb') as f:
                self.binary_data = f.read()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª {self.binary_path} ({len(self.binary_data)} –±–∞–π—Ç)")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
            return False
    
    def analyze_protocol_parser(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª—å–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ FUN_00103994"""
        print("\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–¢–û–ö–û–õ–¨–ù–û–ì–û –ü–ê–†–°–ï–†–ê")
        print("="*60)
        
        # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        error_codes = {
            0xffffffffffffffec: "INVALID_DATA (-20)",
            0xffffffffffffffe2: "ACCESS_DENIED (-30)"
        }
        
        # –ú–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞ –∏ –ª–∏–º–∏—Ç—ã
        magic_numbers = {
            0x20000f: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è uint3",
            0x20000: "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è uVar1", 
            0x3fff: "–ú–∞—Å–∫–∞ –¥–ª—è 14-–±–∏—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è",
            0x3ffff: "–ú–∞—Å–∫–∞ –¥–ª—è 18-–±–∏—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è",
            0x3ff: "–ú–∞—Å–∫–∞ –¥–ª—è 10-–±–∏—Ç–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è",
            0x800: "–†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞ (2048 –±–∞–π—Ç)",
            0xffffffffffffff89: "–ì—Ä–∞–Ω–∏—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏"
        }
        
        print("üìä –ö–û–ù–°–¢–ê–ù–¢–´ –ò–ó –§–£–ù–ö–¶–ò–ò:")
        for value, desc in magic_numbers.items():
            print(f"  0x{value:x}: {desc}")
            
        return self.search_related_strings()
    
    def search_related_strings(self):
        """–ò—â–µ—Ç —Å—Ç—Ä–æ–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ—Ç–æ–∫–æ–ª—å–Ω—ã–º –ø–∞—Ä—Å–µ—Ä–æ–º"""
        if not self.binary_data:
            return []
            
        print("\nüîç –ü–û–ò–°–ö –°–í–Ø–ó–ê–ù–ù–´–• –°–¢–†–û–ö –í –ë–ò–ù–ê–†–ù–ò–ö–ï:")
        
        # –ò—â–µ–º ASCII —Å—Ç—Ä–æ–∫–∏ —Ä—è–¥–æ–º —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
        potential_keys = set()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ
        for func_addr in self.handler_functions:
            # –ü—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ - –∞–¥—Ä–µ—Å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–º–µ—â–µ–Ω–∏–µ–º –≤ —Ñ–∞–π–ª–µ
            possible_offsets = [
                func_addr & 0xFFFFFF,  # –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—à–∏–µ –±–∏—Ç—ã
                func_addr & 0xFFFFF,   # –ï—â–µ –º–µ–Ω—å—à–µ
                func_addr & 0xFFFF,    # –¢–æ–ª—å–∫–æ –º–ª–∞–¥—à–∏–µ 16 –±–∏—Ç
            ]
            
            for offset in possible_offsets:
                if offset < len(self.binary_data):
                    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏
                    start = max(0, offset - 1000)
                    end = min(len(self.binary_data), offset + 1000)
                    region = self.binary_data[start:end]
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º ASCII —Å—Ç—Ä–æ–∫–∏
                    strings = self.extract_ascii_strings(region, min_length=8)
                    for s in strings:
                        if self.is_potential_key(s):
                            potential_keys.add(s)
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(potential_keys)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π:")
        for key in sorted(potential_keys)[:20]:
            print(f"  - {key}")
            
        return list(potential_keys)
    
    def extract_ascii_strings(self, data, min_length=4):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ASCII —Å—Ç—Ä–æ–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        strings = []
        current_string = ""
        
        for byte in data:
            if 32 <= byte <= 126:  # Printable ASCII
                current_string += chr(byte)
            else:
                if len(current_string) >= min_length:
                    strings.append(current_string)
                current_string = ""
                
        if len(current_string) >= min_length:
            strings.append(current_string)
            
        return strings
    
    def is_potential_key(self, s):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –±—ã—Ç—å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∫–ª—é—á–æ–º"""
        if len(s) < 8 or len(s) > 128:
            return False
            
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        key_indicators = [
            'key', 'secret', 'token', 'auth', 'sign', 'hmac',
            'cunba', 'unlock', 'mega', 'jwt', 'crypto', 'hash'
        ]
        
        s_lower = s.lower()
        has_keyword = any(keyword in s_lower for keyword in key_indicators)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ Base64-–ø–æ–¥–æ–±–Ω—É—é —Å—Ç—Ä–æ–∫—É
        import re
        is_base64_like = bool(re.match(r'^[A-Za-z0-9+/=_-]+$', s))
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ hex
        is_hex_like = bool(re.match(r'^[0-9a-fA-F]+$', s)) and len(s) % 2 == 0
        
        return has_keyword or (is_base64_like and len(s) >= 16) or (is_hex_like and len(s) >= 32)
    
    def generate_keys_from_constants(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏"""
        print("\nüîë –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–õ–Æ–ß–ï–ô –ò–ó –ö–û–ù–°–¢–ê–ù–¢ –§–£–ù–ö–¶–ò–ò:")
        
        candidates = set()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–¥—Ä–µ—Å–∞ –∫–∞–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∫–ª—é—á–µ–π
        for name, offset in self.key_offsets.items():
            # Hex –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            candidates.add(f"{offset:x}")
            candidates.add(f"{offset:08x}")
            
            # –° –ø—Ä–µ—Ñ–∏–∫—Å–∞–º–∏
            candidates.add(f"key_{offset:x}")
            candidates.add(f"secret_{offset:x}")
            candidates.add(f"unlock_{offset:x}")
            candidates.add(f"cunba_{offset:x}")
            
            # –•–µ—à–∏ –∞–¥—Ä–µ—Å–æ–≤
            addr_str = f"{offset:x}"
            candidates.add(hashlib.md5(addr_str.encode()).hexdigest())
            candidates.add(hashlib.sha256(addr_str.encode()).hexdigest())
        
        # –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π
        for func_addr in self.handler_functions:
            func_str = f"{func_addr:x}"
            candidates.add(func_str)
            candidates.add(f"func_{func_str}")
            candidates.add(hashlib.md5(func_str.encode()).hexdigest())
        
        # –ú–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞ –∫–∞–∫ –∫–ª—é—á–∏
        magic_nums = [0x20000f, 0x20000, 0x3fff, 0x3ffff, 0x3ff, 0x800]
        for num in magic_nums:
            candidates.add(f"{num:x}")
            candidates.add(f"magic_{num:x}")
            candidates.add(hashlib.md5(f"{num:x}".encode()).hexdigest())
        
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ –∫–æ–Ω—Å—Ç–∞–Ω—Ç —Ñ—É–Ω–∫—Ü–∏–∏")
        return list(candidates)
    
    def analyze_memory_layout(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–º—è—Ç–∏ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏"""
        print("\nüß† –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –ü–ê–ú–Ø–¢–ò:")
        print("="*60)
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–º–µ—â–µ–Ω–∏–π
        memory_structure = {
            0x18: "context_ptr - –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç",
            0x142c: "alt_buffer - –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –±—É—Ñ–µ—Ä",
            0x5430: "magic_buffer - –ë—É—Ñ–µ—Ä —Å –º–∞–≥–∏—á–µ—Å–∫–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º 0x800",
            0x5c90: "status_flag - –§–ª–∞–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ == 0)",
            0x5d00: "data_pointer - –£–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ –¥–∞–Ω–Ω—ã–µ",
            0x5d20: "data_size - –†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö", 
            0x5db4: "data_buffer - –û—Å–Ω–æ–≤–Ω–æ–π –±—É—Ñ–µ—Ä –¥–∞–Ω–Ω—ã—Ö"
        }
        
        for offset, desc in sorted(memory_structure.items()):
            print(f"  +0x{offset:04x}: {desc}")
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        struct_keys = []
        
        # –†–∞–∑–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        max_offset = max(memory_structure.keys())
        struct_size = max_offset + 8  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
        
        struct_keys.extend([
            f"struct_{struct_size:x}",
            f"size_{struct_size}",
            hashlib.md5(f"struct_{struct_size}".encode()).hexdigest(),
        ])
        
        # –ö–ª—é—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É –ø–æ–ª—è–º–∏
        offsets = sorted(memory_structure.keys())
        for i in range(len(offsets) - 1):
            distance = offsets[i+1] - offsets[i]
            struct_keys.append(f"dist_{distance:x}")
        
        print(f"\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(struct_keys)} –∫–ª—é—á–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–º—è—Ç–∏")
        return struct_keys
    
    def test_all_candidates(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –∫–ª—é—á–µ–π"""
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ö–ê–ù–î–ò–î–ê–¢–û–í:")
        print("="*60)
        
        all_candidates = set()
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        if self.load_binary():
            all_candidates.update(self.analyze_protocol_parser())
        
        all_candidates.update(self.generate_keys_from_constants())
        all_candidates.update(self.analyze_memory_layout())
        
        print(f"\nüéØ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(all_candidates)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç
        tested = 0
        for candidate in all_candidates:
            if self.test_jwt_key(candidate):
                print(f"üéâ –ù–ê–ô–î–ï–ù –ö–õ–Æ–ß: {candidate}")
                return candidate
            tested += 1
            
            if tested % 100 == 0:
                print(f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {tested}/{len(all_candidates)}")
        
        print("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        return None
    
    def test_jwt_key(self, key):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª—é—á —Å JWT"""
        try:
            test_token = jwt.encode(EXACT_PAYLOAD, key, algorithm='HS256')
            return test_token == WORKING_TOKEN
        except:
            return False

# –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
if __name__ == "__main__":
    print("üöÄ –ê–ù–ê–õ–ò–ó –§–£–ù–ö–¶–ò–ò FUN_00103994 –î–õ–Ø –ü–û–ò–°–ö–ê SECRET_KEY")
    print("="*70)
    
    analyzer = GhidraFunctionAnalyzer()
    result = analyzer.test_all_candidates()
    
    if result:
        print(f"\n‚úÖ SUCCESS! –ù–∞–π–¥–µ–Ω SECRET_KEY: {result}")
    else:
        print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –î–µ–∫–æ–º–ø–∏–ª–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ Ghidra:")
        for addr in analyzer.handler_functions:
            print(f"   - FUN_{addr:08x}")
        print("2. –ù–∞–π–¥–∏—Ç–µ –≤—ã–∑–æ–≤—ã FUN_00103994 –∏ –ø—Ä–æ—Å–ª–µ–¥–∏—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä–æ–∫–∏ –≤–æ–∫—Ä—É–≥ –∞–¥—Ä–µ—Å–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π –≤ –±–∏–Ω–∞—Ä–Ω–∏–∫–µ")
        print("4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ GDB –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
