#!/usr/bin/env python3
import jwt
import json
import base64
import hashlib
import hmac
import itertools
import string
from datetime import datetime
import binascii

# –†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω
working_token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"

def decode_token_parts(token):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç –≤—Å–µ —á–∞—Å—Ç–∏ JWT —Ç–æ–∫–µ–Ω–∞"""
    parts = token.split('.')
    header_b64 = parts[0]
    payload_b64 = parts[1]
    signature_b64 = parts[2]
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º header –∏ payload
    header = json.loads(base64.urlsafe_b64decode(header_b64 + '=='))
    payload = json.loads(base64.urlsafe_b64decode(payload_b64 + '=='))
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å—å –≤ –±–∞–π—Ç—ã
    signature_bytes = base64.urlsafe_b64decode(signature_b64 + '==')
    
    return header, payload, signature_bytes, f"{header_b64}.{payload_b64}"

def generate_key_candidates(vehicle_id, timestamp, iss):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∫–ª—é—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–∞"""
    candidates = set()
    
    # –ü—Ä–æ—Å—Ç—ã–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–∏
    static_keys = [
        "secret", "key", "unlock", "cunba", "CunBA", "CUNBA", "CuNBA",
        "qnx", "mega", "platform", "token", "jwt", "auth", "sign",
        "unlock_secret", "cunba_key", "mega_unlock", "qnx_key",
        "virbox", "protector", "android"
    ]
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    system_data = [
        vehicle_id,
        vehicle_id.upper(),
        vehicle_id.lower(),
        str(timestamp),
        iss,
        iss.upper(),
        iss.lower()
    ]
    
    # –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏
    combinations = []
    for key in static_keys[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        for data in system_data[:5]:
            combinations.extend([
                f"{key}_{data}",
                f"{data}_{key}",
                f"{key}{data}",
                f"{data}{key}"
            ])
    
    # –•–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    hash_sources = static_keys + system_data + [vehicle_id + str(timestamp), str(timestamp) + vehicle_id]
    hash_variants = []
    
    for source in hash_sources:
        try:
            hash_variants.extend([
                hashlib.md5(source.encode()).hexdigest(),
                hashlib.sha1(source.encode()).hexdigest(),
                hashlib.sha256(source.encode()).hexdigest(),
                hashlib.md5(source.encode()).digest(),
                hashlib.sha1(source.encode()).digest(),
                hashlib.sha256(source.encode()).digest()
            ])
        except:
            continue
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    all_candidates = static_keys + system_data + combinations + hash_variants
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –∫–æ–¥–∏—Ä–æ–≤–∫–∞—Ö
    for candidate in all_candidates[:100]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
        if isinstance(candidate, str):
            candidates.add(candidate)
            candidates.add(candidate.encode('utf-8'))
            candidates.add(candidate.encode('ascii', errors='ignore'))
        else:
            candidates.add(candidate)
    
    return list(candidates)

def test_hmac_key(message, expected_signature, key_candidate):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è HMAC-SHA256"""
    try:
        if isinstance(key_candidate, str):
            key_bytes = key_candidate.encode('utf-8')
        else:
            key_bytes = key_candidate
            
        computed = hmac.new(key_bytes, message.encode('utf-8'), hashlib.sha256).digest()
        return computed == expected_signature
    except:
        return False

def brute_force_systematic(token):
    """–°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—Ä—É—Ç—Ñ–æ—Ä—Å –∫–ª—é—á–∞"""
    print("üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∫–ª—é—á–∞...")
    
    header, payload, signature, message = decode_token_parts(token)
    vehicle_id = payload.get('vehicle_id', '')
    timestamp = payload.get('timestamp', 0)
    iss = payload.get('iss', '')
    
    print(f"Vehicle ID: {vehicle_id}")
    print(f"Timestamp: {timestamp}")
    print(f"Issuer: {iss}")
    print(f"Expected signature (hex): {signature.hex()}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    candidates = generate_key_candidates(vehicle_id, timestamp, iss)
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –∫–ª—é—á–∞")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    for i, candidate in enumerate(candidates):
        if i % 100 == 0:
            print(f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {i}/{len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
            
        if test_hmac_key(message, signature, candidate):
            print(f"üéâ –ö–õ–Æ–ß –ù–ê–ô–î–ï–ù: {candidate}")
            print(f"–¢–∏–ø –∫–ª—é—á–∞: {type(candidate)}")
            if isinstance(candidate, bytes):
                print(f"–ö–ª—é—á (hex): {candidate.hex()}")
            return candidate
    
    print("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    return None

def analyze_signature_pattern(token):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –≤ –ø–æ–¥–ø–∏—Å–∏"""
    print("\nüî¨ –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ–¥–ø–∏—Å–∏...")
    
    header, payload, signature, message = decode_token_parts(token)
    
    print(f"Signature bytes: {signature.hex()}")
    print(f"Signature length: {len(signature)} bytes")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–¥–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ—Å—Ç–æ–≥–æ XOR
    for xor_key in [0x42, 0xFF, 0x00, 0x69, 0x33]:
        xored = bytes([b ^ xor_key for b in signature])
        print(f"XOR with 0x{xor_key:02x}: {xored.hex()}")

def test_custom_algorithms(token):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–¥–ø–∏—Å–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Å—Ç–æ–º–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤...")
    
    header, payload, signature, message = decode_token_parts(token)
    vehicle_id = payload.get('vehicle_id', '')
    timestamp = payload.get('timestamp', 0)
    
    # –¢–µ—Å—Ç 1: –ú–æ–∂–µ—Ç –±—ã—Ç—å –∫–ª—é—á - —ç—Ç–æ –∫–æ–º–±–∏–Ω–∞—Ü–∏—è timestamp + vehicle_id
    test_keys = [
        f"{timestamp}{vehicle_id}",
        f"{vehicle_id}{timestamp}",
        hashlib.md5(f"{timestamp}{vehicle_id}".encode()).hexdigest(),
        hashlib.md5(f"{vehicle_id}{timestamp}".encode()).hexdigest()
    ]
    
    for key in test_keys:
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º JWT –±–∏–±–ª–∏–æ—Ç–µ–∫—É
            decoded = jwt.decode(token, key, algorithms=["HS256"])
            print(f"‚úÖ JWT –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω —Å –∫–ª—é—á–æ–º: {key}")
            return key
        except jwt.InvalidSignatureError:
            continue
        except Exception as e:
            continue
    
    return None

def reverse_engineer_from_strings():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∏–∑ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–π"""
    print("\nüîé –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∫ –∏–∑ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")
    
    # –°—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –Ω–∞—à–ª–∏ –≤ –±–∏–Ω–∞—Ä–Ω–∏–∫–µ
    potential_keys = [
        "virbox", "protector", "android", "CunBA", "unlock",
        "signal", "pthread", "Operation not authorized at current processing stage",
        # Hex —Å—Ç—Ä–æ–∫–∏ –∏–∑ –¥–∞–º–ø–∞
        "0d79ff047f5cec5bf2ec2ec7d3e464ce",  # vehicle_id
        "1753096202",  # timestamp
    ]
    
    # –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ Ghidra
    ghidra_functions = [
        "getentropy", "sigaction", "signal", "memcpy", "malloc",
        "dlopen", "dlsym", "ptrace", "prctl", "pthread_create"
    ]
    
    all_potential = potential_keys + ghidra_functions
    
    for key in all_potential:
        try:
            decoded = jwt.decode(working_token, key, algorithms=["HS256"])
            print(f"‚úÖ –ù–ê–ô–î–ï–ù –ö–õ–Æ–ß –ò–ó –°–¢–†–û–ö: {key}")
            return key
        except:
            continue
    
    return None

if __name__ == "__main__":
    print("=== –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ JWT —Ç–æ–∫–µ–Ω–∞ ===")
    
    # 1. –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ–¥–ø–∏—Å–∏
    analyze_signature_pattern(working_token)
    
    # 2. –ü–æ–∏—Å–∫ —Å—Ä–µ–¥–∏ —Å—Ç—Ä–æ–∫ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞
    found_key = reverse_engineer_from_strings()
    if found_key:
        print(f"\nüéØ –ö–ª—é—á –Ω–∞–π–¥–µ–Ω: {found_key}")
    else:
        # 3. –°–∏—Å—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—Ä—É—Ç—Ñ–æ—Ä—Å
        found_key = brute_force_systematic(working_token)
        
        if not found_key:
            # 4. –ö–∞—Å—Ç–æ–º–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
            found_key = test_custom_algorithms(working_token)
    
    if found_key:
        print(f"\nüéâ –§–ò–ù–ê–õ–¨–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: –ö–ª—é—á = {found_key}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º
        test_payload = {
            "vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce",
            "iss": "CunBA",
            "timestamp": int(datetime.now().timestamp())
        }
        
        try:
            new_token = jwt.encode(test_payload, found_key, algorithm="HS256")
            print(f"\n–ù–û–í–´–ô –¢–ï–°–¢–û–í–´–ô –¢–û–ö–ï–ù: {new_token}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
    else:
        print("\n‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞—Å—Ç–æ–º–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–¥–ø–∏—Å–∏.")
