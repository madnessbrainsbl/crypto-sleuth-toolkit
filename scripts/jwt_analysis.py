#!/usr/bin/env python3
import jwt
import json
import base64
import hashlib
import hmac
from datetime import datetime

# –†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω (–∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç)
working_token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"

# –¢–æ–∫–µ–Ω –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
failed_token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5Njc2MSwiZXhwIjoxNzUzMDk3MDYxfQ.StCOSqg0VcOs3UTTOfYsq1JWitZ9bLL9gTepJD8LMuY"

def decode_jwt(token):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏"""
    try:
        header = jwt.get_unverified_header(token)
        payload = jwt.decode(token, options={"verify_signature": False})
        return header, payload
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return None, None

def analyze_token(token, name):
    print(f"\n=== –ê–Ω–∞–ª–∏–∑ {name} ===")
    header, payload = decode_jwt(token)
    
    if header and payload:
        print(f"Header: {json.dumps(header, indent=2)}")
        print(f"Payload: {json.dumps(payload, indent=2)}")
        
        # –†–∞–∑–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
        parts = token.split('.')
        header_b64 = parts[0]
        payload_b64 = parts[1]
        signature_b64 = parts[2]
        
        print(f"Header (base64): {header_b64}")
        print(f"Payload (base64): {payload_b64}")
        print(f"Signature (base64): {signature_b64}")
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º signature –≤ hex
        signature_bytes = base64.urlsafe_b64decode(signature_b64 + '==')
        print(f"Signature (hex): {signature_bytes.hex()}")
        
        return header, payload, signature_bytes
    
    return None, None, None

def brute_force_key(token, vehicle_id, timestamp):
    """–ü–æ–ø—ã—Ç–∫–∞ –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞ –∫–ª—é—á–∞"""
    print(f"\n=== –ë—Ä—É—Ç—Ñ–æ—Ä—Å –∫–ª—é—á–∞ ===")
    
    # –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è –∫–ª—é—á–∞
    key_candidates = [
        # –ü—Ä–æ—Å—Ç—ã–µ –∫–ª—é—á–∏
        "secret", "key", "unlock", "cunba", "CunBA", "CUNBA",
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        vehicle_id, 
        str(timestamp),
        f"{vehicle_id}{timestamp}",
        f"{timestamp}{vehicle_id}",
        # MD5/SHA –≤–∞—Ä–∏–∞–Ω—Ç—ã
        hashlib.md5(vehicle_id.encode()).hexdigest(),
        hashlib.sha256(vehicle_id.encode()).hexdigest(),
        hashlib.md5(str(timestamp).encode()).hexdigest(),
        hashlib.sha256(str(timestamp).encode()).hexdigest(),
        # –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏
        f"unlock_{vehicle_id}",
        f"cunba_{timestamp}",
        "mega_platform_key",
        "qnx_unlock_key"
    ]
    
    for key in key_candidates:
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏ –∫–ª—é—á–∞
            for key_variant in [key, key.encode(), key.encode('utf-8')]:
                try:
                    decoded = jwt.decode(token, key_variant, algorithms=["HS256"])
                    print(f"‚úÖ –ù–ê–ô–î–ï–ù –ö–õ–Æ–ß: '{key}' (—Ç–∏–ø: {type(key_variant)})")
                    return key_variant
                except jwt.InvalidSignatureError:
                    continue
                except Exception as e:
                    continue
        except:
            continue
    
    print("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    return None

def manual_hmac_check(token, key_candidate):
    """–†—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ HMAC –ø–æ–¥–ø–∏—Å–∏"""
    parts = token.split('.')
    header_payload = f"{parts[0]}.{parts[1]}"
    expected_signature = base64.urlsafe_b64decode(parts[2] + '==')
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∫–ª—é—á–∞
    for key in [key_candidate, key_candidate.encode(), 
                key_candidate.encode('utf-8'), 
                bytes.fromhex(key_candidate) if all(c in '0123456789abcdefABCDEF' for c in key_candidate) else None]:
        if key is None:
            continue
            
        try:
            computed_signature = hmac.new(key, header_payload.encode(), hashlib.sha256).digest()
            if computed_signature == expected_signature:
                print(f"‚úÖ HMAC —Å–æ–≤–ø–∞–¥–∞–µ—Ç –¥–ª—è –∫–ª—é—á–∞: {key}")
                return True
        except:
            continue
    
    return False

if __name__ == "__main__":
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–∞ —Ç–æ–∫–µ–Ω–∞
    working_header, working_payload, working_sig = analyze_token(working_token, "–†–ê–ë–û–ß–ò–ô —Ç–æ–∫–µ–Ω")
    failed_header, failed_payload, failed_sig = analyze_token(failed_token, "–ù–ï –†–ê–ë–û–ß–ò–ô —Ç–æ–∫–µ–Ω")
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º payload
    print(f"\n=== –°—Ä–∞–≤–Ω–µ–Ω–∏–µ payload ===")
    if working_payload and failed_payload:
        print("–†–∞–∑–ª–∏—á–∏—è –≤ payload:")
        for key in set(list(working_payload.keys()) + list(failed_payload.keys())):
            working_val = working_payload.get(key, "–û–¢–°–£–¢–°–¢–í–£–ï–¢")
            failed_val = failed_payload.get(key, "–û–¢–°–£–¢–°–¢–í–£–ï–¢")
            if working_val != failed_val:
                print(f"  {key}: —Ä–∞–±–æ—á–∏–π={working_val}, –Ω–µ_—Ä–∞–±–æ—á–∏–π={failed_val}")
    
    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–ª—é—á –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
    if working_payload:
        vehicle_id = working_payload.get('vehicle_id', '')
        timestamp = working_payload.get('timestamp', 0)
        found_key = brute_force_key(working_token, vehicle_id, timestamp)
        
        if found_key:
            print(f"\nüéâ –ù–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª—é—á –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤!")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º
            test_payload = {
                "vehicle_id": vehicle_id,
                "iss": "CunBA", 
                "timestamp": int(datetime.now().timestamp())
            }
            
            new_token = jwt.encode(test_payload, found_key, algorithm="HS256")
            print(f"–ù–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω: {new_token}")
