#!/usr/bin/env python3
"""
QNX JWT Key Finder
–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫–ª—é—á–∞ –¥–ª—è QNX —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
"""

import jwt
import hashlib
import hmac
import base64
import struct
import binascii
from datetime import datetime

WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"
VEHICLE_ID = "0d79ff047f5cec5bf2ec2ec7d3e464ce"

def verify_key(key_candidate):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª—é—á"""
    try:
        if isinstance(key_candidate, bytes):
            key_candidate = key_candidate.decode('latin-1', errors='ignore')
        jwt.decode(WORKING_TOKEN, key_candidate, algorithms=["HS256"])
        return True
    except:
        return False

def generate_qnx_system_keys():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–∏ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –¥–ª—è QNX"""
    keys = []
    
    # QNX —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –ø—É—Ç–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è
    qnx_patterns = [
        "/proc/boot/unlock",
        "/dev/shmem/jwt_key",
        "qnx_mega_platform",
        "mega_a11_unlock",
        "cunba_jwt_secret",
        "vehicle_unlock_key",
    ]
    
    for pattern in qnx_patterns:
        keys.append(pattern)
        keys.append(pattern.upper())
        keys.append(hashlib.md5(pattern.encode()).hexdigest())
        keys.append(hashlib.sha256(pattern.encode()).hexdigest())
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ QNX
    getprop_keys = [
        "ro.serialno",
        "ro.boot.serialno", 
        "ro.hardware",
        "ro.product.model",
        "persist.sys.timezone",
    ]
    
    # –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å vehicle_id
    for prop in getprop_keys:
        keys.append(f"{prop}_{VEHICLE_ID}")
        keys.append(f"{VEHICLE_ID}_{prop}")
    
    return keys

def generate_hardware_based_keys():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ hardware ID"""
    keys = []
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è vehicle_id
    vid_bytes = bytes.fromhex(VEHICLE_ID)
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è ID
    keys.append(VEHICLE_ID)  # –∫–∞–∫ –µ—Å—Ç—å
    keys.append(VEHICLE_ID.upper())
    keys.append(VEHICLE_ID.lower())
    
    # –ü–æ–±–∞–π—Ç–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    for i in range(len(vid_bytes)):
        # –¶–∏–∫–ª–∏—á–µ—Å–∫–∏–π —Å–¥–≤–∏–≥
        rotated = vid_bytes[i:] + vid_bytes[:i]
        keys.append(rotated.hex())
        
        # XOR —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–∞—Å–∫–∞–º–∏
        for mask in [0xFF, 0xAA, 0x55, 0x69, 0x42]:
            xored = bytes([b ^ mask for b in vid_bytes])
            keys.append(xored.hex())
    
    # –ß–∞—Å—Ç–∏ ID –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–º–±–∏–Ω–∞—Ü–∏—è—Ö
    parts = [VEHICLE_ID[i:i+8] for i in range(0, len(VEHICLE_ID), 8)]
    
    # –°—É–º–º—ã –∏ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —á–∞—Å—Ç–µ–π
    for i, part in enumerate(parts):
        num = int(part, 16)
        keys.append(str(num))
        keys.append(f"KEY_{num}")
        keys.append(f"SECRET_{num}")
    
    return keys

def generate_embedded_patterns():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–∏ —Ç–∏–ø–∏—á–Ω—ã–µ –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º"""
    keys = []
    
    # –¢–∏–ø–∏—á–Ω—ã–µ –∫–ª—é—á–∏ –≤–æ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö
    embedded_patterns = [
        "00000000000000000000000000000000",  # 32 –Ω—É–ª—è
        "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF",  # 32 F
        "0123456789ABCDEF0123456789ABCDEF",  # —Ç–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω
        "DEADBEEFDEADBEEFDEADBEEFDEADBEEF",  # –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω
        "CAFEBABECAFEBABECAFEBABECAFEBABE",  # Java –ø–∞—Ç—Ç–µ—Ä–Ω
    ]
    
    for pattern in embedded_patterns:
        keys.append(pattern)
        keys.append(pattern.lower())
        # –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –∫–∞–∫ –±–∞–π—Ç—ã
        try:
            keys.append(bytes.fromhex(pattern).decode('latin-1'))
        except:
            pass
    
    # –ê–¥—Ä–µ—Å–∞ –ø–∞–º—è—Ç–∏ –∫–∞–∫ –∫–ª—é—á–∏
    memory_addresses = [
        "002791f4", "002791f8", "002791ec", "002791f0",
        "0010d54c", "0010d5c4", "00109ac4", "0010d8e4"
    ]
    
    for addr in memory_addresses:
        keys.append(addr)
        keys.append("0x" + addr)
        # –†–∞—Å—à–∏—Ä—è–µ–º –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤
        keys.append(addr * 4)
        keys.append((addr + "00000000") * 2)
    
    return keys

def generate_function_based_keys():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ—É–Ω–∫—Ü–∏–π"""
    keys = []
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ —Ñ—É–Ω–∫—Ü–∏–π
    function_constants = [
        # –ò–∑ FUN_0010d8e4
        (0x18, 0xf, 0x8, 0x3),  # –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–∞–±–ª–∏—Ü
        # –ú–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞
        (0x40, 0x41, 0x3f, 0xff),
        (0xffffffffffffff88, 0xffffffffffffffec),
    ]
    
    for const_tuple in function_constants:
        # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É hex
        hex_str = ''.join(f"{c:02x}" if c < 256 else f"{c:016x}" for c in const_tuple)
        keys.append(hex_str)
        
        # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ –±–∞–π—Ç—ã
        for c in const_tuple:
            if c < 256:
                keys.append(chr(c) * 32)
            else:
                keys.append(struct.pack("<Q", c & 0xFFFFFFFFFFFFFFFF).hex())
    
    return keys

def check_binary_strings():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –±–∏–Ω–∞—Ä–Ω–∏–∫–µ"""
    keys = []
    
    # –°—Ç—Ä–æ–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å JWT/–∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    crypto_strings = [
        "jwt_secret", "jwt_key", "hmac_key", "sign_key",
        "SECRET_KEY", "SIGNING_KEY", "TOKEN_KEY",
        "unlock_secret", "unlock_key", "device_key",
        "MEGA_KEY", "CUNBA_KEY", "PLATFORM_KEY"
    ]
    
    for s in crypto_strings:
        keys.append(s)
        keys.append(s.lower())
        keys.append(s.upper())
        # –° vehicle_id
        keys.append(f"{s}_{VEHICLE_ID}")
        keys.append(f"{VEHICLE_ID}_{s}")
    
    return keys

def main():
    print("üîß QNX JWT Key Finder")
    print("=" * 50)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    parts = WORKING_TOKEN.split('.')
    header = base64.urlsafe_b64decode(parts[0] + '==')
    payload = base64.urlsafe_b64decode(parts[1] + '==') 
    signature = base64.urlsafe_b64decode(parts[2] + '==')
    
    print(f"üìä –¢–æ–∫–µ–Ω:")
    print(f"  Header: {header}")
    print(f"  Payload: {payload}")
    print(f"  Signature (hex): {signature.hex()}")
    print(f"  Signature (ASCII): {repr(signature)}")
    
    # –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ - –ø–æ–¥–ø–∏—Å—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '1ij'
    print(f"\nüîç –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–∏:")
    print(f"  –ü–µ—Ä–≤—ã–µ 3 –±–∞–π—Ç–∞: {signature[:3]} ({repr(signature[:3])})")
    print(f"  –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–æ–π!")
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–ª—é—á–∏
    all_keys = set()
    
    generators = [
        ("QNX —Å–∏—Å—Ç–µ–º–Ω—ã–µ", generate_qnx_system_keys),
        ("Hardware ID", generate_hardware_based_keys),
        ("Embedded –ø–∞—Ç—Ç–µ—Ä–Ω—ã", generate_embedded_patterns),
        ("–§—É–Ω–∫—Ü–∏–∏", generate_function_based_keys),
        ("–ë–∏–Ω–∞—Ä–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏", check_binary_strings),
    ]
    
    print(f"\nüìã –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:")
    for name, gen in generators:
        keys = gen()
        print(f"  {name}: {len(keys)} –∫–ª—é—á–µ–π")
        all_keys.update(keys)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
    special_keys = [
        "1ij",  # –Ω–∞—á–∞–ª–æ –ø–æ–¥–ø–∏—Å–∏
        "1ij" + "0" * 29,  # –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –Ω—É–ª—è–º–∏
        "31696a",  # hex –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ '1ij'
        "31696a" + "0" * 26,  # –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –Ω—É–ª—è–º–∏
        signature[:16].hex(),  # –ø–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∏ –∫–∞–∫ –∫–ª—é—á
        signature[-16:].hex(),  # –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∏ –∫–∞–∫ –∫–ª—é—á
    ]
    
    all_keys.update(special_keys)
    
    print(f"\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ {len(all_keys)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
    
    found = False
    for i, key in enumerate(all_keys):
        if verify_key(key):
            print(f"\n‚úÖ –ù–ê–ô–î–ï–ù –ö–õ–Æ–ß: {repr(key)}")
            print(f"–î–ª–∏–Ω–∞ –∫–ª—é—á–∞: {len(key)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            payload = {
                "vehicle_id": VEHICLE_ID,
                "iss": "CunBA",
                "timestamp": int(datetime.now().timestamp())
            }
            new_token = jwt.encode(payload, key, algorithm="HS256")
            print(f"\nüÜï –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω: {new_token}")
            
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            decoded = jwt.decode(new_token, key, algorithms=["HS256"])
            print(f"–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π payload: {decoded}")
            
            found = True
            break
        
        if i % 100 == 0:
            print(f"  –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {i}/{len(all_keys)}", end='\r')
    
    if not found:
        print(f"\n\n‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ {len(all_keys)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        print("\nüí° –î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏:")
        print("1. –î–∞–º–ø–Ω—É—Ç—å –ø–∞–º—è—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞ unlock –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ")
        print("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å IDA Pro/Ghidra –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç")
        print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–∫—Ä—É–∂–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π 0x0010d54c, 0x0010d5c4")
        print("4. –ü–æ–∏—Å–∫–∞—Ç—å –≤—ã–∑–æ–≤—ã HMAC/SHA256 —Ñ—É–Ω–∫—Ü–∏–π")
        print("5. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏ –∫–∞—Å—Ç–æ–º–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è JWT")

if __name__ == "__main__":
    main()
