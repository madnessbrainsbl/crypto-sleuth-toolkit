#!/usr/bin/env python3
"""
–û–±—Ä–∞—Ç–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è SECRET_KEY —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ JWT –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
"""

import jwt
import base64
import json
import binascii
import hashlib
import hmac
from itertools import product

# –†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω
WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"

def decode_jwt_parts():
    """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–µ–π JWT"""
    print("üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ JWT —Ç–æ–∫–µ–Ω–∞")
    print("="*50)
    
    parts = WORKING_TOKEN.split('.')
    
    # Header
    header_decoded = base64.b64decode(parts[0] + '==')  # –î–æ–±–∞–≤–ª—è–µ–º padding
    header_json = json.loads(header_decoded)
    print(f"Header: {header_json}")
    
    # Payload  
    payload_decoded = base64.b64decode(parts[1] + '==')
    payload_json = json.loads(payload_decoded)
    print(f"Payload: {payload_json}")
    
    # Signature (base64url)
    signature_bytes = base64.urlsafe_b64decode(parts[2] + '==')
    print(f"Signature (hex): {binascii.hexlify(signature_bytes).decode()}")
    print(f"Signature (base64): {parts[2]}")
    print(f"Signature length: {len(signature_bytes)} bytes")
    
    return parts[0], parts[1], signature_bytes, header_json, payload_json

def try_hmac_with_candidates():
    """–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ –∫–ª—é—á —á–µ—Ä–µ–∑ HMAC SHA256"""
    print("\nüîë –ü–æ–∏—Å–∫ SECRET_KEY —á–µ—Ä–µ–∑ HMAC SHA256...")
    
    header_b64, payload_b64, target_signature, header, payload = decode_jwt_parts()
    
    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ (header.payload)
    message = f"{header_b64}.{payload_b64}".encode('ascii')
    
    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: {message.decode()}")
    print(f"–¶–µ–ª–µ–≤–∞—è –ø–æ–¥–ø–∏—Å—å: {binascii.hexlify(target_signature).decode()}")
    
    # –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –∫–ª—é—á–µ–π –¥–ª—è HMAC
    key_candidates = []
    
    # 1. –ü—Ä–æ—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    simple_keys = [
        "CunBA", "unlock", "mega", "secret", "key", "jwt", "HS256",
        "cunba", "CUNBA", "UNLOCK", "MEGA", "SECRET", "KEY", "JWT",
        "android", "vehicle", "qualcomm", "8155"
    ]
    key_candidates.extend(simple_keys)
    
    # 2. –ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–æ–∫–µ–Ω–∞
    vehicle_id = "0d79ff047f5cec5bf2ec2ec7d3e464ce"
    timestamp = "1753096202"
    
    data_based_keys = [
        vehicle_id,
        vehicle_id.upper(),
        timestamp,
        f"CunBA_{timestamp}",
        f"CunBA_{vehicle_id}",
        f"{vehicle_id}_{timestamp}",
        f"unlock_{vehicle_id}",
        f"mega_{vehicle_id}"
    ]
    key_candidates.extend(data_based_keys)
    
    # 3. –•—ç—à–∏
    for base in ["CunBA", "unlock", "mega", vehicle_id]:
        key_candidates.extend([
            hashlib.md5(base.encode()).hexdigest(),
            hashlib.sha1(base.encode()).hexdigest(),
            hashlib.sha256(base.encode()).hexdigest(),
            hashlib.sha256(base.encode()).hexdigest()[:32],
            hashlib.sha256(base.encode()).hexdigest()[:16],
        ])
    
    # 4. –ë–∞–π—Ç–æ–≤—ã–µ –∫–ª—é—á–∏
    try:
        vid_bytes = binascii.unhexlify(vehicle_id)
        key_candidates.extend([
            vid_bytes.decode('latin1'),
            binascii.hexlify(vid_bytes).decode(),
        ])
    except:
        pass
    
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º {len(key_candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∫–ª—é—á–µ–π...")
    
    for i, key in enumerate(key_candidates):
        try:
            # –ü—Ä–æ–±—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
            if isinstance(key, str):
                key_bytes = key.encode('utf-8')
            else:
                key_bytes = key
            
            # HMAC SHA256
            signature = hmac.new(key_bytes, message, hashlib.sha256).digest()
            
            if signature == target_signature:
                print(f"üéâ –ù–ê–ô–î–ï–ù SECRET_KEY!")
                print(f"–ö–ª—é—á: '{key}'")
                print(f"–¢–∏–ø: {type(key)}")
                print(f"–ë–∞–π—Ç—ã: {key_bytes}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ jwt –±–∏–±–ª–∏–æ—Ç–µ–∫—É
                test_token = jwt.encode(payload, key, algorithm='HS256')
                if test_token == WORKING_TOKEN:
                    print(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —á–µ—Ä–µ–∑ JWT –±–∏–±–ª–∏–æ—Ç–µ–∫—É!")
                return key
                
        except Exception as e:
            continue
    
    print("‚ùå HMAC –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    return None

def bruteforce_key_from_binary():
    """–ë—Ä—É—Ç—Ñ–æ—Ä—Å –∫–ª—é—á–∞ –∏–∑ —Å—Ç—Ä–æ–∫ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞"""
    print("\nüîç –ë—Ä—É—Ç—Ñ–æ—Ä—Å –∫–ª—é—á–∞ –∏–∑ unlock –±–∏–Ω–∞—Ä–Ω–∏–∫–∞...")
    
    try:
        with open("unlock", "rb") as f:
            data = f.read()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª unlock –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    header_b64, payload_b64, target_signature, header, payload = decode_jwt_parts()
    message = f"{header_b64}.{payload_b64}".encode('ascii')
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    strings = []
    current_string = ""
    
    for byte in data:
        if 32 <= byte <= 126:  # ASCII
            current_string += chr(byte)
        else:
            if len(current_string) >= 4:
                strings.append(current_string)
            current_string = ""
    
    if current_string:
        strings.append(current_string)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(strings)} —Å—Ç—Ä–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    tested = 0
    for string in strings:
        tested += 1
        if tested % 1000 == 0:
            print(f"   –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {tested}/{len(strings)}...")
        
        try:
            key_bytes = string.encode('utf-8')
            signature = hmac.new(key_bytes, message, hashlib.sha256).digest()
            
            if signature == target_signature:
                print(f"üéâ –ù–ê–ô–î–ï–ù SECRET_KEY –í –ë–ò–ù–ê–†–ù–ò–ö–ï!")
                print(f"–ö–ª—é—á: '{string}'")
                print(f"–ü–æ–∑–∏—Ü–∏—è –≤ —Ñ–∞–π–ª–µ: {data.find(string.encode())}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ jwt
                test_token = jwt.encode(payload, string, algorithm='HS256')
                if test_token == WORKING_TOKEN:
                    print(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —á–µ—Ä–µ–∑ JWT –±–∏–±–ª–∏–æ—Ç–µ–∫—É!")
                return string
        except:
            continue
    
    print("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä–æ–∫–∞—Ö –±–∏–Ω–∞—Ä–Ω–∏–∫–∞")
    return None

def analyze_signature_pattern():
    """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ–¥–ø–∏—Å–∏"""
    print("\nüìä –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ–¥–ø–∏—Å–∏...")
    
    header_b64, payload_b64, target_signature, header, payload = decode_jwt_parts()
    
    print(f"–ü–æ–¥–ø–∏—Å—å (hex): {binascii.hexlify(target_signature).decode()}")
    
    # –ê–Ω–∞–ª–∏–∑ –±–∞–π—Ç–æ–≤
    sig_bytes = list(target_signature)
    print(f"–ë–∞–π—Ç—ã –ø–æ–¥–ø–∏—Å–∏: {[hex(b) for b in sig_bytes]}")
    
    # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    unique_bytes = len(set(sig_bytes))
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∞–π—Ç–æ–≤: {unique_bytes}/32")
    
    # –≠–Ω—Ç—Ä–æ–ø–∏—è
    from collections import Counter
    import math
    counter = Counter(sig_bytes)
    entropy = sum(-(count/32) * math.log2(count/32) for count in counter.values() if count > 0)
    print(f"–≠–Ω—Ç—Ä–æ–ø–∏—è: {entropy:.2f}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏"""
    print("üîê –û–ë–†–ê–¢–ù–ê–Ø –ò–ù–ñ–ï–ù–ï–†–ò–Ø SECRET_KEY")
    print("="*60)
    print(f"–†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω: {WORKING_TOKEN[:50]}...")
    print()
    
    # –ê–Ω–∞–ª–∏–∑ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    decode_jwt_parts()
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–∏
    analyze_signature_pattern()
    
    # –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ HMAC –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    result = try_hmac_with_candidates()
    
    if not result:
        # –ë—Ä—É—Ç—Ñ–æ—Ä—Å –∏–∑ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞
        result = bruteforce_key_from_binary()
    
    if result:
        print(f"\nüéâ SUCCESS! –ù–ê–ô–î–ï–ù –ü–†–ê–í–ò–õ–¨–ù–´–ô SECRET_KEY: '{result}'")
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator_code = f'''#!/usr/bin/env python3
import jwt
from datetime import datetime

# –ù–ê–ô–î–ï–ù–ù–´–ô SECRET_KEY
SECRET_KEY = "{result}"

def generate_unlock_token(vehicle_id):
    payload = {{
        "vehicle_id": vehicle_id,
        "iss": "CunBA", 
        "timestamp": int(datetime.now().timestamp())
    }}
    return jwt.encode(payload, SECRET_KEY, algorithm='HS256')

if __name__ == "__main__":
    import sys
    vehicle_id = sys.argv[1] if len(sys.argv) > 1 else input("Vehicle ID: ")
    token = generate_unlock_token(vehicle_id)
    print("="*80)
    print(token)
    print("="*80)
'''
        
        with open("final_generator.py", "w") as f:
            f.write(generator_code)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω final_generator.py —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º!")
    else:
        print("\nüòû SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –æ–±—Ä–∞—Ç–Ω—É—é –∏–Ω–∂–µ–Ω–µ—Ä–∏—é")

if __name__ == "__main__":
    main()
