#!/usr/bin/env python3
"""
–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –∏ –Ω–µ—Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Ä–∞–∑–ª–∏—á–∏–π
"""
import jwt
import json
import base64

# 100% —Ä–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω (—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ –¥–µ–ª–∞–µ—Ç Success + –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞)
working_token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"

# –ù–µ—Ä–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω (—Å –ø–æ–ª–µ–º exp)
broken_token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5Njc2MSwiZXhwIjoxNzUzMDk3MDYxfQ.StCOSqg0VcOs3UTTOfYsq1JWitZ9bLL9gTepJD8LMuY"

print("üîç –ê–ù–ê–õ–ò–ó –¢–û–ö–ï–ù–û–í")
print("="*60)

# –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
working_header = jwt.get_unverified_header(working_token)
broken_header = jwt.get_unverified_header(broken_token)

print("\nüìã –ó–ê–ì–û–õ–û–í–ö–ò:")
print(f"–†–∞–±–æ—á–∏–π: {working_header}")
print(f"–ù–µ—Ä–∞–±–æ—á–∏–π: {broken_header}")
print(f"–ó–∞–≥–æ–ª–æ–≤–∫–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã: {working_header == broken_header}")

# –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload
working_payload = jwt.decode(working_token, options={"verify_signature": False})
broken_payload = jwt.decode(broken_token, options={"verify_signature": False})

print("\nüì¶ PAYLOAD:")
print("–†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω:")
for key, value in working_payload.items():
    print(f"  {key}: {value}")

print("\n–ù–µ—Ä–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω:")
for key, value in broken_payload.items():
    print(f"  {key}: {value}")

# –ù–∞—Ö–æ–¥–∏–º —Ä–∞–∑–ª–∏—á–∏—è
print("\nüîç –†–ê–ó–õ–ò–ß–ò–Ø:")
working_keys = set(working_payload.keys())
broken_keys = set(broken_payload.keys())

print(f"–¢–æ–ª—å–∫–æ –≤ —Ä–∞–±–æ—á–µ–º: {working_keys - broken_keys}")
print(f"–¢–æ–ª—å–∫–æ –≤ –Ω–µ—Ä–∞–±–æ—á–µ–º: {broken_keys - working_keys}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–µ –ø–æ–ª—è
common_keys = working_keys & broken_keys
for key in common_keys:
    if working_payload[key] != broken_payload[key]:
        print(f"–†–∞–∑–ª–∏—á–∏–µ –≤ '{key}': {working_payload[key]} vs {broken_payload[key]}")

print("\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:")
print("‚úÖ –†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ 'exp' (–≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è)")
print("‚ùå –ù–µ—Ä–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ 'exp'")
print("üí° –°–∏—Å—Ç–µ–º–∞ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω—ã —Å –ø–æ–ª–µ–º exp!")

print("\nüìä –ê–ù–ê–õ–ò–ó –ü–û–î–ü–ò–°–ï–ô:")
working_parts = working_token.split('.')
broken_parts = broken_token.split('.')

print(f"–†–∞–±–æ—á–∞—è –ø–æ–¥–ø–∏—Å—å: {working_parts[2]}")
print(f"–ù–µ—Ä–∞–±–æ—á–∞—è –ø–æ–¥–ø–∏—Å—å: {broken_parts[2]}")
print(f"–ü–æ–¥–ø–∏—Å–∏ —Ä–∞–∑–Ω—ã–µ: {working_parts[2] != broken_parts[2]}")

# –î–µ–∫–æ–¥–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∏
try:
    working_sig = base64.urlsafe_b64decode(working_parts[2] + '==')
    broken_sig = base64.urlsafe_b64decode(broken_parts[2] + '==')
    
    print(f"\n–†–∞–±–æ—á–∞—è –ø–æ–¥–ø–∏—Å—å (hex): {working_sig.hex()}")
    print(f"–ù–µ—Ä–∞–±–æ—á–∞—è –ø–æ–¥–ø–∏—Å—å (hex): {broken_sig.hex()}")
    print(f"–î–ª–∏–Ω–∞ –ø–æ–¥–ø–∏—Å–∏: {len(working_sig)} –±–∞–π—Ç")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∏: {e}")

print("\nüöÄ –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
print("1. –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω—ã –ë–ï–ó –ø–æ–ª—è 'exp'")
print("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ—á–Ω–æ —Ç–∞–∫—É—é –∂–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º —Ç–æ–∫–µ–Ω–µ")
print("3. –ò—Å–∫–∞—Ç—å –∫–ª—é—á –¥–ª—è –ø–æ–¥–ø–∏—Å–∏ HMAC-SHA256")

# –°–æ–∑–¥–∞–µ–º —Ç–æ—á–Ω—É—é –∫–æ–ø–∏—é payload –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–µ–π
exact_payload = {
    "vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce",
    "iss": "CunBA", 
    "timestamp": 1753096202
}

print(f"\nüéØ –¢–û–ß–ù–´–ô PAYLOAD –î–õ–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
print(json.dumps(exact_payload, separators=(',', ':')))
