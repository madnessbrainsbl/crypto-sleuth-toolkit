#!/usr/bin/env python3
"""
–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—á–µ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∫–ª—é—á–∞
"""

import jwt
import json
import base64
import binascii
import hashlib
import hmac
import time
import itertools
from datetime import datetime, timezone
import string
import os
import platform
import socket

# –†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"

def decode_token_completely():
    """–ü–æ–ª–Ω–æ–µ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞"""
    print("üîç –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –†–ê–ë–û–ß–ï–ì–û –¢–û–ö–ï–ù–ê")
    print("="*60)
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
    parts = WORKING_TOKEN.split('.')
    
    # Header
    header_decoded = base64.urlsafe_b64decode(parts[0] + '==')
    header = json.loads(header_decoded)
    print(f"Header: {json.dumps(header, indent=2)}")
    
    # Payload
    payload_decoded = base64.urlsafe_b64decode(parts[1] + '==')
    payload = json.loads(payload_decoded)
    print(f"Payload: {json.dumps(payload, indent=2)}")
    
    # Signature
    signature_bytes = base64.urlsafe_b64decode(parts[2] + '==')
    print(f"Signature (hex): {binascii.hexlify(signature_bytes).decode()}")
    print(f"Signature (base64): {parts[2]}")
    print(f"Signature length: {len(signature_bytes)} bytes")
    
    # –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏
    timestamp = payload.get('timestamp', 0)
    dt = datetime.fromtimestamp(timestamp)
    print(f"Timestamp: {timestamp}")
    print(f"Human time: {dt.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"UTC time: {datetime.fromtimestamp(timestamp, tz=timezone.utc)}")
    
    return header, payload, signature_bytes

def analyze_timestamp_patterns():
    """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–∏"""
    print("\nüìä –ê–ù–ê–õ–ò–ó –í–†–ï–ú–ï–ù–ù–û–ô –ú–ï–¢–ö–ò")
    print("="*50)
    
    timestamp = 1753096202
    dt = datetime.fromtimestamp(timestamp)
    
    print(f"–ë–∞–∑–æ–≤—ã–π timestamp: {timestamp}")
    print(f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {dt.strftime('%Y-%m-%d %H:%M:%S')}")
    print(f"–ì–æ–¥: {dt.year}")
    print(f"–ú–µ—Å—è—Ü: {dt.month}")  
    print(f"–î–µ–Ω—å: {dt.day}")
    print(f"–ß–∞—Å: {dt.hour}")
    print(f"–ú–∏–Ω—É—Ç–∞: {dt.minute}")
    print(f"–°–µ–∫—É–Ω–¥–∞: {dt.second}")
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    time_variants = [
        str(timestamp),
        str(timestamp)[:10],  # –ü–µ—Ä–≤—ã–µ 10 —Ü–∏—Ñ—Ä
        str(timestamp)[-6:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Ü–∏—Ñ—Ä
        hex(timestamp)[2:],   # Hex –±–µ–∑ 0x
        str(dt.year),
        f"{dt.year}{dt.month:02d}{dt.day:02d}",
        f"{dt.hour:02d}{dt.minute:02d}{dt.second:02d}",
    ]
    
    print(f"\n–í–∞—Ä–∏–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    for i, variant in enumerate(time_variants):
        print(f"  {i+1}. {variant}")
    
    return time_variants

def generate_system_based_keys():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüñ•Ô∏è  –°–ò–°–¢–ï–ú–ù–´–ï –î–ê–ù–ù–´–ï –î–õ–Ø –ö–õ–Æ–ß–ï–ô")
    print("="*50)
    
    vehicle_id = "0d79ff047f5cec5bf2ec2ec7d3e464ce"
    timestamp = 1753096202
    
    system_data = {
        'vehicle_id': vehicle_id,
        'timestamp': timestamp,
        'platform': 'android',  # –ò–∑–≤–µ—Å—Ç–Ω–æ —á—Ç–æ Android
        'arch': 'arm64',        # Qualcomm 8155
        'device': 'qualcomm8155',
        'brand': 'mega',
        'app': 'unlock',
        'issuer': 'CunBA'
    }
    
    print("–°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:")
    for key, value in system_data.items():
        print(f"  {key}: {value}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á–∏-–∫–∞–Ω–¥–∏–¥–∞—Ç—ã
    key_candidates = []
    
    # 1. –ü—Ä–æ—Å—Ç—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    simple_combinations = [
        f"{system_data['issuer']}",
        f"{system_data['issuer']}_{system_data['app']}",
        f"{system_data['app']}_{system_data['issuer']}",
        f"{system_data['issuer']}_{vehicle_id}",
        f"{system_data['issuer']}_{timestamp}",
        f"{vehicle_id}_{system_data['issuer']}",
        f"{system_data['brand']}_{system_data['app']}",
        f"{system_data['device']}_{system_data['app']}",
    ]
    key_candidates.extend(simple_combinations)
    
    # 2. –•—ç—à–∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for data in [vehicle_id, str(timestamp), system_data['issuer']]:
        key_candidates.extend([
            hashlib.md5(data.encode()).hexdigest(),
            hashlib.sha1(data.encode()).hexdigest(),
            hashlib.sha256(data.encode()).hexdigest()[:32],
            hashlib.sha256(data.encode()).hexdigest()[:16],
        ])
    
    # 3. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ö—ç—à–∏
    combined_data = [
        f"{vehicle_id}{timestamp}",
        f"{system_data['issuer']}{vehicle_id}",
        f"{system_data['issuer']}{timestamp}",
        f"{system_data['app']}{vehicle_id}",
    ]
    
    for data in combined_data:
        key_candidates.extend([
            hashlib.md5(data.encode()).hexdigest(),
            hashlib.sha256(data.encode()).hexdigest()[:32],
        ])
    
    print(f"\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(key_candidates)} —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–ª—é—á–µ–π-–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    return key_candidates

def brute_force_mathematical_keys():
    """–ë—Ä—É—Ç—Ñ–æ—Ä—Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–π"""
    print("\nüî¢ –ú–ê–¢–ï–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–Ø")
    print("="*50)
    
    vehicle_id = "0d79ff047f5cec5bf2ec2ec7d3e464ce"
    timestamp = 1753096202
    
    math_keys = []
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å vehicle_id –∫–∞–∫ —á–∏—Å–ª–æ
    try:
        vid_int = int(vehicle_id, 16)  # Hex to int
        print(f"Vehicle ID –∫–∞–∫ —á–∏—Å–ª–æ: {vid_int}")
        
        # –†–∞–∑–ª–∏—á–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        math_operations = [
            vid_int % 1000000,
            vid_int ^ timestamp,
            (vid_int + timestamp) % 0xFFFFFFFF,
            vid_int * 31,  # –ü—Ä–æ—Å—Ç–æ–π —Ö—ç—à
            abs(hash(vehicle_id)) % 1000000,
        ]
        
        for result in math_operations:
            math_keys.append(str(result))
            math_keys.append(hex(result)[2:])
    
    except ValueError:
        pass
    
    # –û–ø–µ—Ä–∞—Ü–∏–∏ —Å timestamp
    time_math = [
        timestamp ^ 0x12345678,
        timestamp + 0x1000,
        timestamp % 1000000,
        timestamp // 1000,  # –°–µ–∫—É–Ω–¥—ã –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    ]
    
    for result in time_math:
        math_keys.append(str(result))
    
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(math_keys)} –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π")
    return math_keys

def test_key_candidates(candidates):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∫–ª—é—á–µ–π"""
    print(f"\nüéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï {len(candidates)} –ö–ê–ù–î–ò–î–ê–¢–û–í")
    print("="*50)
    
    payload = {
        "vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce",
        "iss": "CunBA",
        "timestamp": 1753096202
    }
    
    found_keys = []
    
    for i, key in enumerate(candidates):
        if i % 1000 == 0 and i > 0:
            print(f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {i}/{len(candidates)}...")
        
        try:
            test_token = jwt.encode(payload, key, algorithm='HS256')
            if test_token == WORKING_TOKEN:
                print(f"\nüéâ –ù–ê–ô–î–ï–ù –ö–õ–Æ–ß!")
                print(f"–ö–ª—é—á: '{key}'")
                print(f"–î–ª–∏–Ω–∞: {len(key)} —Å–∏–º–≤–æ–ª–æ–≤")
                found_keys.append(key)
        except:
            continue
    
    return found_keys

def reverse_engineer_key_structure():
    """–ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–ª—é—á–∞"""
    print("\nüî¨ –û–ë–†–ê–¢–ù–ê–Ø –ò–ù–ñ–ï–ù–ï–†–ò–Ø –ö–õ–Æ–ß–ê")
    print("="*50)
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ–¥–ø–∏—Å–∏
    parts = WORKING_TOKEN.split('.')
    message = f"{parts[0]}.{parts[1]}".encode('ascii')
    target_signature = base64.urlsafe_b64decode(parts[2] + '==')
    
    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: {message.decode()}")
    print(f"–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: {len(message)} –±–∞–π—Ç")
    print(f"–¶–µ–ª–µ–≤–∞—è –ø–æ–¥–ø–∏—Å—å: {binascii.hexlify(target_signature).decode()}")
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–ª–∏–Ω—ã –∫–ª—é—á–µ–π
    print("\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–µ–π —Ä–∞–∑–ª–∏—á–Ω–æ–π –¥–ª–∏–Ω—ã...")
    
    # –î–ª—è –∫–∞–∂–¥–æ–π –¥–ª–∏–Ω—ã –ø–æ–ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    for key_length in [4, 8, 16, 32, 64]:
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –¥–ª–∏–Ω—ã {key_length}...")
        
        # –ü—Ä–æ—Å—Ç—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        patterns = [
            'a' * key_length,
            '0' * key_length,
            '1' * key_length,
            ('CunBA' * (key_length // 5 + 1))[:key_length],
            ('unlock' * (key_length // 6 + 1))[:key_length],
        ]
        
        for pattern in patterns:
            if len(pattern) == key_length:
                signature = hmac.new(pattern.encode(), message, hashlib.sha256).digest()
                if signature == target_signature:
                    print(f"üéâ –ù–ê–ô–î–ï–ù –ü–ê–¢–¢–ï–†–ù –ö–õ–Æ–ß–ê: '{pattern}'")
                    return pattern
    
    return None

def analyze_signature_entropy():
    """–ê–Ω–∞–ª–∏–∑ —ç–Ω—Ç—Ä–æ–ø–∏–∏ –ø–æ–¥–ø–∏—Å–∏"""
    print("\nüìà –ê–ù–ê–õ–ò–ó –≠–ù–¢–†–û–ü–ò–ò –ü–û–î–ü–ò–°–ò") 
    print("="*50)
    
    parts = WORKING_TOKEN.split('.')
    signature_bytes = base64.urlsafe_b64decode(parts[2] + '==')
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑
    byte_counts = {}
    for byte in signature_bytes:
        byte_counts[byte] = byte_counts.get(byte, 0) + 1
    
    print(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–∞–π—Ç–æ–≤ –≤ –ø–æ–¥–ø–∏—Å–∏: {len(byte_counts)}/32")
    print(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–π—Ç–æ–≤: {byte_counts}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–¥–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø—Ä–æ—Å—Ç–æ–≥–æ XOR
    print("\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö XOR –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
    vehicle_id_bytes = bytes.fromhex("0d79ff047f5cec5bf2ec2ec7d3e464ce")
    
    for i in range(min(len(vehicle_id_bytes), len(signature_bytes))):
        xor_result = signature_bytes[i] ^ vehicle_id_bytes[i]
        print(f"–ë–∞–π—Ç {i}: –ø–æ–¥–ø–∏—Å—å={signature_bytes[i]:02x}, vid={vehicle_id_bytes[i]:02x}, xor={xor_result:02x}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    print("üöÄ DEEP TOKEN ANALYZER")
    print("="*80)
    print("–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—á–µ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ SECRET_KEY")
    print()
    
    # 1. –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–∫–µ–Ω–∞
    header, payload, signature = decode_token_completely()
    
    # 2. –ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    time_variants = analyze_timestamp_patterns()
    
    # 3. –ê–Ω–∞–ª–∏–∑ —ç–Ω—Ç—Ä–æ–ø–∏–∏
    analyze_signature_entropy()
    
    # 4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –∫–ª—é—á–µ–π
    system_keys = generate_system_based_keys()
    
    # 5. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    math_keys = brute_force_mathematical_keys()
    
    # 6. –û–±—Ä–∞—Ç–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    pattern_key = reverse_engineer_key_structure()
    
    # 7. –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    all_candidates = []
    all_candidates.extend(time_variants)
    all_candidates.extend(system_keys)
    all_candidates.extend(math_keys)
    
    if pattern_key:
        all_candidates.append(pattern_key)
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    all_candidates = list(set(all_candidates))
    
    # 8. –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    found_keys = test_key_candidates(all_candidates)
    
    if found_keys:
        print(f"\nüéâ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω–æ {len(found_keys)} —Ä–∞–±–æ—á–∏—Ö –∫–ª—é—á–µ–π:")
        for key in found_keys:
            print(f"  - '{key}' (–¥–ª–∏–Ω–∞: {len(key)})")
        
        # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        main_key = found_keys[0]
        create_final_generator(main_key)
    else:
        print(f"\nüòû –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ {len(all_candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å Frida")
        print("   2. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã")
        print("   3. –ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Å–µ—Ç–µ–≤–æ–π —Ç—Ä–∞—Ñ–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

def create_final_generator(secret_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    generator_code = f'''#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† - –ö–õ–Æ–ß –ù–ê–ô–î–ï–ù –ß–ï–†–ï–ó –ì–õ–£–ë–û–ö–ò–ô –ê–ù–ê–õ–ò–ó
"""
import jwt
from datetime import datetime

SECRET_KEY = "{secret_key}"

def generate_unlock_token(vehicle_id):
    payload = {{
        "vehicle_id": vehicle_id,
        "iss": "CunBA",
        "timestamp": int(datetime.now().timestamp())
    }}
    return jwt.encode(payload, SECRET_KEY, algorithm='HS256')

if __name__ == "__main__":
    import sys
    vehicle_id = sys.argv[1] if len(sys.argv) > 1 else input("Vehicle ID: ")
    token = generate_unlock_token(vehicle_id)
    print("="*80)
    print(token)
    print("="*80)
'''
    
    with open("D:/vzlom/deep_analysis_generator.py", "w", encoding="utf-8") as f:
        f.write(generator_code)
    
    print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω deep_analysis_generator.py —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º!")

if __name__ == "__main__":
    main()
