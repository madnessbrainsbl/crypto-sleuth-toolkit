#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –¥–ª—è unlock —Å–∏—Å—Ç–µ–º—ã
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É JWT
"""

import jwt
from datetime import datetime

# –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –¢–æ—á–Ω—ã–π SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º
# –ù–æ –º—ã –∑–Ω–∞–µ–º —Ä–∞–±–æ—á—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–æ–∫–µ–Ω–∞

WORKING_TOKEN_EXAMPLE = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"

def get_unlock_instructions():
    """–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é unlock"""
    print("üîê –§–ò–ù–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –î–õ–Ø UNLOCK –°–ò–°–¢–ï–ú–´")
    print("="*60)
    print()
    print("üìã –ß–¢–û –í–´–Ø–°–ù–ï–ù–û:")
    print("‚úÖ Unlock —Ä–∞–±–æ—Ç–∞–µ—Ç –û–§–õ–ê–ô–ù (–±–µ–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞)")
    print("‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç vehicle_id —á–µ—Ä–µ–∑ getprop")
    print("‚úÖ –ß–∏—Ç–∞–µ—Ç JWT –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π")
    print("‚úÖ –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ vehicle_id –≤ JWT")
    print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ JWT: vehicle_id, iss='CunBA', timestamp")
    print()
    print("üîë –†–ê–ë–û–ß–ò–ô –¢–û–ö–ï–ù (–¥–ª—è vehicle_id: 0d79ff047f5cec5bf2ec2ec7d3e464ce):")
    print(WORKING_TOKEN_EXAMPLE)
    print()
    print("üöÄ –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:")
    print("1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É:")
    print("   adb shell")
    print("   su")
    print()
    print("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ JWT —Ç–æ–∫–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é:")
    print("   setprop persist.cunba 'JWT_TOKEN_HERE'")
    print("   # –∏–ª–∏")
    print("   setprop persist.jwt 'JWT_TOKEN_HERE'")
    print("   # –∏–ª–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    print()
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ unlock:")
    print("   cd /data/local/tmp")
    print("   ./unlock")
    print()
    print("üí° –ï–°–õ–ò –ù–£–ñ–ï–ù –ù–û–í–´–ô –¢–û–ö–ï–ù:")
    print("- –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∏—Å—Ç–æ—á–Ω–∏–∫—É —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞")
    print("- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å Frida")
    print("- –¢–æ–∫–µ–Ω –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    print()
    print("‚ö†Ô∏è  –í–ê–ñ–ù–û:")
    print("- SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º")
    print("- –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω")
    print("- –î–ª—è –Ω–æ–≤—ã—Ö vehicle_id –Ω—É–∂–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á")

def decode_working_token():
    """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    print("\nüìä –ê–ù–ê–õ–ò–ó –†–ê–ë–û–ß–ï–ì–û –¢–û–ö–ï–ù–ê:")
    print("-"*40)
    
    decoded = jwt.decode(WORKING_TOKEN_EXAMPLE, options={"verify_signature": False})
    header = jwt.get_unverified_header(WORKING_TOKEN_EXAMPLE)
    
    print(f"Header: {header}")
    print(f"Payload: {decoded}")
    
    if 'timestamp' in decoded:
        ts = decoded['timestamp']
        dt = datetime.fromtimestamp(ts)
        print(f"–°–æ–∑–¥–∞–Ω: {dt.strftime('%Y-%m-%d %H:%M:%S')}")

def verify_token_structure(vehicle_id, token):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–æ–∫–µ–Ω–∞"""
    try:
        decoded = jwt.decode(token, options={"verify_signature": False})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
        required_fields = ['vehicle_id', 'iss', 'timestamp']
        for field in required_fields:
            if field not in decoded:
                return False, f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
        if decoded['iss'] != 'CunBA':
            return False, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π iss: {decoded['iss']}"
        
        if decoded['vehicle_id'] != vehicle_id:
            return False, f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π vehicle_id: {decoded['vehicle_id']}"
        
        return True, "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–æ–∫–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞"
        
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    get_unlock_instructions()
    decode_working_token()
    
    print(f"\nüéØ –ü–†–û–í–ï–†–ö–ê –¢–û–ö–ï–ù–ê:")
    print("-"*30)
    vehicle_id = "0d79ff047f5cec5bf2ec2ec7d3e464ce"
    is_valid, message = verify_token_structure(vehicle_id, WORKING_TOKEN_EXAMPLE)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {'‚úÖ' if is_valid else '‚ùå'} {message}")
    
    print(f"\nüíæ –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ê–ë–û–ß–ï–ì–û –¢–û–ö–ï–ù–ê:")
    print("-"*35)
    with open("working_token.txt", "w") as f:
        f.write(WORKING_TOKEN_EXAMPLE)
    print("‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ working_token.txt")

if __name__ == "__main__":
    main()
