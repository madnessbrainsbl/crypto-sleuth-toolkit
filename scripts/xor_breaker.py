#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π XOR –¥–µ–æ–±—Ñ—É—Å–∫–∞—Ç–æ—Ä –¥–ª—è unlock –±–∏–Ω–∞—Ä–Ω–∏–∫–∞
–ü–æ–∏—Å–∫ —Å–∫—Ä—ã—Ç—ã—Ö —Å—Ç—Ä–æ–∫ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏ XOR —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
"""

import re
import sys
import binascii
from pathlib import Path
from collections import defaultdict

class XORBreaker:
    def __init__(self, binary_path):
        self.binary_path = Path(binary_path)
        self.binary_data = None
        
    def load_binary(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.binary_path, 'rb') as f:
                self.binary_data = f.read()
            print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {self.binary_path.name} ({len(self.binary_data)} –±–∞–π—Ç)")
            return True
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def single_byte_xor_bruteforce(self):
        """–ë—Ä—É—Ç—Ñ–æ—Ä—Å –æ–¥–Ω–æ–≥–æ –±–∞–π—Ç–∞ XOR –¥–ª—è –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞"""
        print("üîì –ë—Ä—É—Ç—Ñ–æ—Ä—Å –æ–¥–Ω–æ–≥–æ –±–∞–π—Ç–∞ XOR...")
        
        target_strings = [
            b'CunBA', b'HS256', b'SECRET_KEY', b'vehicle_id', 
            b'jwt', b'token', b'hmac', b'authorization',
            b'timestamp', b'issuer', b'iss'
        ]
        
        found_results = []
        
        for xor_key in range(1, 256):
            # XOR –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞ —Å —ç—Ç–∏–º –∫–ª—é—á–æ–º
            xored_data = bytes([b ^ xor_key for b in self.binary_data])
            
            # –ò—â–µ–º —Ü–µ–ª–µ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            for target in target_strings:
                pos = 0
                while True:
                    pos = xored_data.find(target, pos)
                    if pos == -1:
                        break
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                    start = max(0, pos - 32)
                    end = min(len(xored_data), pos + len(target) + 32)
                    context = xored_data[start:end]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —á–∏—Ç–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã
                    readable_count = sum(1 for b in context if 32 <= b <= 126)
                    if readable_count > len(context) * 0.5:  # –ë–æ–ª—å—à–µ 50% —á–∏—Ç–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                        found_results.append({
                            'target': target.decode(),
                            'xor_key': xor_key,
                            'offset': pos,
                            'context': context.decode('ascii', errors='ignore'),
                            'hex_context': binascii.hexlify(context).decode()
                        })
                    
                    pos += 1
        
        return found_results
    
    def multi_byte_xor_patterns(self):
        """–ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –º–Ω–æ–≥–æ–±–∞–π—Ç–æ–≤–æ–≥–æ XOR"""
        print("üîì –ü–æ–∏—Å–∫ –º–Ω–æ–≥–æ–±–∞–π—Ç–æ–≤—ã—Ö XOR –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
        
        found_patterns = []
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–ª–∏–Ω—ã XOR –∫–ª—é—á–µ–π (2-8 –±–∞–π—Ç)
        for key_length in range(2, 9):
            print(f"  –ü—Ä–æ–≤–µ—Ä—è–µ–º XOR –∫–ª—é—á–∏ –¥–ª–∏–Ω–æ–π {key_length} –±–∞–π—Ç...")
            
            # –ë–µ—Ä–µ–º –∫–∞–∂–¥—ã–π key_length-–π –±–∞–π—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç—ã
            for start_offset in range(key_length):
                byte_positions = []
                for i in range(start_offset, len(self.binary_data), key_length):
                    if i < len(self.binary_data):
                        byte_positions.append(self.binary_data[i])
                
                if len(byte_positions) < 100:  # –°–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö
                    continue
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á–∞—Å—Ç–æ—Ç—ã –±–∞–π—Ç–æ–≤
                byte_freqs = defaultdict(int)
                for b in byte_positions:
                    byte_freqs[b] += 1
                
                # –ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–π –±–∞–π—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º XOR —Å –ø—Ä–æ–±–µ–ª–æ–º (0x20)
                most_frequent = max(byte_freqs.items(), key=lambda x: x[1])
                potential_xor_key = most_frequent[0] ^ 0x20  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º XOR —Å –ø—Ä–æ–±–µ–ª–æ–º
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–∞–µ—Ç –ª–∏ —ç—Ç–æ—Ç –∫–ª—é—á –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                test_data = bytes([byte_positions[i] ^ potential_xor_key for i in range(min(100, len(byte_positions)))])
                readable_count = sum(1 for b in test_data if 32 <= b <= 126)
                
                if readable_count > len(test_data) * 0.7:  # 70% —á–∏—Ç–∞–µ–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
                    found_patterns.append({
                        'key_length': key_length,
                        'position': start_offset,
                        'xor_byte': potential_xor_key,
                        'confidence': readable_count / len(test_data),
                        'sample': test_data.decode('ascii', errors='ignore')[:50]
                    })
        
        return found_patterns
    
    def rolling_xor_analysis(self):
        """–ê–Ω–∞–ª–∏–∑ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ XOR (–∫–∞–∂–¥—ã–π –±–∞–π—Ç XOR–∏—Ç—Å—è —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∏–ª–∏ —Å –ø–æ–∑–∏—Ü–∏–µ–π)"""
        print("üîì –ê–Ω–∞–ª–∏–∑ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ XOR...")
        
        results = []
        chunk_size = 64
        
        for i in range(0, len(self.binary_data) - chunk_size, chunk_size//4):
            chunk = self.binary_data[i:i+chunk_size]
            
            # –ú–µ—Ç–æ–¥ 1: XOR —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –±–∞–π—Ç–æ–º
            decoded1 = bytearray()
            prev = 0
            for b in chunk:
                decoded1.append(b ^ prev)
                prev = b
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–µ–ª–µ–≤—ã—Ö —Å—Ç—Ä–æ–∫
            decoded1_str = bytes(decoded1).decode('ascii', errors='ignore')
            if any(target in decoded1_str.lower() for target in ['cunba', 'hs256', 'secret', 'jwt']):
                results.append({
                    'method': 'XOR_with_previous',
                    'offset': hex(i),
                    'decoded': decoded1_str[:50],
                    'hex': binascii.hexlify(bytes(decoded1[:32])).decode()
                })
            
            # –ú–µ—Ç–æ–¥ 2: XOR —Å –ø–æ–∑–∏—Ü–∏–µ–π
            decoded2 = bytearray()
            for j, b in enumerate(chunk):
                decoded2.append(b ^ (j & 0xFF))
            
            decoded2_str = bytes(decoded2).decode('ascii', errors='ignore')
            if any(target in decoded2_str.lower() for target in ['cunba', 'hs256', 'secret', 'jwt']):
                results.append({
                    'method': 'XOR_with_position',
                    'offset': hex(i),
                    'decoded': decoded2_str[:50],
                    'hex': binascii.hexlify(bytes(decoded2[:32])).decode()
                })
        
        return results
    
    def xor_with_known_plaintexts(self):
        """XOR –∞–Ω–∞–ª–∏–∑ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏"""
        print("üîì XOR –∞–Ω–∞–ª–∏–∑ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏...")
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –≤ –±–∏–Ω–∞—Ä–Ω–∏–∫–µ
        known_plaintexts = [
            b'{"vehicle_id"',
            b'"iss":"CunBA"',
            b'"alg":"HS256"',
            b'HTTP/1.1',
            b'application/json',
            b'Authorization: Bearer',
            b'Content-Type:',
            b'webadb.miaosoft.cn'
        ]
        
        found_keys = []
        
        for plaintext in known_plaintexts:
            for i in range(len(self.binary_data) - len(plaintext)):
                cipher_chunk = self.binary_data[i:i+len(plaintext)]
                
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π XOR –∫–ª—é—á
                xor_key = bytes([c ^ p for c, p in zip(cipher_chunk, plaintext)])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–ª—é—á –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
                key_patterns = []
                for key_len in [1, 2, 4, 8, 16]:
                    if len(xor_key) >= key_len:
                        pattern = xor_key[:key_len]
                        if all(xor_key[j] == pattern[j % key_len] for j in range(len(xor_key))):
                            key_patterns.append({
                                'pattern': pattern,
                                'length': key_len
                            })
                
                if key_patterns:
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª—é—á –Ω–∞ –±–æ–ª—å—à–µ–º —É—á–∞—Å—Ç–∫–µ
                    test_start = max(0, i - 64)
                    test_end = min(len(self.binary_data), i + len(plaintext) + 64)
                    test_chunk = self.binary_data[test_start:test_end]
                    
                    for pattern_info in key_patterns:
                        pattern = pattern_info['pattern']
                        decoded_test = bytes([b ^ pattern[j % len(pattern)] for j, b in enumerate(test_chunk)])
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
                        readable_count = sum(1 for b in decoded_test if 32 <= b <= 126 or b in [9, 10, 13])
                        if readable_count > len(decoded_test) * 0.6:
                            found_keys.append({
                                'plaintext': plaintext.decode('ascii', errors='ignore'),
                                'offset': hex(i),
                                'xor_key': binascii.hexlify(pattern).decode(),
                                'key_length': len(pattern),
                                'quality': readable_count / len(decoded_test),
                                'decoded_sample': decoded_test.decode('ascii', errors='ignore')[:100]
                            })
        
        return found_keys
    
    def run_xor_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ XOR –∞–Ω–∞–ª–∏–∑–∞"""
        print("üîì –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ XOR –∞–Ω–∞–ª–∏–∑–∞ unlock –±–∏–Ω–∞—Ä–Ω–∏–∫–∞...")
        print("=" * 60)
        
        if not self.load_binary():
            return
        
        # 1. –ë—Ä—É—Ç—Ñ–æ—Ä—Å –æ–¥–Ω–æ–≥–æ –±–∞–π—Ç–∞
        print("\nüîë 1. –û–¥–∏–Ω–æ—á–Ω—ã–π –±–∞–π—Ç XOR –±—Ä—É—Ç—Ñ–æ—Ä—Å:")
        single_results = self.single_byte_xor_bruteforce()
        if single_results:
            for result in single_results[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   üéØ –ù–∞–π–¥–µ–Ω–æ '{result['target']}' —Å XOR –∫–ª—é—á–æ–º 0x{result['xor_key']:02x}")
                print(f"      –°–º–µ—â–µ–Ω–∏–µ: {result['offset']}")
                print(f"      –ö–æ–Ω—Ç–µ–∫—Å—Ç: {result['context'][:60]}...")
                print()
        else:
            print("   –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # 2. –ú–Ω–æ–≥–æ–±–∞–π—Ç–æ–≤—ã–π XOR
        print("\nüîë 2. –ú–Ω–æ–≥–æ–±–∞–π—Ç–æ–≤—ã–π XOR –∞–Ω–∞–ª–∏–∑:")
        multi_results = self.multi_byte_xor_patterns()
        if multi_results:
            for result in multi_results[:5]:
                print(f"   üéØ –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª–∏–Ω–æ–π {result['key_length']}, –ø–æ–∑–∏—Ü–∏—è {result['position']}")
                print(f"      XOR –±–∞–π—Ç: 0x{result['xor_byte']:02x}")
                print(f"      –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2%}")
                print(f"      –û–±—Ä–∞–∑–µ—Ü: {result['sample']}")
                print()
        else:
            print("   –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # 3. –°–∫–æ–ª—å–∑—è—â–∏–π XOR
        print("\nüîë 3. –°–∫–æ–ª—å–∑—è—â–∏–π XOR –∞–Ω–∞–ª–∏–∑:")
        rolling_results = self.rolling_xor_analysis()
        if rolling_results:
            for result in rolling_results[:5]:
                print(f"   üéØ –ú–µ—Ç–æ–¥: {result['method']}")
                print(f"      –°–º–µ—â–µ–Ω–∏–µ: {result['offset']}")
                print(f"      –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {result['decoded']}")
                print()
        else:
            print("   –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        # 4. XOR —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏
        print("\nüîë 4. XOR –∞–Ω–∞–ª–∏–∑ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ç–µ–∫—Å—Ç–∞–º–∏:")
        known_results = self.xor_with_known_plaintexts()
        if known_results:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏
            known_results.sort(key=lambda x: x['quality'], reverse=True)
            
            for result in known_results[:5]:
                print(f"   üéØ –û—Ç–∫—Ä—ã—Ç—ã–π —Ç–µ–∫—Å—Ç: '{result['plaintext']}'")
                print(f"      XOR –∫–ª—é—á: {result['xor_key']} (–¥–ª–∏–Ω–∞: {result['key_length']})")
                print(f"      –°–º–µ—â–µ–Ω–∏–µ: {result['offset']}")
                print(f"      –ö–∞—á–µ—Å—Ç–≤–æ: {result['quality']:.2%}")
                print(f"      –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–æ: {result['decoded_sample'][:80]}...")
                print()
        else:
            print("   –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        
        print("‚úÖ XOR –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        
        # –í—ã–≤–æ–¥–∏–º –ª—É—á—à–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
        all_results = []
        all_results.extend(single_results)
        all_results.extend(known_results)
        
        if all_results:
            print(f"\nüíé –ù–∞–π–¥–µ–Ω–æ {len(all_results)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö XOR –∫–ª—é—á–µ–π!")
            print("üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏ —Å JWT –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º")

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python xor_breaker.py <–ø—É—Ç—å_–∫_unlock_—Ñ–∞–π–ª—É>")
        return
    
    breaker = XORBreaker(sys.argv[1])
    breaker.run_xor_analysis()

if __name__ == "__main__":
    main()
