#!/usr/bin/env python3
"""
–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –ø–æ–∏—Å–∫ SECRET_KEY –¥–ª—è JWT —Ç–æ–∫–µ–Ω–∞
–ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
"""

import jwt
import hashlib
import binascii
import base64
import itertools
import string
from pathlib import Path

# –†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω –∏ –µ–≥–æ payload
WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"
WORKING_PAYLOAD = {
    "vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce",
    "iss": "CunBA",
    "timestamp": 1753096202
}

def test_key(key):
    """–¢–µ—Å—Ç –∫–ª—é—á–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –∫–ª—é—á –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π"""
    try:
        test_token = jwt.encode(WORKING_PAYLOAD, key, algorithm='HS256')
        return test_token == WORKING_TOKEN
    except:
        return False

def method1_common_keys():
    """–ú–µ—Ç–æ–¥ 1: –û–±—â–∏–µ –∫–ª—é—á–∏ –∏ –∏—Ö –≤–∞—Ä–∏–∞—Ü–∏–∏"""
    print("üîç –ú–µ—Ç–æ–¥ 1: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–∏—Ö –∫–ª—é—á–µ–π...")
    
    base_words = ["CunBA", "unlock", "secret", "key", "jwt", "mega", "android", "qualcomm", "8155"]
    variations = []
    
    # –ü—Ä–æ—Å—Ç—ã–µ –∫–ª—é—á–∏
    for word in base_words:
        variations.extend([
            word, word.upper(), word.lower(),
            word + "123", word + "_key", word + "_secret",
            "key_" + word, "secret_" + word
        ])
    
    # –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏
    combinations = [
        "CunBA_unlock", "unlock_CunBA", "mega_unlock", "CunBA_mega",
        "com.cunba.mega.unlock", "cunba.mega.unlock", "mega.unlock",
        "android_unlock", "qualcomm_unlock"
    ]
    variations.extend(combinations)
    
    # –•—ç—à–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Å–ª–æ–≤
    for word in ["CunBA", "unlock", "mega"]:
        variations.extend([
            hashlib.md5(word.encode()).hexdigest(),
            hashlib.sha1(word.encode()).hexdigest(),
            hashlib.sha256(word.encode()).hexdigest()[:32],
            hashlib.sha256(word.encode()).hexdigest()
        ])
    
    for key in variations:
        if test_key(key):
            print(f"‚úÖ –ù–ê–ô–î–ï–ù! –ú–µ—Ç–æ–¥ 1: '{key}'")
            return key
    
    print("‚ùå –ú–µ—Ç–æ–¥ 1: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return None

def method2_extract_from_binary():
    """–ú–µ—Ç–æ–¥ 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –ø–æ–∏—Å–∫–æ–º"""
    print("üîç –ú–µ—Ç–æ–¥ 2: –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–∑ unlock –±–∏–Ω–∞—Ä–Ω–∏–∫–∞...")
    
    try:
        with open("unlock", "rb") as f:
            binary_data = f.read()
    except:
        print("‚ùå –§–∞–π–ª unlock –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    candidates = set()
    
    # –ü–æ–∏—Å–∫ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª–∏–Ω–æ–π –æ—Ç 8 –¥–æ 64 —Å–∏–º–≤–æ–ª–æ–≤
    for i in range(len(binary_data) - 64):
        for length in range(8, 65):
            if i + length > len(binary_data):
                continue
                
            chunk = binary_data[i:i+length]
            
            # –¢–æ–ª—å–∫–æ ASCII —Å–∏–º–≤–æ–ª—ã
            try:
                candidate = chunk.decode('ascii')
                if all(32 <= ord(c) <= 126 for c in candidate):
                    candidates.add(candidate)
            except:
                continue
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏–∑ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞")
    
    for candidate in list(candidates)[:1000]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 1000
        if test_key(candidate):
            print(f"‚úÖ –ù–ê–ô–î–ï–ù! –ú–µ—Ç–æ–¥ 2: '{candidate}'")
            return candidate
    
    print("‚ùå –ú–µ—Ç–æ–¥ 2: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return None

def method3_base64_decode():
    """–ú–µ—Ç–æ–¥ 3: Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫"""
    print("üîç –ú–µ—Ç–æ–¥ 3: Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    # –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞
    base64_candidates = [
        "sssss3issssssmossssssmssssss/dssssssisssss",
        "sssss3lssssssmossssssRssssss/dsssss3",
        "sssss3issssshssssssbsssssscsssss3ksssss=",
        "c3Nzc3Mzaml0c3Nzc3Ntb3Nzc3Nzc21zc3Nzcy9kc3Nzc3Nzc2lzc3Nzc3M="
    ]
    
    for b64_str in base64_candidates:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ base64
        try:
            decoded = base64.b64decode(b64_str).decode('ascii', errors='ignore')
            if test_key(decoded):
                print(f"‚úÖ –ù–ê–ô–î–ï–ù! –ú–µ—Ç–æ–¥ 3 (base64): '{decoded}'")
                return decoded
        except:
            pass
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ hex
        try:
            if len(b64_str) % 2 == 0:
                decoded = binascii.unhexlify(b64_str).decode('ascii', errors='ignore')
                if test_key(decoded):
                    print(f"‚úÖ –ù–ê–ô–î–ï–ù! –ú–µ—Ç–æ–¥ 3 (hex): '{decoded}'")
                    return decoded
        except:
            pass
    
    print("‚ùå –ú–µ—Ç–æ–¥ 3: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return None

def method4_xor_decode():
    """–ú–µ—Ç–æ–¥ 4: XOR –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    print("üîç –ú–µ—Ç–æ–¥ 4: XOR –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
    
    base_strings = [
        "sssss3issssssmossssssmssssss/dssssssisssss",
        "sssss3lssssssmossssssRssssss/dsssss3"
    ]
    
    for base_str in base_strings:
        # –ü–æ–ø—Ä–æ–±—É–µ–º XOR —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
        for xor_key in range(1, 256):
            try:
                decoded = ''.join(chr(ord(c) ^ xor_key) for c in base_str)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —á–∏—Ç–∞–µ–º—ã–π
                if all(32 <= ord(c) <= 126 for c in decoded):
                    if test_key(decoded):
                        print(f"‚úÖ –ù–ê–ô–î–ï–ù! –ú–µ—Ç–æ–¥ 4 (XOR 0x{xor_key:02x}): '{decoded}'")
                        return decoded
            except:
                continue
    
    print("‚ùå –ú–µ—Ç–æ–¥ 4: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return None

def method5_bruteforce_short():
    """–ú–µ—Ç–æ–¥ 5: –ë—Ä—É—Ç—Ñ–æ—Ä—Å –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–ª—é—á–µ–π"""
    print("üîç –ú–µ—Ç–æ–¥ 5: –ë—Ä—É—Ç—Ñ–æ—Ä—Å –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–ª—é—á–µ–π...")
    
    charset = string.ascii_letters + string.digits + "._-"
    
    # –ë—Ä—É—Ç—Ñ–æ—Ä—Å –æ—Ç 1 –¥–æ 12 —Å–∏–º–≤–æ–ª–æ–≤
    for length in range(1, 13):
        print(f"  –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª–∏–Ω—É {length}...")
        count = 0
        
        for key_tuple in itertools.product(charset, repeat=length):
            key = ''.join(key_tuple)
            count += 1
            
            if test_key(key):
                print(f"‚úÖ –ù–ê–ô–î–ï–ù! –ú–µ—Ç–æ–¥ 5 (–±—Ä—É—Ç—Ñ–æ—Ä—Å): '{key}'")
                return key
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            if count > 50000:
                break
    
    print("‚ùå –ú–µ—Ç–æ–¥ 5: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return None

def method6_timestamp_based():
    """–ú–µ—Ç–æ–¥ 6: –ö–ª—é—á–∏ –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–µ"""
    print("üîç –ú–µ—Ç–æ–¥ 6: –ö–ª—é—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ timestamp...")
    
    timestamp = 1753096202
    timestamp_variations = [
        str(timestamp),
        str(timestamp)[-6:],  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Ü–∏—Ñ—Ä
        str(timestamp)[:6],   # –ü–µ—Ä–≤—ã–µ 6 —Ü–∏—Ñ—Ä
        hex(timestamp)[2:],   # –í hex
        f"CunBA_{timestamp}",
        f"unlock_{timestamp}",
        f"key_{timestamp}",
        hashlib.md5(str(timestamp).encode()).hexdigest()[:16]
    ]
    
    for key in timestamp_variations:
        if test_key(key):
            print(f"‚úÖ –ù–ê–ô–î–ï–ù! –ú–µ—Ç–æ–¥ 6: '{key}'")
            return key
    
    print("‚ùå –ú–µ—Ç–æ–¥ 6: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞"""
    print("üîê –ü–†–û–î–í–ò–ù–£–¢–´–ô –ü–û–ò–°–ö SECRET_KEY")
    print("="*60)
    print(f"–¶–µ–ª–µ–≤–æ–π —Ç–æ–∫–µ–Ω: {WORKING_TOKEN[:50]}...")
    print(f"Payload: {WORKING_PAYLOAD}")
    print()
    
    methods = [
        method1_common_keys,
        method2_extract_from_binary, 
        method3_base64_decode,
        method4_xor_decode,
        method6_timestamp_based,
        method5_bruteforce_short  # –ü–æ—Å–ª–µ–¥–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ —Å–∞–º—ã–π –¥–æ–ª–≥–∏–π
    ]
    
    for i, method in enumerate(methods, 1):
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –º–µ—Ç–æ–¥ {i}/{len(methods)}:")
        result = method()
        
        if result:
            print(f"\nüéâ SUCCESS! –ù–ê–ô–î–ï–ù –ü–†–ê–í–ò–õ–¨–ù–´–ô SECRET_KEY!")
            print(f"–ö–ª—é—á: '{result}'")
            print(f"–î–ª–∏–Ω–∞: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑
            test_token = jwt.encode(WORKING_PAYLOAD, result, algorithm='HS256')
            print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞: {'‚úÖ –°–û–í–ü–ê–î–ê–ï–¢' if test_token == WORKING_TOKEN else '‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢'}")
            
            return result
    
    print("\nüòû SECRET_KEY –ù–ï –ù–ê–ô–î–ï–ù –≤—Å–µ–º–∏ –º–µ—Ç–æ–¥–∞–º–∏")
    print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
    print("   - –ö–ª—é—á —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–π")
    print("   - –ö–ª—é—á –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏")
    print("   - –ö–ª—é—á –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º —Ñ–∞–π–ª–µ/—Å–µ—Ä–≤–µ—Ä–µ")

if __name__ == "__main__":
    main()
