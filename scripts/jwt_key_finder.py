#!/usr/bin/env python3
"""
JWT Secret Key Finder
–ò—â–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è JWT —Ç–æ–∫–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã
"""

import jwt
import hashlib
import hmac
import base64
import itertools
from datetime import datetime

# –†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω
WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"

# –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
VEHICLE_ID = "0d79ff047f5cec5bf2ec2ec7d3e464ce"
ISS = "CunBA"
TIMESTAMP = 1753096202

def verify_key(key_candidate):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–¥—Ö–æ–¥–∏—Ç –ª–∏ –∫–ª—é—á"""
    try:
        decoded = jwt.decode(WORKING_TOKEN, key_candidate, algorithms=["HS256"])
        print(f"\n‚úÖ –ù–ê–ô–î–ï–ù –ö–õ–Æ–ß: {key_candidate}")
        print(f"Decoded: {decoded}")
        return True
    except:
        return False

def generate_system_based_keys():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    keys = []
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    base_values = [
        "unlock", "cunba", "CunBA", "mega", "platform", "A11",
        VEHICLE_ID, ISS, str(TIMESTAMP),
        "huron", "shell", "qnx", "QNX"
    ]
    
    # –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å ID
    for base in base_values:
        keys.append(base)
        keys.append(base + VEHICLE_ID)
        keys.append(VEHICLE_ID + base)
        keys.append(base + "_" + VEHICLE_ID)
        keys.append(VEHICLE_ID + "_" + base)
    
    # –•–µ—à–∏ –æ—Ç –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    for key in list(keys):
        keys.append(hashlib.md5(key.encode()).hexdigest())
        keys.append(hashlib.sha1(key.encode()).hexdigest())
        keys.append(hashlib.sha256(key.encode()).hexdigest())
        
    return keys

def generate_binary_based_keys():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞"""
    keys = []
    
    # –ê–¥—Ä–µ—Å–∞ —Ñ—É–Ω–∫—Ü–∏–π –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏
    addresses = [
        "0010d54c", "0010d5c4", "00109ac4", "0010d8e4",
        "00109d04", "0010bd84", "00108448", "001095d0"
    ]
    
    for addr in addresses:
        keys.append(addr)
        keys.append("0x" + addr)
        keys.append(addr.upper())
        keys.append("FUN_" + addr)
    
    # –ú–∞–≥–∏—á–µ—Å–∫–∏–µ —á–∏—Å–ª–∞ –∏–∑ –∫–æ–¥–∞
    magic_numbers = [
        "0x40", "0x41", "0x3f", "0xff", "0x100",
        "0xffffffffffffff88", "0xffffffffffffffec"
    ]
    
    keys.extend(magic_numbers)
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ DAT_
    dat_values = ["002791f4", "002791f8", "002791ec", "002791f0"]
    keys.extend(dat_values)
    
    return keys

def generate_time_based_keys():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫"""
    keys = []
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã timestamp
    ts = TIMESTAMP
    keys.extend([
        str(ts),
        hex(ts),
        hex(ts)[2:],  # –±–µ–∑ 0x
        str(ts)[:8],  # –ø–µ—Ä–≤—ã–µ 8 —Ü–∏—Ñ—Ä
        str(ts)[-8:], # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Ü–∏—Ñ—Ä
    ])
    
    # –î–∞—Ç—ã –æ–∫–æ–ª–æ timestamp
    dt = datetime.fromtimestamp(ts)
    keys.extend([
        dt.strftime("%Y%m%d"),
        dt.strftime("%Y-%m-%d"),
        dt.strftime("%d%m%Y"),
        str(dt.year),
        f"{dt.year}{dt.month:02d}",
    ])
    
    return keys

def generate_pattern_based_keys():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    keys = []
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã —Å vehicle_id
    vid = VEHICLE_ID
    keys.extend([
        vid[:8],    # –ø–µ—Ä–≤—ã–µ 8 —Å–∏–º–≤–æ–ª–æ–≤
        vid[-8:],   # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 —Å–∏–º–≤–æ–ª–æ–≤
        vid[::2],   # –∫–∞–∂–¥—ã–π –≤—Ç–æ—Ä–æ–π —Å–∏–º–≤–æ–ª
        vid[::-1],  # —Ä–µ–≤–µ—Ä—Å
    ])
    
    # –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ —á–∞—Å—Ç–µ–π
    parts = [vid[i:i+8] for i in range(0, len(vid), 8)]
    for p1, p2 in itertools.combinations(parts, 2):
        keys.append(p1 + p2)
        keys.append(p2 + p1)
    
    return keys

def brute_force_simple_keys():
    """–ü–µ—Ä–µ–±–æ—Ä –ø—Ä–æ—Å—Ç—ã—Ö –∫–ª—é—á–µ–π"""
    keys = []
    
    # –ö–æ—Ä–æ—Ç–∫–∏–µ –∫–ª—é—á–∏ (—á–∏—Å–ª–∞)
    for i in range(10000):
        keys.append(str(i))
        keys.append(f"{i:04d}")
    
    # –ü—Ä–æ—Å—Ç—ã–µ —Å–ª–æ–≤–∞
    simple_words = [
        "key", "secret", "password", "pass", "admin", "root",
        "mega", "unlock", "device", "token", "jwt", "hmac"
    ]
    
    for word in simple_words:
        keys.append(word)
        keys.append(word.upper())
        keys.append(word.capitalize())
        
    return keys

def main():
    print("üîç –ü–æ–∏—Å–∫ JWT —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞...")
    print(f"–¢–æ–∫–µ–Ω: {WORKING_TOKEN}")
    
    all_keys = set()
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏
    print("\nüìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
    
    generators = [
        ("–°–∏—Å—Ç–µ–º–Ω—ã–µ", generate_system_based_keys),
        ("–ë–∏–Ω–∞—Ä–Ω—ã–µ", generate_binary_based_keys),
        ("–í—Ä–µ–º–µ–Ω–Ω—ã–µ", generate_time_based_keys),
        ("–ü–∞—Ç—Ç–µ—Ä–Ω—ã", generate_pattern_based_keys),
        ("–ü—Ä–æ—Å—Ç—ã–µ", brute_force_simple_keys),
    ]
    
    for name, generator in generators:
        keys = generator()
        print(f"  {name}: {len(keys)} –∫–ª—é—á–µ–π")
        all_keys.update(keys)
    
    print(f"\nüìä –í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(all_keys)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª—é—á–∏
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π...")
    checked = 0
    for key in all_keys:
        if verify_key(key):
            print(f"\nüéâ –£–°–ü–ï–•! –ö–ª—é—á –Ω–∞–π–¥–µ–Ω: '{key}'")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ–º –ª–∏ –º—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω
            print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞...")
            new_payload = {
                "vehicle_id": VEHICLE_ID,
                "iss": ISS,
                "timestamp": int(datetime.now().timestamp())
            }
            new_token = jwt.encode(new_payload, key, algorithm="HS256")
            print(f"–ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω: {new_token}")
            return
        
        checked += 1
        if checked % 1000 == 0:
            print(f"  –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {checked}/{len(all_keys)}")
    
    print("\n‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ {len(all_keys)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
    print("1. –ö–ª—é—á –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–π –∏–ª–∏ –¥–ª–∏–Ω–Ω—ã–π")
    print("2. –ö–ª—é—á –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏")
    print("3. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è JWT")
    print("4. –ö–ª—é—á –∑–∞—à–∏—Ç –≤ –¥—Ä—É–≥–æ–π —á–∞—Å—Ç–∏ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞")

if __name__ == "__main__":
    main()
