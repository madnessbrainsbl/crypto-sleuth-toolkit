#!/usr/bin/env python3
"""
–¶–µ–ª–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å SECRET_KEY
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ XOR –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–∞
"""

import re
import sys
import binascii
import hashlib
from pathlib import Path

class SecretKeyExtractor:
    def __init__(self, binary_path):
        self.binary_path = Path(binary_path)
        self.binary_data = None
        self.potential_keys = []
        
    def load_binary(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.binary_path, 'rb') as f:
                self.binary_data = f.read()
            print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {self.binary_path.name} ({len(self.binary_data)} –±–∞–π—Ç)")
            return True
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def extract_around_jwt_patterns(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö JWT –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
        print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–æ–∫—Ä—É–≥ JWT –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
        
        # –ù–∞–π–¥–µ–Ω–Ω—ã–µ XOR –∫–ª—é—á–∏ –¥–ª—è JWT
        jwt_xor_keys = [0x04, 0x63, 0x72]
        
        for xor_key in jwt_xor_keys:
            print(f"\nüîë –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º XOR –∫–ª—é—á 0x{xor_key:02x}:")
            
            # XOR –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞
            xored_data = bytes([b ^ xor_key for b in self.binary_data])
            
            # –ò—â–µ–º 'jwt' –≤ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            pos = 0
            while True:
                pos = xored_data.find(b'jwt', pos)
                if pos == -1:
                    break
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–æ–ª—å—à–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (512 –±–∞–π—Ç –¥–æ –∏ –ø–æ—Å–ª–µ)
                start = max(0, pos - 512)
                end = min(len(xored_data), pos + 512)
                context = xored_data[start:end]
                
                # –ò—â–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                self.find_keys_in_context(context, f"jwt_xor_{xor_key:02x}", pos)
                
                pos += 1
    
    def extract_around_iss_patterns(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö 'iss' –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ (CunBA)"""
        print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–æ–∫—Ä—É–≥ 'iss' –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤...")
        
        # –ù–∞–π–¥–µ–Ω–Ω—ã–µ XOR –∫–ª—é—á–∏ –¥–ª—è iss
        iss_xor_keys = [0x31, 0x73]
        
        for xor_key in iss_xor_keys:
            print(f"\nüîë –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º XOR –∫–ª—é—á 0x{xor_key:02x}:")
            
            # XOR –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞
            xored_data = bytes([b ^ xor_key for b in self.binary_data])
            
            # –ò—â–µ–º 'iss' –∏ 'CunBA' –≤ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            for target in [b'iss', b'CunBA']:
                pos = 0
                while True:
                    pos = xored_data.find(target, pos)
                    if pos == -1:
                        break
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    start = max(0, pos - 512)
                    end = min(len(xored_data), pos + 512)
                    context = xored_data[start:end]
                    
                    self.find_keys_in_context(context, f"{target.decode()}_xor_{xor_key:02x}", pos)
                    
                    pos += 1
    
    def find_keys_in_context(self, context, source, offset):
        """–ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ"""
        context_str = context.decode('ascii', errors='ignore')
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–π
        key_patterns = [
            # –°—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å SECRET_KEY
            r'SECRET_KEY["\']?\s*[:=]\s*["\']?([A-Za-z0-9+/=]{16,})["\']?',
            r'secret["\']?\s*[:=]\s*["\']?([A-Za-z0-9+/=]{16,})["\']?',
            r'key["\']?\s*[:=]\s*["\']?([A-Za-z0-9+/=]{16,})["\']?',
            
            # JWT –ø–æ–¥–ø–∏—Å–∏ –∏ –∫–ª—é—á–∏ (–æ–±—ã—á–Ω–æ base64)
            r'([A-Za-z0-9+/]{32,}={0,2})',
            
            # Hex —Å—Ç—Ä–æ–∫–∏ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏)
            r'([a-fA-F0-9]{32,64})',
            
            # –õ—é–±—ã–µ –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ä—è–¥–æ–º —Å JWT —Ç–µ—Ä–º–∏–Ω–∞–º–∏
            r'(?:jwt|hmac|sign|key|secret).*?([A-Za-z0-9+/=]{20,})',
        ]
        
        for pattern in key_patterns:
            matches = re.finditer(pattern, context_str, re.IGNORECASE)
            for match in matches:
                potential_key = match.group(1) if match.groups() else match.group(0)
                
                if len(potential_key) >= 16:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –∫–ª—é—á–∞
                    self.potential_keys.append({
                        'key': potential_key,
                        'source': source,
                        'offset': offset,
                        'pattern': pattern,
                        'context': context_str[max(0, match.start()-50):match.end()+50]
                    })
    
    def search_hardcoded_strings(self):
        """–ü–æ–∏—Å–∫ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫ –±–µ–∑ XOR"""
        print("üîç –ü–æ–∏—Å–∫ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫...")
        
        # –ò—â–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏ –≤ –æ—Ç–∫—Ä—ã—Ç–æ–º –≤–∏–¥–µ
        raw_str = self.binary_data.decode('ascii', errors='ignore')
        
        key_patterns = [
            r'SECRET_KEY["\']?\s*[:=]\s*["\']?([A-Za-z0-9+/=]{16,64})["\']?',
            r'(?:HMAC|JWT).*?KEY["\']?\s*[:=]\s*["\']?([A-Za-z0-9+/=]{16,64})["\']?',
            r'([a-fA-F0-9]{64})',  # 256-bit hex keys
            r'([A-Za-z0-9+/]{43}=)',  # 32-byte base64 keys
        ]
        
        for pattern in key_patterns:
            matches = re.finditer(pattern, raw_str, re.IGNORECASE)
            for match in matches:
                potential_key = match.group(1) if match.groups() else match.group(0)
                
                self.potential_keys.append({
                    'key': potential_key,
                    'source': 'hardcoded',
                    'offset': match.start(),
                    'pattern': pattern,
                    'context': raw_str[max(0, match.start()-50):match.end()+50]
                })
    
    def search_near_cunba_issuer(self):
        """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ä—è–¥–æ–º —Å 'CunBA' (issuer)"""
        print("üîç –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ä—è–¥–æ–º —Å issuer 'CunBA'...")
        
        # –ò—â–µ–º 'CunBA' —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ XOR –∫–ª—é—á–∞–º–∏
        for xor_key in range(256):
            xored_cunba = bytes([ord(c) ^ xor_key for c in 'CunBA'])
            
            pos = 0
            while True:
                pos = self.binary_data.find(xored_cunba, pos)
                if pos == -1:
                    break
                
                # –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º –æ–±–ª–∞—Å—Ç—å –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
                start = max(0, pos - 256)
                end = min(len(self.binary_data), pos + 256)
                context_encrypted = self.binary_data[start:end]
                context_decrypted = bytes([b ^ xor_key for b in context_encrypted])
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ 'CunBA' –≤ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                if b'CunBA' in context_decrypted:
                    print(f"\nüéØ –ù–∞–π–¥–µ–Ω–æ 'CunBA' —Å XOR –∫–ª—é—á–æ–º 0x{xor_key:02x} –≤ —Å–º–µ—â–µ–Ω–∏–∏ 0x{pos:x}")
                    
                    # –ò—â–µ–º –∫–ª—é—á–∏ –≤ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                    self.find_keys_in_context(context_decrypted, f"cunba_area_xor_{xor_key:02x}", pos)
                    
                    # –í—ã–≤–æ–¥–∏–º —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    readable = context_decrypted.decode('ascii', errors='ignore')
                    print(f"   –ö–æ–Ω—Ç–µ–∫—Å—Ç: {readable[:100]}...")
                
                pos += 1
    
    def generate_key_candidates(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –∫–ª—é—á–µ–π"""
        print("\nüîë –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ SECRET_KEY...")
        
        unique_keys = {}
        
        for key_info in self.potential_keys:
            key = key_info['key']
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ –∫–ª—é—á–∏
            if len(key) < 16 or len(key) > 128:
                continue
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–ª—é—á–∏ —Å –Ω–∏–∑–∫–æ–π —ç–Ω—Ç—Ä–æ–ø–∏–µ–π
            if len(set(key)) < 6:
                continue
            
            if key not in unique_keys:
                unique_keys[key] = []
            unique_keys[key].append(key_info)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —á–∞—Å—Ç–æ—Ç–µ –≤—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç–∏
        sorted_keys = sorted(unique_keys.items(), key=lambda x: len(x[1]), reverse=True)
        
        print(f"\nüíé –ù–∞–π–¥–µ–Ω–æ {len(sorted_keys)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∫–ª—é—á–µ–π:")
        
        for i, (key, sources) in enumerate(sorted_keys[:10]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10
            print(f"\n{i+1}. –ö–ª—é—á: {key}")
            print(f"   –î–ª–∏–Ω–∞: {len(key)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"   –ù–∞–π–¥–µ–Ω –≤ {len(sources)} –º–µ—Å—Ç–∞—Ö")
            print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫–∏: {', '.join(set(s['source'] for s in sources))}")
            
            # –ï—Å–ª–∏ –∫–ª—é—á –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ hex, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
            if re.match(r'^[a-fA-F0-9]+$', key):
                try:
                    hex_bytes = binascii.unhexlify(key)
                    print(f"   –ö–∞–∫ –±–∞–π—Ç—ã: {hex_bytes}")
                    print(f"   –ö–∞–∫ ASCII: {hex_bytes.decode('ascii', errors='ignore')}")
                except:
                    pass
            
            # –ï—Å–ª–∏ –∫–ª—é—á –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ base64, –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
            if re.match(r'^[A-Za-z0-9+/]+=*$', key):
                try:
                    import base64
                    decoded = base64.b64decode(key)
                    print(f"   Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω: {binascii.hexlify(decoded).decode()}")
                except:
                    pass
        
        return sorted_keys
    
    def run_extraction(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è"""
        print("üîë –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ SECRET_KEY –∏–∑ unlock –±–∏–Ω–∞—Ä–Ω–∏–∫–∞...")
        print("=" * 60)
        
        if not self.load_binary():
            return
        
        # 1. –ü–æ–∏—Å–∫ –≤–æ–∫—Ä—É–≥ JWT –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        self.extract_around_jwt_patterns()
        
        # 2. –ü–æ–∏—Å–∫ –≤–æ–∫—Ä—É–≥ iss –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤  
        self.extract_around_iss_patterns()
        
        # 3. –ü–æ–∏—Å–∫ –∑–∞—Ö–∞—Ä–¥–∫–æ–∂–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        self.search_hardcoded_strings()
        
        # 4. –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫ —Ä—è–¥–æ–º —Å CunBA
        self.search_near_cunba_issuer()
        
        # 5. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        candidates = self.generate_key_candidates()
        
        print("\n‚úÖ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        print(f"\nüí° –ù–∞–π–¥–µ–Ω–æ {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è SECRET_KEY")
        print("üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫–∞–∂–¥—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç —Å JWT –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º")
        
        if candidates:
            print(f"\nüöÄ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ø-3 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤:")
            for i, (key, _) in enumerate(candidates[:3]):
                print(f"python jwt_validator.py \"{key}\"")

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python secret_key_extractor.py <–ø—É—Ç—å_–∫_unlock_—Ñ–∞–π–ª—É>")
        return
    
    extractor = SecretKeyExtractor(sys.argv[1])
    extractor.run_extraction()

if __name__ == "__main__":
    main()
