#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–Ω–∏—Ü—ã –º–µ–∂–¥—É —Ä–∞–±–æ—á–∏–º –∏ –Ω–µ—Ä–∞–±–æ—á–∏–º JWT —Ç–æ–∫–µ–Ω–∞–º–∏
–¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ SECRET_KEY
"""

import jwt
import json
import base64
import binascii
import hashlib
import hmac
import itertools
from datetime import datetime

# 100% –†–ê–ë–û–ß–ò–ô –¢–û–ö–ï–ù (—Å—Ä–∞–±–æ—Ç–∞–ª, –º–∞—à–∏–Ω–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å) 
WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"

# –ù–ï –†–ê–ë–û–ß–ò–ô –¢–û–ö–ï–ù (—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, –Ω–µ –ø—Ä–æ—à–µ–ª)
NON_WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5Njc2MSwiZXhwIjoxNzUzMDk3MDYxfQ.StCOSqg0VcOs3UTTOfYsq1JWitZ9bLL9gTepJD8LMuY"

def analyze_token_differences():
    """–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É —Ç–æ–∫–µ–Ω–∞–º–∏"""
    print("üîç –ê–ù–ê–õ–ò–ó –†–ê–ó–õ–ò–ß–ò–ô –ú–ï–ñ–î–£ –¢–û–ö–ï–ù–ê–ú–ò")
    print("="*60)
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –æ–±–∞ —Ç–æ–∫–µ–Ω–∞
    working_payload = jwt.decode(WORKING_TOKEN, options={"verify_signature": False})
    non_working_payload = jwt.decode(NON_WORKING_TOKEN, options={"verify_signature": False})
    
    print("–†–ê–ë–û–ß–ò–ô –¢–û–ö–ï–ù payload:")
    print(json.dumps(working_payload, indent=2))
    
    print("\n–ù–ï –†–ê–ë–û–ß–ò–ô –¢–û–ö–ï–ù payload:")
    print(json.dumps(non_working_payload, indent=2))
    
    # –ù–∞–π—Ç–∏ —Ä–∞–∑–ª–∏—á–∏—è
    print("\nüîé –†–ê–ó–õ–ò–ß–ò–Ø:")
    for key in set(working_payload.keys()) | set(non_working_payload.keys()):
        working_val = working_payload.get(key, "–û–¢–°–£–¢–°–¢–í–£–ï–¢")
        non_working_val = non_working_payload.get(key, "–û–¢–°–£–¢–°–¢–í–£–ï–¢")
        
        if working_val != non_working_val:
            print(f"  {key}:")
            print(f"    –†–∞–±–æ—á–∏–π: {working_val}")
            print(f"    –ù–µ —Ä–∞–±–æ—á–∏–π: {non_working_val}")
    
    return working_payload, non_working_payload

def reverse_engineer_from_working_token():
    """–û–±—Ä–∞—Ç–Ω–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–∏—è SECRET_KEY –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞"""
    print("\nüîì –ü–û–ò–°–ö SECRET_KEY –ß–ï–†–ï–ó –û–ë–†–ê–¢–ù–£–Æ –ò–ù–ñ–ï–ù–ï–†–ò–Æ")
    print("="*60)
    
    # –¢–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
    EXACT_PAYLOAD = {
        "vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce",
        "iss": "CunBA",
        "timestamp": 1753096202
    }
    
    # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è –ø–æ–¥–ø–∏—Å–∏
    parts = WORKING_TOKEN.split('.')
    message = f"{parts[0]}.{parts[1]}".encode('ascii')
    target_signature = base64.urlsafe_b64decode(parts[2] + '==')
    
    print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∏: {message.decode()}")
    print(f"–¶–µ–ª–µ–≤–∞—è –ø–æ–¥–ø–∏—Å—å (hex): {binascii.hexlify(target_signature).decode()}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –∫–ª—é—á–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ—é—â–µ–π—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    key_candidates = generate_comprehensive_key_candidates()
    
    print(f"\n–¢–µ—Å—Ç–∏—Ä—É–µ–º {len(key_candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∫–ª—é—á–µ–π...")
    
    for i, key in enumerate(key_candidates):
        if i % 1000 == 0 and i > 0:
            print(f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {i}/{len(key_candidates)}...")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º HMAC –Ω–∞–ø—Ä—è–º—É—é
            test_signature = hmac.new(key.encode('utf-8'), message, hashlib.sha256).digest()
            
            if test_signature == target_signature:
                print(f"\nüéâ –ù–ê–ô–î–ï–ù SECRET_KEY!")
                print(f"–ö–ª—é—á: '{key}'")
                print(f"–î–ª–∏–Ω–∞: {len(key)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ JWT –±–∏–±–ª–∏–æ—Ç–µ–∫—É
                verification_token = jwt.encode(EXACT_PAYLOAD, key, algorithm='HS256')
                if verification_token == WORKING_TOKEN:
                    print("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —á–µ—Ä–µ–∑ JWT –±–∏–±–ª–∏–æ—Ç–µ–∫—É!")
                    return key
                else:
                    print("‚ùå JWT –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–∞–µ—Ç –¥—Ä—É–≥–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")
                
        except Exception as e:
            continue
    
    print("‚ùå SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return None

def generate_comprehensive_key_candidates():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∫–ª—é—á–µ–π"""
    candidates = set()
    
    vehicle_id = "0d79ff047f5cec5bf2ec2ec7d3e464ce"
    timestamp = 1753096202
    
    # 1. –ë–∞–∑–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
    base_strings = [
        "CunBA", "cunba", "CUNBA",
        "unlock", "UNLOCK", "Unlock",
        "mega", "MEGA", "Mega",
        "secret", "SECRET", "Secret",
        "key", "KEY", "Key",
        "jwt", "JWT",
        "android", "Android", "ANDROID",
        "qualcomm", "Qualcomm", "QUALCOMM",
        "8155", "qnx", "QNX",
        vehicle_id, vehicle_id.upper(),
        str(timestamp)
    ]
    candidates.update(base_strings)
    
    # 2. –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    separators = ["", "_", "-", ".", ":", "/", "\\", "|"]
    combinations = [
        ("CunBA", "unlock"), ("unlock", "CunBA"),
        ("CunBA", "mega"), ("mega", "CunBA"),
        ("CunBA", "secret"), ("secret", "CunBA"),
        ("CunBA", "key"), ("key", "CunBA"),
        ("CunBA", vehicle_id), (vehicle_id, "CunBA"),
        ("CunBA", str(timestamp)), (str(timestamp), "CunBA"),
        ("unlock", "mega"), ("mega", "unlock"),
        ("unlock", vehicle_id), (vehicle_id, "unlock"),
        ("unlock", str(timestamp)), (str(timestamp), "unlock"),
    ]
    
    for combo in combinations:
        for sep in separators:
            candidates.add(sep.join(combo))
    
    # 3. –•—ç—à–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    hash_sources = [
        "CunBA", "unlock", "mega", vehicle_id, str(timestamp),
        f"CunBA{vehicle_id}", f"unlock{vehicle_id}", f"CunBA{timestamp}",
        f"{vehicle_id}CunBA", f"{vehicle_id}unlock", f"{timestamp}CunBA"
    ]
    
    for source in hash_sources:
        candidates.add(hashlib.md5(source.encode()).hexdigest())
        candidates.add(hashlib.sha1(source.encode()).hexdigest())
        candidates.add(hashlib.sha256(source.encode()).hexdigest())
        candidates.add(hashlib.sha256(source.encode()).hexdigest()[:32])
        candidates.add(hashlib.sha256(source.encode()).hexdigest()[:16])
        candidates.add(hashlib.sha256(source.encode()).hexdigest()[:8])
    
    # 4. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
    dt = datetime.fromtimestamp(timestamp)
    time_variations = [
        str(timestamp)[:10], str(timestamp)[-6:],
        hex(timestamp)[2:], hex(timestamp)[2:].upper(),
        str(dt.year), str(dt.month), str(dt.day),
        f"{dt.year}{dt.month:02d}{dt.day:02d}",
        f"{dt.hour:02d}{dt.minute:02d}{dt.second:02d}",
        f"{dt.year}{dt.month:02d}{dt.day:02d}{dt.hour:02d}{dt.minute:02d}",
    ]
    candidates.update(time_variations)
    
    # 5. –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ QNX
    system_variations = [
        "qnx", "QNX", "Qnx",
        "automotive", "AUTOMOTIVE",
        "vehicle", "VEHICLE", "Vehicle",
        "huron", "HURON", "Huron",
        "mega_platform", "MEGA_PLATFORM",
        "cunba_mega", "CUNBA_MEGA",
        "unlock_cunba", "UNLOCK_CUNBA"
    ]
    candidates.update(system_variations)
    
    # 6. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    try:
        vid_int = int(vehicle_id, 16)
        math_results = [
            str(vid_int % 1000000),
            str(vid_int % 100000),
            str(vid_int % 10000),
            str((vid_int + timestamp) % 0xFFFFFFFF),
            str(vid_int ^ timestamp),
            str(abs(hash(vehicle_id)) % 1000000),
            hex(vid_int % 0xFFFFFFFF)[2:],
            hex((vid_int + timestamp) % 0xFFFFFFFF)[2:],
        ]
        candidates.update(math_results)
    except:
        pass
    
    # 7. Base64 –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –≤ –±–∏–Ω–∞—Ä–Ω–∏–∫–µ
    binary_strings = [
        "sssss3issssssmossssssmssssss/dssssssisssss",
        "sssss3lssssssmossssssRssssss/dsssss3",
    ]
    
    for b_str in binary_strings:
        candidates.add(b_str)
        # –ü–æ–ø—Ä–æ–±—É–µ–º –∫–∞–∫ base64
        try:
            decoded = base64.b64decode(b_str + '==').decode('ascii', errors='ignore')
            if len(decoded) >= 4:
                candidates.add(decoded)
        except:
            pass
        
        # XOR –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        for xor_key in range(1, 128):
            try:
                decoded = ''.join(chr(ord(c) ^ xor_key) for c in b_str if 32 <= (ord(c) ^ xor_key) <= 126)
                if len(decoded) >= 8:
                    candidates.add(decoded)
            except:
                pass
    
    # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ
    candidates = {c for c in candidates if c and len(c) >= 1}
    
    return list(candidates)

def create_working_generator(secret_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
    if not secret_key:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ SECRET_KEY")
        return
    
    generator_code = f'''#!/usr/bin/env python3
"""
–†–ê–ë–û–ß–ò–ô –ì–ï–ù–ï–†–ê–¢–û–† JWT –¢–û–ö–ï–ù–û–í
SECRET_KEY –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ 100% —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
"""
import jwt
from datetime import datetime

# –ù–ê–ô–î–ï–ù–ù–´–ô SECRET_KEY
SECRET_KEY = "{secret_key}"

def generate_unlock_token(vehicle_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è unlock —Å–∏—Å—Ç–µ–º—ã"""
    payload = {{
        "vehicle_id": vehicle_id,
        "iss": "CunBA",
        "timestamp": int(datetime.now().timestamp())
    }}
    
    try:
        token = jwt.encode(payload, SECRET_KEY, algorithm='HS256')
        return token
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {{e}}")
        return None

def test_token_with_known_good():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ä–∞–±–æ—á–∏–º —Ç–æ–∫–µ–Ω–æ–º"""
    test_payload = {{
        "vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce",
        "iss": "CunBA",
        "timestamp": 1753096202
    }}
    
    test_token = jwt.encode(test_payload, SECRET_KEY, algorithm='HS256')
    expected = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"
    
    print(f"–¢–µ—Å—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {{'‚úÖ –£–°–ü–ï–•' if test_token == expected else '‚ùå –ù–ï–£–î–ê–ß–ê'}}")
    if test_token == expected:
        print("–ö–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    else:
        print(f"–û–∂–∏–¥–∞–ª—Å—è: {{expected}}")
        print(f"–ü–æ–ª—É—á–µ–Ω:  {{test_token}}")

if __name__ == "__main__":
    import sys
    
    # –¢–µ—Å—Ç —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ SECRET_KEY...")
    test_token_with_known_good()
    print()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞
    if len(sys.argv) > 1:
        vehicle_id = sys.argv[1]
    else:
        vehicle_id = input("–í–≤–µ–¥–∏—Ç–µ vehicle_id: ")
    
    token = generate_unlock_token(vehicle_id)
    
    if token:
        print("\\n‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JWT —Ç–æ–∫–µ–Ω:")
        print("=" * 80)
        print(token)
        print("=" * 80)
        print("\\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –≤ unlock –∫–æ–º–∞–Ω–¥–µ")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω")
'''
    
    with open("D:/vzlom/working_unlock_generator.py", "w", encoding="utf-8") as f:
        f.write(generator_code)
    
    print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω working_unlock_generator.py —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º SECRET_KEY!")
    print(f"–ö–ª—é—á: '{secret_key}'")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ TOKEN DIFFERENCE ANALYZER")
    print("="*80)
    print("–ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π –º–µ–∂–¥—É —Ä–∞–±–æ—á–∏–º –∏ –Ω–µ—Ä–∞–±–æ—á–∏–º —Ç–æ–∫–µ–Ω–∞–º–∏")
    print("–ü–æ–∏—Å–∫ SECRET_KEY —á–µ—Ä–µ–∑ –æ–±—Ä–∞—Ç–Ω—É—é –∏–Ω–∂–µ–Ω–µ—Ä–∏—é")
    print()
    
    # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
    working_payload, non_working_payload = analyze_token_differences()
    
    print("\nüìù –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:")
    print("- –†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ 'exp'")
    print("- –ù–µ—Ä–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–µ 'exp' (–≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è)")
    print("- –°–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç –æ—Ç–∫–ª–æ–Ω—è—Ç—å —Ç–æ–∫–µ–Ω—ã —Å –ø–æ–ª–µ–º 'exp'")
    print("- –†–∞–∑–Ω—ã–µ timestamp —É–∫–∞–∑—ã–≤–∞—é—Ç –Ω–∞ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è")
    
    # –ü–æ–∏—Å–∫ SECRET_KEY
    found_key = reverse_engineer_from_working_token()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    create_working_generator(found_key)
    
    if found_key:
        print(f"\nüéâ –ú–ò–°–°–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê!")
        print(f"SECRET_KEY –Ω–∞–π–¥–µ–Ω: '{found_key}'")
        print(f"–°–æ–∑–¥–∞–Ω —Ä–∞–±–æ—á–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä: working_unlock_generator.py")
    else:
        print(f"\nüòû SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")
        print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (hostname, MAC –∏ —Ç.–¥.)")
        print("   2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å Ghidra/IDA")
        print("   3. –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã –≤ —Å–∏—Å—Ç–µ–º–µ")

if __name__ == "__main__":
    main()
