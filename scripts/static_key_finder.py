#!/usr/bin/env python3
"""
–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ unlock –±–∏–Ω–∞—Ä–Ω–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ SECRET_KEY
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
"""

import re
import jwt
import binascii
import base64
from pathlib import Path

# –†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"
WORKING_PAYLOAD = {
    "vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce", 
    "iss": "CunBA",
    "timestamp": 1753096202
}

def test_key(key):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞"""
    try:
        test_token = jwt.encode(WORKING_PAYLOAD, key, algorithm='HS256')
        return test_token == WORKING_TOKEN
    except:
        return False

def extract_strings_from_binary():
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫ –∏–∑ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞"""
    print("üîç –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –∏–∑ unlock –±–∏–Ω–∞—Ä–Ω–∏–∫–∞...")
    
    try:
        with open("unlock", "rb") as f:
            data = f.read()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª unlock –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    
    # –ü–æ–∏—Å–∫ ASCII —Å—Ç—Ä–æ–∫ (–º–∏–Ω–∏–º—É–º 4 —Å–∏–º–≤–æ–ª–∞)
    strings = []
    current_string = ""
    
    for byte in data:
        if 32 <= byte <= 126:  # –ü–µ—á–∞—Ç–Ω—ã–µ ASCII —Å–∏–º–≤–æ–ª—ã
            current_string += chr(byte)
        else:
            if len(current_string) >= 4:
                strings.append(current_string)
            current_string = ""
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
    if len(current_string) >= 4:
        strings.append(current_string)
    
    print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(strings)} —Å—Ç—Ä–æ–∫")
    return strings

def search_potential_keys(strings):
    """–ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π —Å—Ä–µ–¥–∏ —Å—Ç—Ä–æ–∫"""
    print("üîç –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö SECRET_KEY...")
    
    potential_keys = []
    
    # –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
    for s in strings:
        # –î–ª–∏–Ω–∞ –æ—Ç 8 –¥–æ 128 —Å–∏–º–≤–æ–ª–æ–≤
        if 8 <= len(s) <= 128:
            # –°–æ–¥–µ—Ä–∂–∏—Ç –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã
            if re.match(r'^[a-zA-Z0-9+/=_\-\.]+$', s):
                # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è (–Ω–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–π—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω)
                if len(set(s)) >= 6:
                    potential_keys.append(s)
    
    print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(potential_keys)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π")
    return potential_keys

def search_jwt_related_strings(strings):
    """–ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å JWT"""
    print("üîç –ü–æ–∏—Å–∫ JWT-—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫...")
    
    jwt_strings = []
    jwt_keywords = ['jwt', 'hmac', 'secret', 'key', 'cunba', 'unlock', 'vehicle', 'HS256', 'iss']
    
    for s in strings:
        for keyword in jwt_keywords:
            if keyword.lower() in s.lower():
                jwt_strings.append(s)
                break
    
    print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(jwt_strings)} JWT-—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫")
    for s in jwt_strings[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
        print(f"   ‚Ä¢ {s}")
    
    return jwt_strings

def analyze_base64_strings(strings):
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∫ –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π Base64"""
    print("üîç –ê–Ω–∞–ª–∏–∑ Base64 —Å—Ç—Ä–æ–∫...")
    
    base64_candidates = []
    
    for s in strings:
        # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π Base64: —Å–æ–¥–µ—Ä–∂–∏—Ç +, /, = –∏ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –¥–ª–∏–Ω—É
        if re.match(r'^[A-Za-z0-9+/]+=*$', s) and len(s) % 4 == 0 and len(s) >= 16:
            try:
                decoded = base64.b64decode(s).decode('ascii', errors='ignore')
                base64_candidates.append({
                    'original': s,
                    'decoded': decoded,
                    'length': len(s)
                })
            except:
                continue
    
    print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(base64_candidates)} Base64 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    for candidate in base64_candidates[:10]:
        print(f"   ‚Ä¢ {candidate['original'][:40]}... -> {candidate['decoded'][:40]}...")
    
    return base64_candidates

def search_for_cunba_context():
    """–ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥ —Å—Ç—Ä–æ–∫–∏ CunBA"""
    print("üîç –ü–æ–∏—Å–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –≤–æ–∫—Ä—É–≥ 'CunBA'...")
    
    try:
        with open("unlock", "rb") as f:
            data = f.read()
    except FileNotFoundError:
        return []
    
    contexts = []
    cunba_bytes = b'CunBA'
    
    pos = 0
    while True:
        pos = data.find(cunba_bytes, pos)
        if pos == -1:
            break
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç (256 –±–∞–π—Ç –¥–æ –∏ –ø–æ—Å–ª–µ)
        start = max(0, pos - 256)
        end = min(len(data), pos + len(cunba_bytes) + 256)
        context = data[start:end]
        
        # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
        context_strings = []
        current_string = ""
        
        for byte in context:
            if 32 <= byte <= 126:
                current_string += chr(byte)
            else:
                if len(current_string) >= 8:
                    context_strings.append(current_string)
                current_string = ""
        
        contexts.extend(context_strings)
        pos += 1
    
    print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(contexts)} —Å—Ç—Ä–æ–∫ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ CunBA")
    for ctx in contexts[:10]:
        print(f"   ‚Ä¢ {ctx}")
    
    return contexts

def test_all_candidates(candidates):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∫–ª—é—á–µ–π"""
    print(f"üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
    
    tested = 0
    for candidate in candidates:
        tested += 1
        if tested % 100 == 0:
            print(f"   –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {tested}/{len(candidates)}...")
        
        if test_key(candidate):
            print(f"üéâ –ù–ê–ô–î–ï–ù –ü–†–ê–í–ò–õ–¨–ù–´–ô –ö–õ–Æ–ß!")
            print(f"–ö–ª—é—á: '{candidate}'")
            print(f"–î–ª–∏–Ω–∞: {len(candidate)} —Å–∏–º–≤–æ–ª–æ–≤")
            return candidate
    
    print("‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("üîê –°–¢–ê–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó UNLOCK –ë–ò–ù–ê–†–ù–ò–ö–ê")
    print("="*60)
    print(f"–¶–µ–ª—å: –Ω–∞–π—Ç–∏ SECRET_KEY –¥–ª—è —Ç–æ–∫–µ–Ω–∞ {WORKING_TOKEN[:30]}...")
    print()
    
    # 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫
    all_strings = extract_strings_from_binary()
    if not all_strings:
        return
    
    # 2. –ü–æ–∏—Å–∫ JWT-—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    jwt_strings = search_jwt_related_strings(all_strings)
    
    # 3. –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
    potential_keys = search_potential_keys(all_strings)
    
    # 4. –ê–Ω–∞–ª–∏–∑ Base64
    base64_candidates = analyze_base64_strings(all_strings)
    
    # 5. –ö–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ CunBA
    cunba_context = search_for_cunba_context()
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
    all_candidates = set()
    all_candidates.update(potential_keys)
    all_candidates.update(jwt_strings)
    all_candidates.update(cunba_context)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ Base64
    for b64 in base64_candidates:
        all_candidates.add(b64['decoded'])
        all_candidates.add(b64['original'])
    
    # –£–±–∏—Ä–∞–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ –∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ
    filtered_candidates = [c for c in all_candidates if 4 <= len(c) <= 200]
    
    print(f"\nüìä –ò—Ç–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(filtered_candidates)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
    result = test_all_candidates(filtered_candidates)
    
    if not result:
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å Frida –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ")
        print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥—Ä—É–≥–∏–µ —Ñ–∞–π–ª—ã –≤ —Å–∏—Å—Ç–µ–º–µ Android")
        print("   3. –ö–ª—é—á –º–æ–∂–µ—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏")

if __name__ == "__main__":
    main()
