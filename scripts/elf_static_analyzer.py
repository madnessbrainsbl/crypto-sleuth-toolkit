#!/usr/bin/env python3
"""
–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ ELF —Ñ–∞–π–ª–∞ unlock –¥–ª—è –ø–æ–∏—Å–∫–∞ SECRET_KEY
–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞
"""

import subprocess
import re
import os
import struct
from pathlib import Path

def run_command(cmd, shell=True):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    try:
        result = subprocess.run(cmd, shell=shell, capture_output=True, text=True, timeout=30)
        return result.stdout, result.stderr, result.returncode
    except subprocess.TimeoutExpired:
        return "", "Timeout", -1
    except Exception as e:
        return "", str(e), -1

def analyze_elf_header():
    """–ê–Ω–∞–ª–∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ ELF —Ñ–∞–π–ª–∞"""
    print("üîç –ê–ù–ê–õ–ò–ó –ó–ê–ì–û–õ–û–í–ö–ê ELF –§–ê–ô–õ–ê")
    print("="*50)
    
    try:
        with open("unlock", "rb") as f:
            # –ß–∏—Ç–∞–µ–º ELF –∑–∞–≥–æ–ª–æ–≤–æ–∫
            elf_header = f.read(64)
            
            if elf_header[:4] != b'\x7fELF':
                print("‚ùå –ù–µ —è–≤–ª—è–µ—Ç—Å—è ELF —Ñ–∞–π–ª–æ–º")
                return
            
            # –ü–∞—Ä—Å–∏–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            ei_class = elf_header[4]  # 32-bit (1) –∏–ª–∏ 64-bit (2)
            ei_data = elf_header[5]   # Little endian (1) –∏–ª–∏ Big endian (2)
            ei_version = elf_header[6] # –í–µ—Ä—Å–∏—è ELF
            
            arch = "64-bit" if ei_class == 2 else "32-bit"
            endian = "Little Endian" if ei_data == 1 else "Big Endian"
            
            print(f"‚úÖ –í–∞–ª–∏–¥–Ω—ã–π ELF —Ñ–∞–π–ª")
            print(f"   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {arch}")
            print(f"   –ü–æ—Ä—è–¥–æ–∫ –±–∞–π—Ç: {endian}")
            print(f"   –í–µ—Ä—Å–∏—è ELF: {ei_version}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—à–∏–Ω–µ
            if ei_class == 2:  # 64-bit
                fmt = "<H" if ei_data == 1 else ">H"
                e_machine = struct.unpack(fmt, elf_header[18:20])[0]
            else:  # 32-bit  
                fmt = "<H" if ei_data == 1 else ">H"
                e_machine = struct.unpack(fmt, elf_header[18:20])[0]
            
            machine_types = {
                0x3E: "x86-64", 0x28: "ARM", 0xB7: "AArch64", 
                0x3: "x86", 0x8: "MIPS", 0x14: "PowerPC"
            }
            
            machine = machine_types.get(e_machine, f"Unknown (0x{e_machine:x})")
            print(f"   –¢–∏–ø –º–∞—à–∏–Ω—ã: {machine}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ELF: {e}")

def extract_strings_analysis():
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∫ –∏–∑ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞"""
    print("\nüî§ –ê–ù–ê–õ–ò–ó –°–¢–†–û–ö –í –ë–ò–ù–ê–†–ù–ò–ö–ï")
    print("="*50)
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å strings –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
    stdout, stderr, code = run_command("strings unlock")
    
    if code != 0:
        # Fallback - –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤—Ä—É—á–Ω—É—é
        print("‚ö†Ô∏è  –ö–æ–º–∞–Ω–¥–∞ 'strings' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –∏–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –≤—Ä—É—á–Ω—É—é...")
        strings_list = extract_strings_manual()
    else:
        strings_list = stdout.split('\n')
    
    print(f"–ù–∞–π–¥–µ–Ω–æ {len(strings_list)} —Å—Ç—Ä–æ–∫")
    
    # –ò—â–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
    crypto_strings = []
    jwt_strings = []
    cunba_strings = []
    key_strings = []
    
    for s in strings_list:
        s = s.strip()
        if len(s) < 3:
            continue
            
        s_lower = s.lower()
        
        # –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
        if any(term in s_lower for term in ['hmac', 'sha256', 'jwt', 'encrypt', 'decrypt', 'sign']):
            crypto_strings.append(s)
        
        # JWT —Å–≤—è–∑–∞–Ω–Ω—ã–µ
        if any(term in s_lower for term in ['jwt', 'token', 'bearer', 'header', 'payload']):
            jwt_strings.append(s)
        
        # CunBA —Å–≤—è–∑–∞–Ω–Ω—ã–µ
        if any(term in s_lower for term in ['cunba', 'unlock', 'mega', 'vehicle']):
            cunba_strings.append(s)
        
        # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ (–¥–ª–∏–Ω–Ω—ã–µ –∞–ª—Ñ–∞–Ω—É–º–µ—Ä–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏)
        if (len(s) >= 16 and len(s) <= 128 and 
            re.match(r'^[A-Za-z0-9+/=_-]+$', s) and 
            not re.match(r'^[0-9]+$', s)):
            key_strings.append(s)
    
    print(f"\nüìä –ö–ê–¢–ï–ì–û–†–ò–ò –°–¢–†–û–ö:")
    print(f"   üîê –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ: {len(crypto_strings)}")
    print(f"   üé´ JWT —Å–≤—è–∑–∞–Ω–Ω—ã–µ: {len(jwt_strings)}")
    print(f"   üöó CunBA/unlock: {len(cunba_strings)}")
    print(f"   üîë –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏: {len(key_strings)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–∞–º—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ
    if crypto_strings:
        print(f"\nüîê –ö–†–ò–ü–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ï –°–¢–†–û–ö–ò:")
        for s in crypto_strings[:10]:
            print(f"   {s}")
    
    if jwt_strings:
        print(f"\nüé´ JWT –°–¢–†–û–ö–ò:")
        for s in jwt_strings[:10]:
            print(f"   {s}")
    
    if cunba_strings:
        print(f"\nüöó CUNBA/UNLOCK –°–¢–†–û–ö–ò:")
        for s in cunba_strings[:10]:
            print(f"   {s}")
    
    if key_strings:
        print(f"\nüîë –ü–û–¢–ï–ù–¶–ò–ê–õ–¨–ù–´–ï –ö–õ–Æ–ß–ò:")
        for s in key_strings[:10]:
            print(f"   {s}")
    
    return key_strings + crypto_strings + jwt_strings

def extract_strings_manual():
    """–†—É—á–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –∏–∑ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞"""
    strings = []
    current_string = ""
    
    try:
        with open("unlock", "rb") as f:
            while True:
                byte = f.read(1)
                if not byte:
                    break
                
                b = ord(byte)
                if 32 <= b <= 126:  # Printable ASCII
                    current_string += chr(b)
                else:
                    if len(current_string) >= 4:
                        strings.append(current_string)
                    current_string = ""
        
        if current_string and len(current_string) >= 4:
            strings.append(current_string)
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ç—Ä–æ–∫: {e}")
    
    return strings

def analyze_binary_patterns():
    """–ü–æ–∏—Å–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüîç –ü–û–ò–°–ö –ë–ò–ù–ê–†–ù–´–• –ü–ê–¢–¢–ï–†–ù–û–í")
    print("="*50)
    
    try:
        with open("unlock", "rb") as f:
            data = f.read()
        
        # –ò—â–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        crypto_patterns = {
            # HMAC-SHA256 –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
            b'\x36\x36\x36\x36': 'HMAC ipad pattern',
            b'\x5c\x5c\x5c\x5c': 'HMAC opad pattern',
            # SHA-256 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã
            b'\x6a\x09\xe6\x67': 'SHA-256 IV H0',
            b'\xbb\x67\xae\x85': 'SHA-256 IV H1',
            # JWT –ø–æ–¥–ø–∏—Å–∏ –≤ base64url
            b'eyJhbGciOiJIUzI1NiI': 'JWT header HS256',
            b'eyJ0eXAiOiJKV1Qi': 'JWT header typ',
        }
        
        found_patterns = []
        for pattern, description in crypto_patterns.items():
            pos = data.find(pattern)
            if pos != -1:
                found_patterns.append((pos, pattern, description))
        
        if found_patterns:
            print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã:")
            for pos, pattern, desc in found_patterns:
                print(f"   0x{pos:08x}: {desc}")
        else:
            print("‚ùå –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        # –ü–æ–∏—Å–∫ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        print("\nüîÑ –ü–æ–∏—Å–∫ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π...")
        repetitions = find_repetitions(data)
        
        if repetitions:
            print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è:")
            for seq, count, positions in repetitions[:5]:
                if len(seq) >= 8:
                    print(f"   {seq.hex()}: {count} —Ä–∞–∑")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {e}")

def find_repetitions(data, min_length=8, min_count=2):
    """–ü–æ–∏—Å–∫ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"""
    sequences = {}
    
    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª–∏–Ω–æ–π –æ—Ç min_length –¥–æ 32 –±–∞–π—Ç
    for length in range(min_length, 33):
        for i in range(len(data) - length):
            seq = data[i:i+length]
            
            if seq not in sequences:
                sequences[seq] = []
            sequences[seq].append(i)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º—É –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    repetitions = []
    for seq, positions in sequences.items():
        if len(positions) >= min_count:
            repetitions.append((seq, len(positions), positions))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    repetitions.sort(key=lambda x: x[1], reverse=True)
    
    return repetitions

def test_extracted_keys(potential_keys):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π"""
    print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ó–í–õ–ï–ß–ï–ù–ù–´–• –ö–õ–Æ–ß–ï–ô")
    print("="*50)
    
    if not potential_keys:
        print("‚ùå –ù–µ—Ç –∫–ª—é—á–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try:
        import jwt
        
        WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"
        
        EXACT_PAYLOAD = {
            "vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce",
            "iss": "CunBA",
            "timestamp": 1753096202
        }
        
        print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º {len(potential_keys)} –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π...")
        
        for i, key in enumerate(potential_keys):
            try:
                test_token = jwt.encode(EXACT_PAYLOAD, key, algorithm='HS256')
                if test_token == WORKING_TOKEN:
                    print(f"\nüéâ –ù–ê–ô–î–ï–ù SECRET_KEY!")
                    print(f"–ö–ª—é—á: '{key}'")
                    print(f"–ò—Å—Ç–æ—á–Ω–∏–∫: —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ ELF")
                    return key
            except:
                continue
                
            if i % 50 == 0 and i > 0:
                print(f"   –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {i}/{len(potential_keys)}...")
        
        print("‚ùå –ù–∏ –æ–¥–∏–Ω –∏–∑ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π –Ω–µ –ø–æ–¥–æ—à–µ–ª")
        
    except ImportError:
        print("‚ùå JWT –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    return None

def create_ghidra_script():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è Ghidra –∞–Ω–∞–ª–∏–∑–∞"""
    print("\nüìù –°–û–ó–î–ê–ù–ò–ï –°–ö–†–ò–ü–¢–ê –î–õ–Ø GHIDRA")
    print("="*50)
    
    script_content = '''//Ghidra script –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ unlock –±–∏–Ω–∞—Ä–Ω–∏–∫–∞
//–ü–æ–∏—Å–∫ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–ª—é—á–µ–π
//@author Auto-generated
//@category Analysis
//@keybinding
//@menupath
//@toolbar

import ghidra.app.script.GhidraScript;
import ghidra.program.model.symbol.*;
import ghidra.program.model.listing.*;
import ghidra.program.model.mem.*;

public class UnlockAnalyzer extends GhidraScript {
    
    @Override
    public void run() throws Exception {
        
        println("=== UNLOCK BINARY ANALYSIS ===");
        
        // –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å JWT/crypto
        findCryptoStrings();
        
        // –ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–π
        findCryptoFunctions();
        
        // –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
        findPotentialKeys();
    }
    
    private void findCryptoStrings() {
        println("\\n--- –ü–æ–∏—Å–∫ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–æ–∫ ---");
        
        String[] cryptoKeywords = {
            "jwt", "hmac", "sha256", "sign", "verify",
            "CunBA", "unlock", "secret", "key", "token"
        };
        
        for (String keyword : cryptoKeywords) {
            println("–ü–æ–∏—Å–∫: " + keyword);
            // –ó–¥–µ—Å—å –∫–æ–¥ –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∫ –≤ Ghidra API
        }
    }
    
    private void findCryptoFunctions() {
        println("\\n--- –ü–æ–∏—Å–∫ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π ---");
        
        String[] cryptoFuncs = {
            "HMAC_Init", "HMAC_Update", "HMAC_Final",
            "SHA256_Init", "SHA256_Update", "SHA256_Final",
            "jwt_encode", "jwt_decode", "jwt_sign"
        };
        
        for (String func : cryptoFuncs) {
            println("–ü–æ–∏—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏: " + func);
        }
    }
    
    private void findPotentialKeys() {
        println("\\n--- –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π ---");
        
        // –ü–æ–∏—Å–∫ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –±—É—Ñ–µ—Ä–æ–≤ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
        // –¥–ª—è HMAC –∫–ª—é—á–µ–π (–æ–±—ã—á–Ω–æ 16-64 –±–∞–π—Ç–∞)
    }
}'''
    
    with open("D:/vzlom/UnlockAnalyzer.java", "w", encoding="utf-8") as f:
        f.write(script_content)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç UnlockAnalyzer.java –¥–ª—è Ghidra")
    print("üí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
    print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ Ghidra")
    print("   2. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª 'unlock'")
    print("   3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∞–≤—Ç–æ–∞–Ω–∞–ª–∏–∑")
    print("   4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Script Manager –¥–ª—è –∑–∞–ø—É—Å–∫–∞ UnlockAnalyzer.java")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("üî¨ ELF STATIC ANALYZER")
    print("="*80)
    print("–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞ unlock –¥–ª—è –ø–æ–∏—Å–∫–∞ SECRET_KEY")
    print()
    
    if not os.path.exists("unlock"):
        print("‚ùå –§–∞–π–ª 'unlock' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        return
    
    # –ê–Ω–∞–ª–∏–∑ ELF –∑–∞–≥–æ–ª–æ–≤–∫–∞
    analyze_elf_header()
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∫
    potential_keys = extract_strings_analysis()
    
    # –ü–æ–∏—Å–∫ –±–∏–Ω–∞—Ä–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    analyze_binary_patterns()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
    found_key = test_extracted_keys(potential_keys)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è Ghidra
    create_ghidra_script()
    
    if found_key:
        print(f"\nüéâ –ú–ò–°–°–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê!")
        print(f"SECRET_KEY –Ω–∞–π–¥–µ–Ω: '{found_key}'")
    else:
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("   1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –≤ Ghidra –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
        print("   2. –ò—Å—Å–ª–µ–¥—É–π—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏")
        print("   3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏")

if __name__ == "__main__":
    main()
