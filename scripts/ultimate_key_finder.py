#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ SECRET_KEY
–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
"""

import jwt
import hashlib
import hmac
import base64
import binascii
import itertools
import string
from datetime import datetime

# 100% —Ä–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω
WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"

EXACT_PAYLOAD = {
    "vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce",
    "iss": "CunBA",
    "timestamp": 1753096202
}

def test_key_direct(key):
    """–ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –∫–ª—é—á–∞ —á–µ—Ä–µ–∑ HMAC –∏ JWT"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ JWT –±–∏–±–ª–∏–æ—Ç–µ–∫—É
        test_token = jwt.encode(EXACT_PAYLOAD, key, algorithm='HS256')
        return test_token == WORKING_TOKEN
    except:
        return False

def generate_extended_candidates():
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
    print("üîç –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
    
    candidates = set()
    
    # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    vehicle_id = "0d79ff047f5cec5bf2ec2ec7d3e464ce"
    timestamp = 1753096202
    dt = datetime.fromtimestamp(timestamp)
    
    # 1. –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞
    dev_strings = [
        "CunBA", "cunba", "CUNBA",
        "unlock", "UNLOCK", "Unlock", 
        "mega", "MEGA", "Mega",
        "android", "Android", "ANDROID",
        "qualcomm", "Qualcomm", "QUALCOMM",
        "8155", "qnx", "QNX", "Qnx",
        "huron", "HURON", "Huron",
        "secret", "SECRET", "Secret",
        "key", "KEY", "Key",
        "jwt", "JWT", "Jwt",
        "password", "PASSWORD", "Password",
        "pass", "PASS", "Pass",
        "token", "TOKEN", "Token",
        "auth", "AUTH", "Auth",
        "sign", "SIGN", "Sign",
        "hmac", "HMAC", "Hmac",
        "sha256", "SHA256", "Sha256",
        "vehicle", "VEHICLE", "Vehicle",
        "automotive", "AUTOMOTIVE", "Automotive",
        "platform", "PLATFORM", "Platform"
    ]
    candidates.update(dev_strings)
    
    # 2. –°—Ç—Ä–æ–∫–∏ –∏–∑ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞ (–Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ)
    binary_strings = [
        "sssss3issssssmossssssmssssss/dssssssisssss",
        "sssss3lssssssmossssssRssssss/dsssss3",
        "sssss3issssshssssssbsssssscsssss3ksssss=",
        "c3Nzc3Mzaml0c3Nzc3Ntb3Nzc3Nzc21zc3Nzcy9kc3Nzc3Nzc2lzc3Nzc3M=",
    ]
    candidates.update(binary_strings)
    
    # 3. –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–æ–∫–µ–Ω–∞
    token_based = [
        vehicle_id, vehicle_id.upper(), vehicle_id.lower(),
        str(timestamp), hex(timestamp)[2:], hex(timestamp)[2:].upper(),
        "CunBA", "cunba", "CUNBA"
    ]
    candidates.update(token_based)
    
    # 4. –í—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏
    time_variants = [
        str(timestamp)[:10], str(timestamp)[:8], str(timestamp)[:6],
        str(timestamp)[-10:], str(timestamp)[-8:], str(timestamp)[-6:],
        str(dt.year), str(dt.month), str(dt.day),
        str(dt.hour), str(dt.minute), str(dt.second),
        f"{dt.year}{dt.month:02d}{dt.day:02d}",
        f"{dt.hour:02d}{dt.minute:02d}{dt.second:02d}",
        f"{dt.year}{dt.month:02d}",
        f"{dt.month:02d}{dt.day:02d}",
    ]
    candidates.update(time_variants)
    
    # 5. –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏
    separators = ["", "_", "-", ".", ":", "/", "\\", "|", "+", "=", "@", "#", "$", "%", "^", "&", "*"]
    
    base_combinations = [
        ("CunBA", "unlock"), ("unlock", "CunBA"),
        ("CunBA", "mega"), ("mega", "CunBA"),
        ("CunBA", "secret"), ("secret", "CunBA"),
        ("CunBA", "key"), ("key", "CunBA"),
        ("CunBA", "password"), ("password", "CunBA"),
        ("CunBA", vehicle_id), (vehicle_id, "CunBA"),
        ("CunBA", str(timestamp)), (str(timestamp), "CunBA"),
        ("unlock", "mega"), ("mega", "unlock"),
        ("unlock", "key"), ("key", "unlock"),
        ("unlock", vehicle_id), (vehicle_id, "unlock"),
        ("mega", "key"), ("key", "mega"),
        ("mega", vehicle_id), (vehicle_id, "mega"),
    ]
    
    for combo in base_combinations:
        for sep in separators[:8]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            candidates.add(sep.join(combo))
    
    # 6. –•—ç—à–∏ –≤—Å–µ—Ö –±–∞–∑–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
    hash_sources = list(candidates)[:50]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 50 –¥–ª—è —Ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
    
    for source in hash_sources:
        if isinstance(source, str) and len(source) >= 3:
            try:
                candidates.add(hashlib.md5(source.encode()).hexdigest())
                candidates.add(hashlib.sha1(source.encode()).hexdigest())
                candidates.add(hashlib.sha256(source.encode()).hexdigest())
                candidates.add(hashlib.sha256(source.encode()).hexdigest()[:32])
                candidates.add(hashlib.sha256(source.encode()).hexdigest()[:16])
                candidates.add(hashlib.sha256(source.encode()).hexdigest()[:8])
            except:
                pass
    
    # 7. –°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    system_combos = [
        f"com.cunba.mega.unlock",
        f"cunba.mega.unlock", 
        f"mega.unlock",
        f"unlock.cunba",
        f"android.unlock",
        f"qnx.unlock",
        f"huron.unlock",
        f"qualcomm.unlock",
        f"8155.unlock",
    ]
    candidates.update(system_combos)
    
    # 8. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å vehicle_id
    try:
        vid_int = int(vehicle_id, 16)
        math_operations = [
            str(vid_int % 1000000),
            str(vid_int % 100000),
            str(vid_int % 10000),
            str(vid_int % 1000),
            str((vid_int + timestamp) % 0xFFFFFFFF),
            str(vid_int ^ timestamp),
            str(vid_int ^ 0x12345678),
            str(abs(hash(vehicle_id)) % 1000000),
            hex(vid_int % 0xFFFFFFFF)[2:],
            hex((vid_int + timestamp) % 0xFFFFFFFF)[2:],
        ]
        candidates.update(math_operations)
    except:
        pass
    
    # 9. –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è Base64 —Å—Ç—Ä–æ–∫
    for b64_str in binary_strings:
        try:
            # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ base64
            decoded = base64.b64decode(b64_str + '==').decode('ascii', errors='ignore')
            if len(decoded) >= 4:
                candidates.add(decoded)
        except:
            pass
        
        try:
            # URL-safe base64
            decoded = base64.urlsafe_b64decode(b64_str + '==').decode('ascii', errors='ignore')
            if len(decoded) >= 4:
                candidates.add(decoded)
        except:
            pass
    
    # 10. XOR –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫
    suspicious_strings = [
        "sssss3issssssmossssssmssssss/dssssssisssss",
        "sssss3lssssssmossssssRssssss/dsssss3",
    ]
    
    for sus_str in suspicious_strings:
        # –ü–æ–ø—Ä–æ–±—É–µ–º XOR —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
        for xor_key in range(1, 128):
            try:
                decoded = ""
                for char in sus_str:
                    xor_char = chr(ord(char) ^ xor_key)
                    if 32 <= ord(xor_char) <= 126:  # Printable ASCII
                        decoded += xor_char
                    else:
                        break
                
                if len(decoded) >= 8 and len(decoded) == len(sus_str):
                    candidates.add(decoded)
            except:
                continue
    
    # 11. –ë—Ä—É—Ç—Ñ–æ—Ä—Å –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–ª—é—á–µ–π (1-6 —Å–∏–º–≤–æ–ª–æ–≤)
    charset = string.ascii_letters + string.digits
    for length in range(1, 7):
        if len(candidates) > 50000:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
            break
        count = 0
        for key_tuple in itertools.product(charset, repeat=length):
            key = ''.join(key_tuple)
            candidates.add(key)
            count += 1
            if count > 5000:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–ª–∏–Ω—ã
                break
    
    # –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∏ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å—Ç—Ä–æ–∫–∏
    candidates = {c for c in candidates if c and len(str(c)) >= 1}
    
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(candidates)} —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    return list(candidates)

def ultimate_brute_force():
    """–§–∏–Ω–∞–ª—å–Ω—ã–π –±—Ä—É—Ç—Ñ–æ—Ä—Å –ø–æ–∏—Å–∫"""
    print("üöÄ –§–ò–ù–ê–õ–¨–ù–´–ô –ü–û–ò–°–ö SECRET_KEY")
    print("="*60)
    
    candidates = generate_extended_candidates()
    
    print(f"üéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
    
    found_keys = []
    tested = 0
    
    for key in candidates:
        tested += 1
        
        if tested % 5000 == 0:
            print(f"   –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {tested}/{len(candidates)}...")
        
        if test_key_direct(key):
            print(f"\nüéâ –ù–ê–ô–î–ï–ù SECRET_KEY!")
            print(f"–ö–ª—é—á: '{key}'")
            print(f"–î–ª–∏–Ω–∞: {len(key)} —Å–∏–º–≤–æ–ª–æ–≤")
            print(f"–¢–∏–ø: {type(key)}")
            
            found_keys.append(key)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—â–µ —Ä–∞–∑ –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            verification = jwt.encode(EXACT_PAYLOAD, key, algorithm='HS256')
            match = verification == WORKING_TOKEN
            print(f"–î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {'‚úÖ –°–û–í–ü–ê–î–ê–ï–¢' if match else '‚ùå –ù–ï –°–û–í–ü–ê–î–ê–ï–¢'}")
            
            if match:
                return key
    
    print(f"\nüòû SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ {tested} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    return None

def create_final_generator(secret_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞"""
    if not secret_key:
        return
    
    generator_code = f'''#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –†–ê–ë–û–ß–ò–ô –ì–ï–ù–ï–†–ê–¢–û–† JWT –¢–û–ö–ï–ù–û–í
SECRET_KEY –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–π –∞–Ω–∞–ª–∏–∑
"""
import jwt
from datetime import datetime

# –ù–ê–ô–î–ï–ù–ù–´–ô SECRET_KEY 
SECRET_KEY = "{secret_key}"

def generate_unlock_token(vehicle_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞ (–ë–ï–ó –ø–æ–ª—è exp!)"""
    payload = {{
        "vehicle_id": vehicle_id,
        "iss": "CunBA",
        "timestamp": int(datetime.now().timestamp())
    }}
    
    return jwt.encode(payload, SECRET_KEY, algorithm='HS256')

def test_known_working():
    """–¢–µ—Å—Ç —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º —Ä–∞–±–æ—á–∏–º —Ç–æ–∫–µ–Ω–æ–º"""
    test_payload = {{
        "vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce",
        "iss": "CunBA", 
        "timestamp": 1753096202
    }}
    
    result = jwt.encode(test_payload, SECRET_KEY, algorithm='HS256')
    expected = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"
    
    success = result == expected
    print(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: {{success}}")
    return success

if __name__ == "__main__":
    import sys
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª—é—á...")
    if not test_known_working():
        print("‚ùå –û—à–∏–±–∫–∞! –ö–ª—é—á –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        exit(1)
    
    print("‚úÖ –ö–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    print()
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞
    vehicle_id = sys.argv[1] if len(sys.argv) > 1 else input("Vehicle ID: ")
    
    token = generate_unlock_token(vehicle_id)
    
    print("\\nüéØ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô –¢–û–ö–ï–ù:")
    print("=" * 80)
    print(token)
    print("=" * 80)
    print()
    print("üí° –í–ê–ñ–ù–û: –ù–ï –¥–æ–±–∞–≤–ª—è–π—Ç–µ –ø–æ–ª–µ 'exp' - —Å–∏—Å—Ç–µ–º–∞ –µ–≥–æ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç!")
    print("üöó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ: ./unlock [—Ç–æ–∫–µ–Ω]")
'''
    
    with open("D:/vzlom/final_unlock_generator.py", "w", encoding="utf-8") as f:
        f.write(generator_code)
    
    print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω final_unlock_generator.py!")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîê ULTIMATE KEY FINDER")
    print("="*80) 
    print("–§–∏–Ω–∞–ª—å–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ SECRET_KEY –¥–ª—è JWT —Ç–æ–∫–µ–Ω–æ–≤ unlock")
    print("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
    print()
    
    found_key = ultimate_brute_force()
    
    if found_key:
        print(f"\nüéâ –ú–ò–°–°–ò–Ø –í–´–ü–û–õ–ù–ï–ù–ê!")
        print(f"SECRET_KEY –Ω–∞–π–¥–µ–Ω: '{found_key}'")
        
        create_final_generator(found_key)
        
        print(f"\nüéØ –ò–¢–û–ì:")
        print(f"‚úÖ –ö–ª—é—á: '{found_key}'")
        print(f"‚úÖ –î–ª–∏–Ω–∞: {len(found_key)} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω: final_unlock_generator.py")
        print(f"‚úÖ –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    else:
        print(f"\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        print("1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ ELF —Ñ–∞–π–ª–∞ —Å Ghidra")
        print("2. –ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –Ω–∞ QNX —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ")
        print("3. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –¥—Ä—É–≥–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã")
        print("4. –í–æ–∑–º–æ–∂–Ω–æ, –∫–ª—é—á –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏")

if __name__ == "__main__":
    main()
