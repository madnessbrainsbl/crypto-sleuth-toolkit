#!/usr/bin/env python3
"""
–ë—Ä—É—Ç—Ñ–æ—Ä—Å SECRET_KEY –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞
"""

import jwt
import itertools
import string
import hashlib

# –†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω
WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"

# Payload —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
KNOWN_PAYLOAD = {
    "vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce",
    "iss": "CunBA",
    "timestamp": 1753096202
}

def try_common_keys():
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ–±—â–∏–µ –∫–ª—é—á–∏"""
    common_keys = [
        "CunBA",
        "cunba", 
        "CUNBA",
        "unlock",
        "UNLOCK",
        "secret",
        "SECRET",
        "key",
        "KEY", 
        "jwt",
        "JWT",
        "HS256",
        "vehicle",
        "android",
        "qualcomm",
        "8155",
        # –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏
        "CunBA_secret",
        "CunBA_key",
        "CunBA_unlock",
        "unlock_CunBA",
        "vehicle_unlock",
        "mega_unlock",
        "com.cunba.mega.unlock",
        # –•—ç—à–∏
        hashlib.md5(b"CunBA").hexdigest(),
        hashlib.sha1(b"CunBA").hexdigest(),
        hashlib.sha256(b"CunBA").hexdigest(),
    ]
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—â–∏—Ö –∫–ª—é—á–µ–π...")
    for key in common_keys:
        if test_key(key):
            return key
    return None

def test_key(key):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —Å —ç—Ç–∏–º –∫–ª—é—á–æ–º
        test_token = jwt.encode(KNOWN_PAYLOAD, key, algorithm='HS256')
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ä–∞–±–æ—á–∏–º —Ç–æ–∫–µ–Ω–æ–º
        if test_token == WORKING_TOKEN:
            print(f"‚úÖ –ù–ê–ô–î–ï–ù –ü–†–ê–í–ò–õ–¨–ù–´–ô –ö–õ–Æ–ß!")
            print(f"   –ö–ª—é—á: '{key}'")
            print(f"   –î–ª–∏–Ω–∞: {len(key)} —Å–∏–º–≤–æ–ª–æ–≤")
            return True
            
        # –¢–∞–∫–∂–µ –ø—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
        decoded = jwt.decode(WORKING_TOKEN, key, algorithms=['HS256'])
        if decoded == KNOWN_PAYLOAD:
            print(f"‚úÖ –ù–ê–ô–î–ï–ù –ü–†–ê–í–ò–õ–¨–ù–´–ô –ö–õ–Æ–ß (—á–µ—Ä–µ–∑ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ)!")
            print(f"   –ö–ª—é—á: '{key}'")
            return True
            
    except jwt.InvalidSignatureError:
        pass
    except Exception:
        pass
    
    return False

def try_variations_of_found_keys():
    """–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π"""
    base_keys = [
        "sssss3issssssmossssssmssssss/dssssssisssss",
        "sssss3lssssssmossssssRssssss/dsssss3",
        "CunBA",
    ]
    
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞—Ä–∏–∞—Ü–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π...")
    
    for base_key in base_keys:
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        variations = [
            base_key.upper(),
            base_key.lower(),
            base_key.strip(),
            base_key.replace('s', ''),
            base_key.replace('sss', ''),
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ hex
        ]
        
        for variation in variations:
            if test_key(variation):
                return variation
    
    return None

def try_short_bruteforce():
    """–ë—Ä—É—Ç—Ñ–æ—Ä—Å –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–ª—é—á–µ–π"""
    print("üîç –ë—Ä—É—Ç—Ñ–æ—Ä—Å –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–ª—é—á–µ–π (1-8 —Å–∏–º–≤–æ–ª–æ–≤)...")
    
    charset = string.ascii_letters + string.digits + "_-."
    
    for length in range(1, 9):
        print(f"   –ü—Ä–æ–±—É–µ–º –¥–ª–∏–Ω—É {length}...")
        count = 0
        for key_tuple in itertools.product(charset, repeat=length):
            key = ''.join(key_tuple)
            count += 1
            
            if test_key(key):
                return key
                
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
            if count > 10000:
                break
    
    return None

def main():
    print("üîê –ü–æ–∏—Å–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ SECRET_KEY –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞")
    print("="*60)
    print(f"–†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω: {WORKING_TOKEN[:50]}...")
    print(f"–ò–∑–≤–µ—Å—Ç–Ω—ã–π payload: {KNOWN_PAYLOAD}")
    print()
    
    # 1. –ü—Ä–æ–±—É–µ–º –æ–±—â–∏–µ –∫–ª—é—á–∏
    key = try_common_keys()
    if key:
        return key
    
    # 2. –ü—Ä–æ–±—É–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
    key = try_variations_of_found_keys()
    if key:
        return key
    
    # 3. –ö–æ—Ä–æ—Ç–∫–∏–π –±—Ä—É—Ç—Ñ–æ—Ä—Å
    key = try_short_bruteforce()
    if key:
        return key
    
    print("üòû –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–æ—Å—Ç—É–ø–Ω–æ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ –ø–æ–∏—Å–∫–∞")
    print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –∫–ª—é—á —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–ª–∏ —Å–ª–æ–∂–Ω—ã–π –¥–ª—è –±—Ä—É—Ç—Ñ–æ—Ä—Å–∞")

if __name__ == "__main__":
    main()
