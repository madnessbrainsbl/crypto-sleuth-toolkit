#!/usr/bin/env python3
"""
–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ SECRET_KEY –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏
"""

import jwt
import sys

# –†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–æ—Ç–∞–ª
WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"

# –ö–∞–Ω–¥–∏–¥–∞—Ç—ã SECRET_KEY –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ
KEY_CANDIDATES = [
    "sssss3issssssmossssssmssssss/dssssssisssss",
    "sssss3issssshssssssbsssssscsssss3ksssss=",
    "sssss3lssssssmossssssRssssss/dsssss3",
    "sssss3lssssssmossssssmssssss/dsssss3",
    "CunBA",  # –ü—Ä–æ—Å—Ç–æ–π –∫–ª—é—á
    "SECRET_KEY",  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–ª—é—á
]

def test_token_with_keys():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏"""
    print("üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ SECRET_KEY:")
    print("="*60)
    
    for i, key in enumerate(KEY_CANDIDATES, 1):
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω —Å —ç—Ç–∏–º –∫–ª—é—á–æ–º
            decoded = jwt.decode(WORKING_TOKEN, key, algorithms=['HS256'])
            print(f"‚úÖ –ö–õ–Æ–ß #{i} –†–ê–ë–û–¢–ê–ï–¢!")
            print(f"   –ö–ª—é—á: {key}")
            print(f"   –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π payload: {decoded}")
            print()
            return key
        except jwt.InvalidSignatureError:
            print(f"‚ùå –ö–ª—é—á #{i} –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç: {key[:30]}...")
        except Exception as e:
            print(f"‚ö†Ô∏è  –ö–ª—é—á #{i} –æ—à–∏–±–∫–∞: {e}")
    
    print("üòû –ù–∏ –æ–¥–∏–Ω –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –ø–æ–¥–æ—à–µ–ª!")
    return None

def recreate_token_with_found_key(correct_key):
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º"""
    if not correct_key:
        return
        
    print("\nüîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º:")
    print("="*50)
    
    # Payload –∏–∑ —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
    payload = {
        "vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce",
        "iss": "CunBA", 
        "timestamp": 1753096202
    }
    
    try:
        recreated_token = jwt.encode(payload, correct_key, algorithm='HS256')
        print(f"üéØ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω:")
        print(f"   {recreated_token}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–¥–µ–Ω—Ç–∏—á–µ–Ω –ª–∏ –æ–Ω –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É
        if recreated_token == WORKING_TOKEN:
            print("‚úÖ –ò–î–ï–ù–¢–ò–ß–ï–ù –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É!")
        else:
            print("‚ö†Ô∏è  –û—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")

if __name__ == "__main__":
    print("üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—á–µ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞")
    print(f"–¢–æ–∫–µ–Ω: {WORKING_TOKEN}")
    print()
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    try:
        decoded_info = jwt.decode(WORKING_TOKEN, options={"verify_signature": False})
        print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–∫–µ–Ω–µ:")
        for key, value in decoded_info.items():
            print(f"   {key}: {value}")
        print()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏
    working_key = test_token_with_keys()
    
    # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–æ–∫–µ–Ω —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º
    recreate_token_with_found_key(working_key)
