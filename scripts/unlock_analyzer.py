#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä ELF-–±–∏–Ω–∞—Ä–Ω–∏–∫–∞ unlock –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è SECRET_KEY
–°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä–æ–∫ –∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
"""

import re
import sys
import binascii
import struct
from pathlib import Path

class UnlockAnalyzer:
    def __init__(self, binary_path):
        self.binary_path = Path(binary_path)
        self.binary_data = None
        self.potential_keys = []
        self.jwt_patterns = []
        
    def load_binary(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–Ω–∞—Ä–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
        try:
            with open(self.binary_path, 'rb') as f:
                self.binary_data = f.read()
            print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: {self.binary_path.name} ({len(self.binary_data)} –±–∞–π—Ç)")
            return True
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def search_strings(self, min_length=4):
        """–ü–æ–∏—Å–∫ ASCII —Å—Ç—Ä–æ–∫ –≤ –±–∏–Ω–∞—Ä–Ω–∏–∫–µ"""
        if not self.binary_data:
            return []
            
        # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ ASCII —Å—Ç—Ä–æ–∫
        pattern = rb'[!-~]{' + str(min_length).encode() + rb',}'
        strings = re.findall(pattern, self.binary_data)
        return [s.decode('ascii', errors='ignore') for s in strings]
    
    def find_jwt_related_strings(self):
        """–ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å JWT"""
        strings = self.search_strings()
        jwt_keywords = [
            'SECRET_KEY', 'secret', 'key', 'SECRET', 'jwt', 'JWT',
            'CunBA', 'HS256', 'HMAC', 'token', 'authorization',
            'vehicle_id', 'timestamp', 'iss', 'issuer'
        ]
        
        relevant_strings = []
        for string in strings:
            for keyword in jwt_keywords:
                if keyword.lower() in string.lower():
                    relevant_strings.append(string)
                    break
        
        return list(set(relevant_strings))
    
    def search_hex_patterns(self):
        """–ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –≤ hex —Ñ–æ—Ä–º–∞—Ç–µ"""
        patterns = []
        
        # –ü–æ–∏—Å–∫ 32-–±–∞–π—Ç–Ω—ã—Ö –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π (256-bit keys)
        for i in range(0, len(self.binary_data) - 32, 4):
            chunk = self.binary_data[i:i+32]
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è –Ω—É–ª—è–º–∏ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–º—Å—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º
            if len(set(chunk)) > 4:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è
                patterns.append({
                    'offset': hex(i),
                    'data': binascii.hexlify(chunk).decode(),
                    'ascii': ''.join(chr(b) if 32 <= b <= 126 else '.' for b in chunk)
                })
        
        return patterns[:20]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    
    def find_cunba_references(self):
        """–ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ 'CunBA' –∏ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
        cunba_positions = []
        cunba_bytes = b'CunBA'
        
        pos = 0
        while True:
            pos = self.binary_data.find(cunba_bytes, pos)
            if pos == -1:
                break
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            start = max(0, pos - 64)
            end = min(len(self.binary_data), pos + 64)
            context = self.binary_data[start:end]
            
            cunba_positions.append({
                'offset': hex(pos),
                'context_hex': binascii.hexlify(context).decode(),
                'context_ascii': ''.join(chr(b) if 32 <= b <= 126 else '.' for b in context)
            })
            pos += 1
        
        return cunba_positions
    
    def analyze_elf_sections(self):
        """–ë–∞–∑–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ ELF —Å–µ–∫—Ü–∏–π"""
        if not self.binary_data or len(self.binary_data) < 64:
            return None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ELF –º–∞–≥–∏—á–µ—Å–∫–æ–µ —á–∏—Å–ª–æ
        if self.binary_data[:4] != b'\x7fELF':
            print("‚ö† –§–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º ELF")
            return None
        
        # –ß–∏—Ç–∞–µ–º ELF header
        elf_class = self.binary_data[4]  # 1=32bit, 2=64bit
        endianness = self.binary_data[5]  # 1=little, 2=big
        
        print(f"‚úì ELF {64 if elf_class == 2 else 32}-bit, {'little' if endianness == 1 else 'big'} endian")
        
        return {
            'class': elf_class,
            'endianness': endianness
        }
    
    def run_analysis(self):
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        print("üîç –ù–∞—á–∏–Ω–∞–µ–º –∞–Ω–∞–ª–∏–∑ unlock –±–∏–Ω–∞—Ä–Ω–∏–∫–∞...")
        print("=" * 60)
        
        if not self.load_binary():
            return
        
        # 1. –ê–Ω–∞–ª–∏–∑ ELF —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        print("\nüìã 1. –ê–Ω–∞–ª–∏–∑ ELF —Å—Ç—Ä—É–∫—Ç—É—Ä—ã:")
        elf_info = self.analyze_elf_sections()
        
        # 2. –ü–æ–∏—Å–∫ JWT-—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        print("\nüî§ 2. –ü–æ–∏—Å–∫ JWT-—Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫:")
        jwt_strings = self.find_jwt_related_strings()
        for string in jwt_strings[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            print(f"   ‚Ä¢ {string}")
        if len(jwt_strings) > 10:
            print(f"   ... –∏ –µ—â–µ {len(jwt_strings) - 10} —Å—Ç—Ä–æ–∫")
        
        # 3. –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ CunBA
        print("\nüéØ 3. –ü–æ–∏—Å–∫ —Å—Å—ã–ª–æ–∫ –Ω–∞ 'CunBA':")
        cunba_refs = self.find_cunba_references()
        for ref in cunba_refs:
            print(f"   –°–º–µ—â–µ–Ω–∏–µ: {ref['offset']}")
            print(f"   ASCII: {ref['context_ascii'][:50]}...")
            print(f"   HEX: {ref['context_hex'][:100]}...")
            print()
        
        # 4. –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
        print("\nüîë 4. –ü–æ–∏—Å–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö SECRET_KEY (32-–±–∞–π—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏):")
        hex_patterns = self.search_hex_patterns()
        for i, pattern in enumerate(hex_patterns[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"   –ö–∞–Ω–¥–∏–¥–∞—Ç {i+1} (—Å–º–µ—â–µ–Ω–∏–µ {pattern['offset']}):")
            print(f"   HEX: {pattern['data']}")
            print(f"   ASCII: {pattern['ascii']}")
            print()
        
        print("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–∞–Ω–Ω—ã–µ —Ä—è–¥–æ–º —Å 'CunBA'")
        print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∫–ª—é—á–µ–π —Å –ø–æ–º–æ—â—å—é JWT-–≤–∞–ª–∏–¥–∞—Ü–∏–∏")
        print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")

def main():
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python unlock_analyzer.py <–ø—É—Ç—å_–∫_unlock_—Ñ–∞–π–ª—É>")
        return
    
    analyzer = UnlockAnalyzer(sys.argv[1])
    analyzer.run_analysis()

if __name__ == "__main__":
    main()
