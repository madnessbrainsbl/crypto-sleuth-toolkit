#!/usr/bin/env python3
"""
Ghidra-–ø–æ–¥–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä ELF —Ñ–∞–π–ª–æ–≤
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏ –∫–ª—é—á–µ–π
"""

import os
import struct
import binascii
import re
import jwt
import hashlib
from collections import defaultdict

# –†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"
EXACT_PAYLOAD = {
    "vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce",
    "iss": "CunBA",
    "timestamp": 1753096202
}

class ELFAnalyzer:
    def __init__(self, filepath):
        self.filepath = filepath
        self.data = None
        self.strings = []
        self.functions = []
        self.crypto_candidates = set()
        
    def load_file(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ ELF —Ñ–∞–π–ª–∞"""
        try:
            with open(self.filepath, 'rb') as f:
                self.data = f.read()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª {self.filepath} ({len(self.data)} –±–∞–π—Ç)")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return False
    
    def parse_elf_header(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ ELF –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        print("\nüîç –ü–ê–†–°–ò–ù–ì ELF –ó–ê–ì–û–õ–û–í–ö–ê")
        print("="*50)
        
        if len(self.data) < 64:
            print("‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –º–∞–ª –¥–ª—è ELF")
            return False
            
        # ELF Magic
        if self.data[:4] != b'\x7fELF':
            print("‚ùå –ù–µ ELF —Ñ–∞–π–ª")
            return False
            
        ei_class = self.data[4]  # 1=32bit, 2=64bit
        ei_data = self.data[5]   # 1=little endian, 2=big endian
        ei_version = self.data[6]
        
        print(f"ELF –∫–ª–∞—Å—Å: {'64-bit' if ei_class == 2 else '32-bit'}")
        print(f"–ü–æ—Ä—è–¥–æ–∫ –±–∞–π—Ç: {'Little Endian' if ei_data == 1 else 'Big Endian'}")
        print(f"–í–µ—Ä—Å–∏—è: {ei_version}")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –º–∞—à–∏–Ω—ã
        if ei_class == 2:  # 64-bit
            fmt = '<H' if ei_data == 1 else '>H'
            e_machine = struct.unpack(fmt, self.data[18:20])[0]
        else:  # 32-bit
            fmt = '<H' if ei_data == 1 else '>H'
            e_machine = struct.unpack(fmt, self.data[18:20])[0]
            
        machine_names = {
            0x3E: "x86-64", 0x28: "ARM", 0xB7: "AArch64",
            0x3: "x86", 0x8: "MIPS", 0x14: "PowerPC"
        }
        
        machine = machine_names.get(e_machine, f"Unknown (0x{e_machine:x})")
        print(f"–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {machine}")
        
        return True
    
    def extract_strings(self):
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
        print("\nüìù –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –°–¢–†–û–ö")
        print("="*50)
        
        self.strings = []
        current_string = ""
        
        for i, byte in enumerate(self.data):
            if 32 <= byte <= 126:  # Printable ASCII
                current_string += chr(byte)
            else:
                if len(current_string) >= 4:
                    self.strings.append({
                        'offset': i - len(current_string),
                        'value': current_string,
                        'length': len(current_string)
                    })
                current_string = ""
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(self.strings)} —Å—Ç—Ä–æ–∫")
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å—Ç—Ä–æ–∫
        crypto_strings = []
        cunba_strings = []
        key_like_strings = []
        
        for s in self.strings:
            value_lower = s['value'].lower()
            
            # –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã
            crypto_terms = ['hmac', 'sha', 'md5', 'aes', 'rsa', 'jwt', 'sign', 'crypt', 'hash']
            if any(term in value_lower for term in crypto_terms):
                crypto_strings.append(s)
            
            # CunBA —Å–≤—è–∑–∞–Ω–Ω—ã–µ
            cunba_terms = ['cunba', 'unlock', 'mega', 'vehicle', 'token', 'key', 'secret']
            if any(term in value_lower for term in cunba_terms):
                cunba_strings.append(s)
            
            # –ü–æ—Ö–æ–∂–∏–µ –Ω–∞ –∫–ª—é—á–∏ —Å—Ç—Ä–æ–∫–∏
            if (len(s['value']) >= 16 and 
                re.match(r'^[A-Za-z0-9+/=_-]+$', s['value']) and
                not re.match(r'^[0-9]+$', s['value'])):
                key_like_strings.append(s)
        
        print(f"üîê –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏: {len(crypto_strings)}")
        print(f"üöó CunBA/unlock —Å—Ç—Ä–æ–∫–∏: {len(cunba_strings)}")
        print(f"üîë –ü–æ—Ö–æ–∂–∏–µ –Ω–∞ –∫–ª—é—á–∏: {len(key_like_strings)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–∏–±–æ–ª–µ–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ
        if crypto_strings:
            print("\nüîê –ö–†–ò–ü–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–ï –°–¢–†–û–ö–ò:")
            for s in crypto_strings[:10]:
                print(f"   0x{s['offset']:08x}: {s['value']}")
        
        if cunba_strings:
            print("\nüöó CUNBA/UNLOCK –°–¢–†–û–ö–ò:")
            for s in cunba_strings[:10]:
                print(f"   0x{s['offset']:08x}: {s['value']}")
                self.crypto_candidates.add(s['value'])
        
        if key_like_strings:
            print("\nüîë –ü–û–•–û–ñ–ò–ï –ù–ê –ö–õ–Æ–ß–ò –°–¢–†–û–ö–ò:")
            for s in key_like_strings[:10]:
                print(f"   0x{s['offset']:08x}: {s['value']}")
                self.crypto_candidates.add(s['value'])
        
        return len(self.strings)
    
    def find_crypto_constants(self):
        """–ü–æ–∏—Å–∫ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç"""
        print("\nüîç –ü–û–ò–°–ö –ö–†–ò–ü–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–• –ö–û–ù–°–¢–ê–ù–¢")
        print("="*50)
        
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        constants = {
            # SHA-256 –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–µ–∫—Ç–æ—Ä—ã
            b'\x6a\x09\xe6\x67': 'SHA-256 H0',
            b'\xbb\x67\xae\x85': 'SHA-256 H1', 
            b'\x3c\x6e\xf3\x72': 'SHA-256 H2',
            b'\xa5\x4f\xf5\x3a': 'SHA-256 H3',
            b'\x51\x0e\x52\x7f': 'SHA-256 H4',
            b'\x9b\x05\x68\x8c': 'SHA-256 H5',
            b'\x1f\x83\xd9\xab': 'SHA-256 H6',
            b'\x5b\xe0\xcd\x19': 'SHA-256 H7',
            
            # HMAC –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã  
            b'\x36' * 64: 'HMAC ipad (64 bytes)',
            b'\x5c' * 64: 'HMAC opad (64 bytes)',
            b'\x36' * 32: 'HMAC ipad (32 bytes)',
            b'\x5c' * 32: 'HMAC opad (32 bytes)',
            
            # JWT Base64 –∑–∞–≥–æ–ª–æ–≤–∫–∏
            b'eyJhbGciOiJIUzI1NiI': 'JWT HS256 header',
            b'eyJ0eXAiOiJKV1Qi': 'JWT typ header',
            
            # –î—Ä—É–≥–∏–µ
            b'CunBA': 'CunBA string',
            b'unlock': 'unlock string',
        }
        
        found_constants = []
        for constant, description in constants.items():
            pos = 0
            while True:
                pos = self.data.find(constant, pos)
                if pos == -1:
                    break
                found_constants.append((pos, constant, description))
                pos += 1
        
        if found_constants:
            print("‚úÖ –ù–∞–π–¥–µ–Ω—ã –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã:")
            for offset, constant, desc in found_constants:
                print(f"   0x{offset:08x}: {desc}")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–æ–∫—Ä—É–≥ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
                start = max(0, offset - 50)
                end = min(len(self.data), offset + len(constant) + 50)
                context = self.data[start:end]
                
                # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
                context_str = ""
                for byte in context:
                    if 32 <= byte <= 126:
                        context_str += chr(byte)
                    else:
                        if len(context_str) >= 8:
                            self.crypto_candidates.add(context_str)
                        context_str = ""
        else:
            print("‚ùå –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        
        return len(found_constants)
    
    def analyze_data_sections(self):
        """–ê–Ω–∞–ª–∏–∑ —Å–µ–∫—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö"""
        print("\nüìä –ê–ù–ê–õ–ò–ó –°–ï–ö–¶–ò–ô –î–ê–ù–ù–´–•")
        print("="*50)
        
        # –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ - –∏—â–µ–º –æ–±–ª–∞—Å—Ç–∏ —Å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        chunk_size = 1024
        interesting_chunks = []
        
        for i in range(0, len(self.data) - chunk_size, chunk_size):
            chunk = self.data[i:i+chunk_size]
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            printable_count = sum(1 for b in chunk if 32 <= b <= 126)
            zero_count = chunk.count(0)
            
            # –ò—â–µ–º —á–∞–Ω–∫–∏ —Å –≤—ã—Å–æ–∫–∏–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ–º –ø–µ—á–∞—Ç–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
            if printable_count > chunk_size * 0.8 and zero_count < chunk_size * 0.2:
                try:
                    text = ''.join(chr(b) if 32 <= b <= 126 else '.' for b in chunk)
                    interesting_chunks.append((i, text))
                except:
                    pass
        
        print(f"–ù–∞–π–¥–µ–Ω–æ {len(interesting_chunks)} –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö —Å–µ–∫—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö")
        
        for offset, text in interesting_chunks[:5]:
            print(f"   0x{offset:08x}: {text[:100]}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞  
            words = re.findall(r'[A-Za-z0-9+/=_-]{16,64}', text)
            for word in words:
                if not re.match(r'^[0-9.]+$', word):  # –ò—Å–∫–ª—é—á–∞–µ–º —á–∏—Å–ª–∞
                    self.crypto_candidates.add(word)
    
    def search_xor_encoded_keys(self):
        """–ü–æ–∏—Å–∫ XOR-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π"""
        print("\nüîÄ –ü–û–ò–°–ö XOR-–ö–û–î–ò–†–û–í–ê–ù–ù–´–• –ö–õ–Æ–ß–ï–ô")
        print("="*50)
        
        # –ë–µ—Ä–µ–º –æ–±—Ä–∞–∑–µ—Ü –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        sample_size = min(50000, len(self.data))
        sample = self.data[:sample_size]
        
        found_keys = []
        
        # –ü—Ä–æ–±—É–µ–º XOR —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏
        for xor_byte in range(1, 256):
            if xor_byte % 50 == 0:
                print(f"   –¢–µ—Å—Ç–∏—Ä—É–µ–º XOR –∫–ª—é—á 0x{xor_byte:02x}...")
                
            decoded = bytes(b ^ xor_byte for b in sample)
            
            # –ò—â–µ–º ASCII —Å—Ç—Ä–æ–∫–∏ –≤ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            current_string = ""
            strings_found = []
            
            for byte in decoded:
                if 32 <= byte <= 126:
                    current_string += chr(byte)
                else:
                    if len(current_string) >= 8:
                        strings_found.append(current_string)
                    current_string = ""
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ—Å—Ç—å
            for string in strings_found:
                if any(keyword in string.lower() for keyword in ['cunba', 'unlock', 'secret', 'key', 'jwt', 'hmac']):
                    found_keys.append((xor_byte, string))
                    print(f"   XOR(0x{xor_byte:02x}): {string}")
                    self.crypto_candidates.add(string)
        
        return found_keys
    
    def test_crypto_candidates(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
        print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï {len(self.crypto_candidates)} –ö–ê–ù–î–ò–î–ê–¢–û–í")
        print("="*50)
        
        if not self.crypto_candidates:
            print("‚ùå –ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return None
        
        tested = 0
        for candidate in self.crypto_candidates:
            tested += 1
            
            if tested % 50 == 0:
                print(f"   –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {tested}/{len(self.crypto_candidates)}...")
            
            try:
                test_token = jwt.encode(EXACT_PAYLOAD, candidate, algorithm='HS256')
                if test_token == WORKING_TOKEN:
                    print(f"\nüéâ –ù–ê–ô–î–ï–ù SECRET_KEY!")
                    print(f"–ö–ª—é—á: '{candidate}'")
                    print(f"–î–ª–∏–Ω–∞: {len(candidate)} —Å–∏–º–≤–æ–ª–æ–≤")
                    print(f"–ò—Å—Ç–æ—á–Ω–∏–∫: Ghidra-–ø–æ–¥–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                    return candidate
            except:
                continue
        
        print("‚ùå –ù–∏ –æ–¥–∏–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –ø–æ–¥–æ—à–µ–ª")
        return None
    
    def full_analysis(self):
        """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞"""
        print("üî¨ GHIDRA-–ü–û–î–û–ë–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–†")
        print("="*80)
        print("–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ELF —Ñ–∞–π–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π")
        print()
        
        if not self.load_file():
            return None
        
        # –ü–∞—Ä—Å–∏–Ω–≥ ELF –∑–∞–≥–æ–ª–æ–≤–∫–∞
        if not self.parse_elf_header():
            return None
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
        self.extract_strings()
        
        # –ü–æ–∏—Å–∫ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
        self.find_crypto_constants()
        
        # –ê–Ω–∞–ª–∏–∑ —Å–µ–∫—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö
        self.analyze_data_sections()
        
        # –ü–æ–∏—Å–∫ XOR-–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
        self.search_xor_encoded_keys()
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
        found_key = self.test_crypto_candidates()
        
        if found_key:
            # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º
            self.create_generator(found_key)
            return found_key
        else:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            print("   1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞—Å—Ç–æ—è—â–∏–π Ghidra –¥–ª—è –±–æ–ª–µ–µ –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞")
            print("   2. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ QNX —Å–∏—Å—Ç–µ–º–µ")
            print("   3. –ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            print("   4. –í–æ–∑–º–æ–∂–Ω–æ, –∫–ª—é—á –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–ª–≥–æ—Ä–∏—Ç–º–∏—á–µ—Å–∫–∏")
            return None
    
    def create_generator(self, secret_key):
        """–°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º"""
        generator_code = f'''#!/usr/bin/env python3
"""
–ì–ï–ù–ï–†–ê–¢–û–† –° –ö–õ–Æ–ß–û–ú –ò–ó GHIDRA-–ê–ù–ê–õ–ò–ó–ê
"""
import jwt
from datetime import datetime

SECRET_KEY = "{secret_key}"

def generate_unlock_token(vehicle_id):
    payload = {{
        "vehicle_id": vehicle_id,
        "iss": "CunBA",
        "timestamp": int(datetime.now().timestamp())
    }}
    return jwt.encode(payload, SECRET_KEY, algorithm='HS256')

if __name__ == "__main__":
    import sys
    vehicle_id = sys.argv[1] if len(sys.argv) > 1 else input("Vehicle ID: ")
    token = generate_unlock_token(vehicle_id)
    print("="*80)
    print(token)
    print("="*80)
'''
        
        with open("D:/vzlom/ghidra_found_generator.py", "w", encoding="utf-8") as f:
            f.write(generator_code)
        
        print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω ghidra_found_generator.py —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º!")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if not os.path.exists("unlock"):
        print("‚ùå –§–∞–π–ª 'unlock' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        return
    
    analyzer = ELFAnalyzer("unlock")
    found_key = analyzer.full_analysis()
    
    if found_key:
        print(f"\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù –£–°–ü–ï–®–ù–û!")
        print(f"SECRET_KEY: '{found_key}'")
    else:
        print(f"\nüìã –û–¢–ß–ï–¢ –û–ë –ê–ù–ê–õ–ò–ó–ï:")
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(analyzer.strings)}")
        print(f"   –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(analyzer.crypto_candidates)}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏")

if __name__ == "__main__":
    main()
