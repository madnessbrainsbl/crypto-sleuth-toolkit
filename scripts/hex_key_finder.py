#!/usr/bin/env python3
"""
Hex –∞–Ω–∞–ª–∏–∑ unlock –±–∏–Ω–∞—Ä–Ω–∏–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–∫—Ä—ã—Ç—ã—Ö SECRET_KEY
–ü–æ–∏—Å–∫ –≤ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —á—Ç–æ –Ω–µ –≤–∏–¥–Ω–æ –≤ —Å—Ç—Ä–æ–∫–∞—Ö
"""

import jwt
import binascii
import struct
from itertools import combinations

# –†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω
WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"
WORKING_PAYLOAD = {
    "vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce",
    "iss": "CunBA", 
    "timestamp": 1753096202
}

def test_key(key):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–∞"""
    try:
        if isinstance(key, bytes):
            key = key.decode('ascii', errors='ignore')
        test_token = jwt.encode(WORKING_PAYLOAD, key, algorithm='HS256')
        return test_token == WORKING_TOKEN
    except:
        return False

def search_byte_patterns():
    """–ü–æ–∏—Å–∫ –±–∞–π—Ç–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –±–∏–Ω–∞—Ä–Ω–∏–∫–µ"""
    print("üîç Hex –∞–Ω–∞–ª–∏–∑ unlock –±–∏–Ω–∞—Ä–Ω–∏–∫–∞...")
    
    try:
        with open("unlock", "rb") as f:
            data = f.read()
    except FileNotFoundError:
        print("‚ùå –§–∞–π–ª unlock –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return []
    
    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º {len(data)} –±–∞–π—Ç")
    
    candidates = []
    
    # 1. –ü–æ–∏—Å–∫ 32-–±–∞–π—Ç–Ω—ã—Ö –±–ª–æ–∫–æ–≤ (—Ç–∏–ø–∏—á–Ω–∞—è –¥–ª–∏–Ω–∞ HMAC –∫–ª—é—á–∞)
    print("üîç –ü–æ–∏—Å–∫ 32-–±–∞–π—Ç–Ω—ã—Ö –±–ª–æ–∫–æ–≤...")
    for i in range(0, len(data) - 32, 4):
        chunk = data[i:i+32]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —ç–Ω—Ç—Ä–æ–ø–∏—é
        if len(set(chunk)) > 16:  # –•–æ—Ä–æ—à–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è
            candidates.append(chunk)
    
    print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(candidates)} 32-–±–∞–π—Ç–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    
    # 2. –ü–æ–∏—Å–∫ 16-–±–∞–π—Ç–Ω—ã—Ö –±–ª–æ–∫–æ–≤
    print("üîç –ü–æ–∏—Å–∫ 16-–±–∞–π—Ç–Ω—ã—Ö –±–ª–æ–∫–æ–≤...")
    count_16 = 0
    for i in range(0, len(data) - 16, 4):
        chunk = data[i:i+16]
        if len(set(chunk)) > 8:
            candidates.append(chunk)
            count_16 += 1
            if count_16 > 1000:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
                break
    
    print(f"‚úì –î–æ–±–∞–≤–ª–µ–Ω–æ {count_16} 16-–±–∞–π—Ç–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    
    # 3. –ü–æ–∏—Å–∫ —Ä—è–¥–æ–º —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
    print("üîç –ü–æ–∏—Å–∫ —Ä—è–¥–æ–º —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º–∏...")
    patterns = [b'HS256', b'vehicle_id', b'timestamp', b'iss']
    
    for pattern in patterns:
        pos = 0
        while True:
            pos = data.find(pattern, pos)
            if pos == -1:
                break
            
            # –ò—â–µ–º –≤ —Ä–∞–¥–∏—É—Å–µ 128 –±–∞–π—Ç
            start = max(0, pos - 128)
            end = min(len(data), pos + len(pattern) + 128)
            context = data[start:end]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–ª–æ–∫–∏ —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã
            for offset in range(0, len(context) - 16, 4):
                for size in [16, 24, 32, 48, 64]:
                    if offset + size <= len(context):
                        chunk = context[offset:offset+size]
                        if len(set(chunk)) > size // 4:  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —ç–Ω—Ç—Ä–æ–ø–∏—è
                            candidates.append(chunk)
            
            pos += 1
    
    print(f"‚úì –í—Å–µ–≥–æ hex –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(candidates)}")
    return candidates

def search_mathematical_keys():
    """–ü–æ–∏—Å–∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π"""
    print("üîç –ü–æ–∏—Å–∫ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–ª—é—á–µ–π...")
    
    candidates = []
    
    # –ù–∞ –æ—Å–Ω–æ–≤–µ timestamp
    timestamp = 1753096202
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    math_keys = [
        str(timestamp),
        str(timestamp * 2),
        str(timestamp // 2),
        str(timestamp + 123456),
        str(timestamp ^ 0xDEADBEEF),
        hex(timestamp)[2:],
        hex(timestamp * 31337)[2:],
        # –ë–∞–π—Ç—ã timestamp –≤ —Ä–∞–∑–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        struct.pack('>I', timestamp & 0xFFFFFFFF),  # big endian
        struct.pack('<I', timestamp & 0xFFFFFFFF),  # little endian
        struct.pack('>Q', timestamp),  # 64-bit big endian
        struct.pack('<Q', timestamp),  # 64-bit little endian
    ]
    
    # –ù–∞ –æ—Å–Ω–æ–≤–µ vehicle_id
    vehicle_id = "0d79ff047f5cec5bf2ec2ec7d3e464ce"
    
    # –†–∞–∑–ª–∏—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å vehicle_id
    try:
        vid_bytes = binascii.unhexlify(vehicle_id)
        math_keys.extend([
            vid_bytes,
            vid_bytes[:16],  # –ü–µ—Ä–≤—ã–µ 16 –±–∞–π—Ç
            vid_bytes[8:],   # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 8 –±–∞–π—Ç
            vid_bytes + struct.pack('<I', timestamp),  # –ö–æ–º–±–∏–Ω–∞—Ü–∏—è
        ])
    except:
        pass
    
    # –ù–∞ –æ—Å–Ω–æ–≤–µ "CunBA"
    cunba = b"CunBA"
    math_keys.extend([
        cunba * 6,  # –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
        cunba + struct.pack('<I', timestamp),
        cunba + vid_bytes[:11] if len(vid_bytes) >= 11 else cunba,
    ])
    
    candidates.extend(math_keys)
    print(f"‚úì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(math_keys)} –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    
    return candidates

def search_combined_keys():
    """–ü–æ–∏—Å–∫ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π"""
    print("üîç –ü–æ–∏—Å–∫ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π...")
    
    candidates = []
    
    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    components = [
        "CunBA",
        "unlock", 
        "mega",
        "0d79ff047f5cec5bf2ec2ec7d3e464ce",
        "1753096202",
        "HS256",
        "jwt"
    ]
    
    # –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ 2
    for comp1, comp2 in combinations(components, 2):
        candidates.extend([
            comp1 + comp2,
            comp1 + "_" + comp2,
            comp1 + "-" + comp2,
            comp1 + "." + comp2,
            comp2 + comp1,
            comp2 + "_" + comp1,
        ])
    
    # –•—ç—à–∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–π
    import hashlib
    for candidate in candidates[:]:  # –ö–æ–ø–∏—è —Å–ø–∏—Å–∫–∞
        # MD5
        candidates.append(hashlib.md5(candidate.encode()).hexdigest())
        # SHA1 (–ø–µ—Ä–≤—ã–µ 32 —Å–∏–º–≤–æ–ª–∞)  
        candidates.append(hashlib.sha1(candidate.encode()).hexdigest()[:32])
        # SHA256 (–ø–µ—Ä–≤—ã–µ 32 —Å–∏–º–≤–æ–ª–∞)
        candidates.append(hashlib.sha256(candidate.encode()).hexdigest()[:32])
    
    print(f"‚úì –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(candidates)} –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    return candidates

def test_all_hex_candidates(hex_candidates):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ hex –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"""
    print(f"üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {len(hex_candidates)} hex –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
    
    tested = 0
    for candidate in hex_candidates:
        tested += 1
        if tested % 500 == 0:
            print(f"   –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {tested}/{len(hex_candidates)}...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∫ –µ—Å—Ç—å (bytes)
        if test_key(candidate):
            print(f"üéâ –ù–ê–ô–î–ï–ù HEX –ö–õ–Æ–ß!")
            print(f"–ö–ª—é—á (hex): {binascii.hexlify(candidate).decode()}")
            print(f"–ö–ª—é—á (ascii): {candidate.decode('ascii', errors='ignore')}")
            return candidate
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∫ hex —Å—Ç—Ä–æ–∫—É
        hex_str = binascii.hexlify(candidate).decode()
        if test_key(hex_str):
            print(f"üéâ –ù–ê–ô–î–ï–ù HEX STRING –ö–õ–Æ–ß!")
            print(f"–ö–ª—é—á: {hex_str}")
            return hex_str
    
    print("‚ùå Hex –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return None

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è hex –∞–Ω–∞–ª–∏–∑–∞"""
    print("üîê HEX –ê–ù–ê–õ–ò–ó UNLOCK –ë–ò–ù–ê–†–ù–ò–ö–ê")
    print("="*60)
    print(f"–¶–µ–ª—å: –Ω–∞–π—Ç–∏ SECRET_KEY –≤ –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print()
    
    all_candidates = []
    
    # 1. –ü–æ–∏—Å–∫ –±–∞–π—Ç–æ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    hex_candidates = search_byte_patterns()
    all_candidates.extend(hex_candidates)
    
    # 2. –ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∫–ª—é—á–∏  
    math_candidates = search_mathematical_keys()
    all_candidates.extend(math_candidates)
    
    # 3. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª—é—á–∏
    combined_candidates = search_combined_keys()
    all_candidates.extend(combined_candidates)
    
    print(f"\nüìä –í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(all_candidates)}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º hex –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
    result = test_all_hex_candidates(hex_candidates[:2000])  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
    
    if not result:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        print(f"üîë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö {len(combined_candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...")
        
        tested = 0
        for candidate in combined_candidates:
            tested += 1
            if tested % 100 == 0:
                print(f"   –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {tested}/{len(combined_candidates)}...")
            
            if test_key(candidate):
                print(f"üéâ –ù–ê–ô–î–ï–ù –ö–û–ú–ë–ò–ù–ò–†–û–í–ê–ù–ù–´–ô –ö–õ–Æ–ß!")
                print(f"–ö–ª—é—á: '{candidate}'")
                return candidate
        
        print("‚ùå –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω hex –∞–Ω–∞–ª–∏–∑–æ–º")
    
    print("\nüí° –í—ã–≤–æ–¥—ã:")
    print("   - –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–∏–ª SECRET_KEY")
    print("   - –ö–ª—é—á –º–æ–∂–µ—Ç –±—ã—Ç—å:")
    print("     ‚Ä¢ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")  
    print("     ‚Ä¢ –ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω —Å–ª–æ–∂–Ω—ã–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º")
    print("     ‚Ä¢ –ù–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥—Ä—É–≥–æ–º —Ñ–∞–π–ª–µ/–±–∏–±–ª–∏–æ—Ç–µ–∫–µ")
    print("     ‚Ä¢ –ü–æ–ª—É—á–µ–Ω —á–µ—Ä–µ–∑ —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å")

if __name__ == "__main__":
    main()
