#!/usr/bin/env python3
"""
–ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç –≤–æ–∫—Ä—É–≥ –∞–¥—Ä–µ—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –ø–æ–∏—Å–∫–∞ SECRET_KEY
"""
import struct
import re
import hashlib
import jwt

# –†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"
EXACT_PAYLOAD = {"vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce", "iss": "CunBA", "timestamp": 1753096202}

# –ê–¥—Ä–µ—Å–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ Ghidra
CRYPTO_FUNCTIONS = {
    0x0010d54c: "crypto_handler_1_case3_true",
    0x0010d5c4: "crypto_handler_2_case3_false",
    0x00109ac4: "crypto_handler_3_other_true",
    0x0010d8e4: "crypto_handler_4_other_false"
}

class CryptoFunctionAnalyzer:
    def __init__(self, binary_path="unlock"):
        self.binary_path = binary_path
        self.binary_data = None
        self.found_keys = set()
        
    def load_binary(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            with open(self.binary_path, 'rb') as f:
                self.binary_data = f.read()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {self.binary_path} ({len(self.binary_data)} –±–∞–π—Ç)")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def find_function_in_binary(self, func_addr):
        """–ù–∞—Ö–æ–¥–∏—Ç –≤–æ–∑–º–æ–∂–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ñ–∞–π–ª–µ"""
        possible_offsets = []
        
        # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∫–∞–∫ —Å–º–µ—â–µ–Ω–∏—è
        if func_addr < len(self.binary_data):
            possible_offsets.append(func_addr)
        
        # –ú–µ—Ç–æ–¥ 2: –ü–æ–∏—Å–∫ –ø–æ —Å–∏–≥–Ω–∞—Ç—É—Ä–µ –∞–¥—Ä–µ—Å–∞ –≤ little endian
        addr_bytes = struct.pack('<I', func_addr & 0xFFFFFFFF)
        for i in range(len(self.binary_data) - 4):
            if self.binary_data[i:i+4] == addr_bytes:
                possible_offsets.append(i)
        
        # –ú–µ—Ç–æ–¥ 3: –†–∞–∑–ª–∏—á–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
        common_bases = [0x400000, 0x100000, 0x10000, 0x1000]
        for base in common_bases:
            if func_addr > base:
                offset = func_addr - base
                if offset < len(self.binary_data):
                    possible_offsets.append(offset)
        
        # –ú–µ—Ç–æ–¥ 4: –ú–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ä—à–∏—Ö –±–∏—Ç–æ–≤
        for mask_bits in [16, 20, 24]:
            masked_addr = func_addr & ((1 << mask_bits) - 1)
            if masked_addr < len(self.binary_data):
                possible_offsets.append(masked_addr)
        
        return list(set(possible_offsets))
    
    def extract_strings_around_offset(self, offset, radius=2000):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –≤ —Ä–∞–¥–∏—É—Å–µ –æ—Ç –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è"""
        start = max(0, offset - radius)
        end = min(len(self.binary_data), offset + radius)
        
        region = self.binary_data[start:end]
        strings = []
        current_string = ""
        current_start = start
        
        for i, byte in enumerate(region):
            if 32 <= byte <= 126:  # Printable ASCII
                if not current_string:
                    current_start = start + i
                current_string += chr(byte)
            else:
                if len(current_string) >= 4:
                    strings.append({
                        'text': current_string,
                        'offset': current_start,
                        'distance_from_target': abs((start + i) - offset)
                    })
                current_string = ""
        
        if len(current_string) >= 4:
            strings.append({
                'text': current_string,
                'offset': current_start,
                'distance_from_target': abs(end - offset)
            })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏ –∫ —Ü–µ–ª–µ–≤–æ–º—É –∞–¥—Ä–µ—Å—É
        strings.sort(key=lambda x: x['distance_from_target'])
        return strings
    
    def is_potential_crypto_string(self, text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –±—ã—Ç—å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π"""
        crypto_indicators = [
            # –ü—Ä—è–º—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
            'key', 'secret', 'token', 'auth', 'sign', 'hmac', 'sha', 'hash',
            'jwt', 'crypto', 'cipher', 'unlock', 'cunba', 'mega',
            
            # –°–∏—Å—Ç–µ–º–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã  
            'serial', 'uuid', 'guid', 'device', 'hardware', 'build',
            'version', 'platform', 'android', 'qnx',
            
            # –§–æ—Ä–º–∞—Ç—ã –∫–ª—é—á–µ–π
            'password', 'pass', 'pwd', 'pin', 'code'
        ]
        
        text_lower = text.lower()
        has_crypto_keyword = any(kw in text_lower for kw in crypto_indicators)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ base64-–ø–æ–¥–æ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        is_base64_like = (
            re.match(r'^[A-Za-z0-9+/=_-]{16,}$', text) and 
            len(text) >= 16 and 
            text.count('=') <= 2
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ hex —Å—Ç—Ä–æ–∫–∏
        is_hex_like = (
            re.match(r'^[0-9a-fA-F]{16,}$', text) and 
            len(text) % 2 == 0
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –æ–±—ã—á–Ω–æ 16-128 —Å–∏–º–≤–æ–ª–æ–≤)
        good_length = 16 <= len(text) <= 128
        
        return has_crypto_keyword or (good_length and (is_base64_like or is_hex_like))
    
    def analyze_constants_around_function(self, offset, radius=1000):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –≤–æ–∫—Ä—É–≥ —Ñ—É–Ω–∫—Ü–∏–∏"""
        start = max(0, offset - radius)  
        end = min(len(self.binary_data), offset + radius)
        
        constants = []
        
        # –ò—â–µ–º 32-–±–∏—Ç–Ω—ã–µ –∏ 64-–±–∏—Ç–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        for i in range(start, end - 8, 4):
            try:
                # 32-–±–∏—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                val32 = struct.unpack('<I', self.binary_data[i:i+4])[0]
                if self.is_interesting_constant(val32):
                    constants.append({
                        'value': val32,
                        'hex': f"0x{val32:x}",
                        'offset': i,
                        'size': 4,
                        'distance': abs(i - offset)
                    })
                
                # 64-–±–∏—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                if i + 8 <= end:
                    val64 = struct.unpack('<Q', self.binary_data[i:i+8])[0]
                    if self.is_interesting_constant(val64):
                        constants.append({
                            'value': val64,
                            'hex': f"0x{val64:x}",
                            'offset': i,
                            'size': 8,
                            'distance': abs(i - offset)
                        })
            except:
                continue
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –±–ª–∏–∑–æ—Å—Ç–∏
        unique_constants = []
        seen_values = set()
        
        for const in constants:
            if const['value'] not in seen_values:
                seen_values.add(const['value'])
                unique_constants.append(const)
        
        unique_constants.sort(key=lambda x: x['distance'])
        return unique_constants[:20]  # –¢–æ–ø 20
    
    def is_interesting_constant(self, value):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ –ª–∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ –¥–ª—è –∫—Ä–∏–ø—Ç–æ–∞–Ω–∞–ª–∏–∑–∞"""
        # –ò—Å–∫–ª—é—á–∞–µ–º –æ—á–µ–≤–∏–¥–Ω–æ –Ω–µ–∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if value == 0 or value == 0xFFFFFFFF or value == 0xFFFFFFFFFFFFFFFF:
            return False
        
        # –ò—â–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ä–∞–∑—É–º–Ω—ã—Ö –¥–∏–∞–ø–∞–∑–æ–Ω–∞—Ö
        if 0x1000 <= value <= 0xFFFFFFF:  # –†–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∞–¥—Ä–µ—Å–æ–≤/–∫–æ–Ω—Å—Ç–∞–Ω—Ç
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
        crypto_constants = {
            0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,  # SHA-256 H0-H3
            0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,  # SHA-256 H4-H7
            0x36363636, 0x5c5c5c5c,  # HMAC padding
        }
        
        return value in crypto_constants
    
    def analyze_all_crypto_functions(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
        if not self.load_binary():
            return
        
        print("\nüîç –ê–ù–ê–õ–ò–ó –ö–†–ò–ü–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô")
        print("="*70)
        
        all_candidates = set()
        
        for func_addr, func_name in CRYPTO_FUNCTIONS.items():
            print(f"\nüéØ –ê–Ω–∞–ª–∏–∑ {func_name} (0x{func_addr:x}):")
            print("-" * 50)
            
            # –ù–∞—Ö–æ–¥–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Ñ–∞–π–ª–µ
            offsets = self.find_function_in_binary(func_addr)
            print(f"–ù–∞–π–¥–µ–Ω–æ {len(offsets)} –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–π –≤ —Ñ–∞–π–ª–µ")
            
            for i, offset in enumerate(offsets[:3]):  # –ë–µ—Ä–µ–º —Ç–æ–ø 3
                print(f"\nüìç –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ #{i+1} - —Å–º–µ—â–µ–Ω–∏–µ 0x{offset:x}:")
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫–∏
                strings = self.extract_strings_around_offset(offset)
                crypto_strings = [s for s in strings if self.is_potential_crypto_string(s['text'])]
                
                if crypto_strings:
                    print("  üî§ –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–æ–∫–∏:")
                    for s in crypto_strings[:10]:  # –¢–æ–ø 10
                        print(f"    '{s['text']}' (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {s['distance_from_target']})")
                        all_candidates.add(s['text'])
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
                constants = self.analyze_constants_around_function(offset)
                if constants:
                    print("  üî¢ –ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã:")
                    for const in constants[:5]:  # –¢–æ–ø 5
                        print(f"    {const['hex']} ({const['value']}) - —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {const['distance']}")
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏
                        all_candidates.add(const['hex'])
                        all_candidates.add(str(const['value']))
        
        print(f"\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï {len(all_candidates)} –ö–ê–ù–î–ò–î–ê–¢–û–í:")
        print("="*50)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
        for i, candidate in enumerate(all_candidates):
            if self.test_key(candidate):
                print(f"\nüéâ –ù–ê–ô–î–ï–ù SECRET_KEY: '{candidate}'")
                return candidate
            
            if (i + 1) % 50 == 0:
                print(f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {i + 1}/{len(all_candidates)}")
        
        print("\n‚ùå SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
        self.save_candidates_to_file(all_candidates)
        return None
    
    def save_candidates_to_file(self, candidates):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        with open("crypto_function_candidates.txt", "w", encoding="utf-8") as f:
            f.write("# –ö–∞–Ω–¥–∏–¥–∞—Ç—ã SECRET_KEY –∏–∑ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ—Ñ—É–Ω–∫—Ü–∏–π\n")
            f.write(f"# –í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(candidates)}\n\n")
            
            for candidate in sorted(candidates):
                f.write(f"{candidate}\n")
        
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –≤ crypto_function_candidates.txt")
    
    def test_key(self, key):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª—é—á —Å —Ä–∞–±–æ—á–∏–º —Ç–æ–∫–µ–Ω–æ–º"""
        try:
            test_token = jwt.encode(EXACT_PAYLOAD, key, algorithm='HS256')
            return test_token == WORKING_TOKEN
        except:
            return False

if __name__ == "__main__":
    print("üöÄ –ê–ù–ê–õ–ò–ó –ö–†–ò–ü–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô –î–õ–Ø –ü–û–ò–°–ö–ê SECRET_KEY")
    print("="*80)
    
    analyzer = CryptoFunctionAnalyzer()
    secret_key = analyzer.analyze_all_crypto_functions()
    
    if secret_key:
        print(f"\n‚úÖ –£–°–ü–ï–•! SECRET_KEY: '{secret_key}'")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –∫–ª—é—á
        try:
            new_payload = EXACT_PAYLOAD.copy()
            new_payload['timestamp'] = 1753099999  # –ù–æ–≤–æ–µ –≤—Ä–µ–º—è
            new_token = jwt.encode(new_payload, secret_key, algorithm='HS256')
            print(f"\nüéØ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
            print(new_token)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: {e}")
    else:
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª crypto_function_candidates.txt —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏")
        print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ GDB –¥–ª—è runtime –∞–Ω–∞–ª–∏–∑–∞")
        print("3. –î–µ–∫–æ–º–ø–∏–ª–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ Ghidra –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ")
        print("4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∏—Å—Ç–µ–º–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å QNX —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
