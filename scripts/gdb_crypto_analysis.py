#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä GDB —Å–∫—Ä–∏–ø—Ç–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π
–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ breakpoint-–æ–≤ –∏ –∫–æ–º–∞–Ω–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

# –ê–¥—Ä–µ—Å–∞ –∏–∑ –¥–µ–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ FUN_00103994
CRYPTO_FUNCTIONS = {
    0x0010d54c: "crypto_handler_1_case3_true", 
    0x0010d5c4: "crypto_handler_2_case3_false",
    0x00109ac4: "crypto_handler_3_other_true",
    0x0010d8e4: "crypto_handler_4_other_false"
}

MEMORY_OFFSETS = {
    0x5db4: "main_data_buffer",
    0x142c: "alt_buffer", 
    0x5430: "magic_buffer_0x800",
    0x5d00: "data_pointer",
    0x5d20: "data_size",
    0x18: "context_pointer",
    0x5c90: "status_flag"
}

MAIN_PARSER_FUNC = 0x00103994

def generate_gdb_script():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç GDB —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    script = []
    
    script.append("# GDB —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    script.append("# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ SECRET_KEY")
    script.append("")
    script.append("# –ó–∞–ø—É—Å–∫: gdb ./unlock")
    script.append("# (gdb) source gdb_crypto_script.txt")
    script.append("")
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ breakpoint-–æ–≤ –Ω–∞ –≤—Å–µ –∫—Ä–∏–ø—Ç–æ—Ñ—É–Ω–∫—Ü–∏–∏
    script.append("# ========== BREAKPOINTS –ù–ê –ö–†–ò–ü–¢–û–§–£–ù–ö–¶–ò–ò ==========")
    for addr, name in CRYPTO_FUNCTIONS.items():
        script.append(f"break *0x{addr:x}")
        script.append(f"commands")
        script.append(f'printf "\\nüéØ HIT: {name} at 0x{addr:x}\\n"')
        script.append("info registers")
        script.append("bt 5")  # –ü–æ–∫–∞–∑–∞—Ç—å 5 –∫–∞–¥—Ä–æ–≤ —Å—Ç–µ–∫–∞
        script.append("printf \"Arguments:\\n\"")
        script.append("info args") 
        script.append("printf \"\\nMemory dump around RDI (param_1):\\n\"")
        script.append("x/32x $rdi")
        script.append("printf \"\\nContinuing...\\n\"")
        script.append("continue")
        script.append("end")
        script.append("")
    
    # Breakpoint –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä
    script.append("# ========== BREAKPOINT –ù–ê –û–°–ù–û–í–ù–û–ô –ü–ê–†–°–ï–† ==========")
    script.append(f"break *0x{MAIN_PARSER_FUNC:x}")
    script.append("commands")
    script.append(f'printf "\\nüîç HIT: Main parser FUN_00103994\\n"')
    script.append("printf \"Parameters:\\n\"")
    script.append("printf \"  param_1 (RDI): 0x%lx\\n\", $rdi")
    script.append("printf \"  param_2 (RSI): 0x%lx\\n\", $rsi") 
    script.append("printf \"  param_3 (RDX): %lu\\n\", $rdx")
    
    # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –±—É—Ñ–µ—Ä–æ–≤
    script.append("printf \"\\nCritical memory areas:\\n\"")
    for offset, name in MEMORY_OFFSETS.items():
        script.append(f'printf "  {name} (+0x{offset:x}): "')
        script.append(f"x/8x $rdi+0x{offset:x}")
    
    script.append("continue")
    script.append("end")
    script.append("")
    
    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    script.append("# ========== –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –§–£–ù–ö–¶–ò–ò ==========")
    
    script.append("define dump_crypto_buffers")
    script.append("printf \"\\nüìä DUMP CRYPTO BUFFERS:\\n\"")
    for offset, name in MEMORY_OFFSETS.items():
        script.append(f'printf "\\n{name} (+0x{offset:x}):\\n"')
        script.append(f"x/32x $rdi+0x{offset:x}")
    script.append("end")
    script.append("")
    
    script.append("define dump_strings_around_rdi")
    script.append("printf \"\\nüî§ STRINGS AROUND RDI:\\n\"")
    script.append("x/20s $rdi-1000")
    script.append("x/20s $rdi")
    script.append("x/20s $rdi+1000")
    script.append("end")
    script.append("")
    
    script.append("define search_hmac_constants")
    script.append("printf \"\\nüîç SEARCHING FOR HMAC CONSTANTS:\\n\"")
    script.append("# –ü–æ–∏—Å–∫ HMAC padding (0x36 –∏ 0x5c)")
    script.append("find $rdi, $rdi+0x10000, 0x36363636")
    script.append("find $rdi, $rdi+0x10000, 0x5c5c5c5c") 
    script.append("# –ü–æ–∏—Å–∫ SHA-256 –∫–æ–Ω—Å—Ç–∞–Ω—Ç")
    script.append("find $rdi, $rdi+0x10000, 0x6a09e667")
    script.append("find $rdi, $rdi+0x10000, 0xbb67ae85")
    script.append("end")
    script.append("")
    
    script.append("define monitor_case3_flag")
    script.append(f"printf \"\\nüö® CASE 3 FLAG MONITOR:\\n\"")
    script.append(f"printf \"Status flag (+0x5c90): \"")
    script.append(f"x/w $rdi+0x5c90")
    script.append(f"if (*(int*)($rdi+0x5c90) == 0)")
    script.append(f'printf "‚ö†Ô∏è  FLAG IS ZERO - CASE 3 CONDITION MET!\\n"')
    script.append("else")
    script.append('printf "‚úÖ Flag is non-zero\\n"')
    script.append("end")
    script.append("end")
    script.append("")
    
    # –ö–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞
    script.append("# ========== –ö–û–ú–ê–ù–î–´ –ó–ê–ü–£–°–ö–ê ==========")
    script.append("printf \"\\nüöÄ GDB CRYPTO ANALYSIS LOADED\\n\"")
    script.append("printf \"Available commands:\\n\"")
    script.append("printf \"  dump_crypto_buffers - –¥–∞–º–ø –≤—Å–µ—Ö –±—É—Ñ–µ—Ä–æ–≤\\n\"")
    script.append("printf \"  dump_strings_around_rdi - –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫\\n\"") 
    script.append("printf \"  search_hmac_constants - –ø–æ–∏—Å–∫ HMAC –∫–æ–Ω—Å—Ç–∞–Ω—Ç\\n\"")
    script.append("printf \"  monitor_case3_flag - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ case 3\\n\"")
    script.append("printf \"\\nTo start analysis, run with working token:\\n\"")
    script.append('printf "  run eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw\\n"')
    script.append("")
    
    return "\n".join(script)

def generate_advanced_gdb_commands():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ GDB –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –≥–ª—É–±–æ–∫–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    commands = []
    
    commands.append("# ========== –ü–†–û–î–í–ò–ù–£–¢–´–ï –ö–û–ú–ê–ù–î–´ ==========")
    commands.append("")
    
    commands.append("define trace_jwt_parsing")
    commands.append("printf \"\\nüîÑ TRACING JWT PARSING:\\n\"")
    commands.append("# –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π")
    commands.append("set logging on") 
    commands.append("set logging file jwt_trace.log")
    commands.append("set trace-commands on")
    
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    commands.append("catch syscall write")
    commands.append("catch syscall read")
    commands.append("catch call memcpy")
    commands.append("catch call strcmp")
    commands.append("catch call strncmp")
    
    commands.append("continue")
    commands.append("end")
    commands.append("")
    
    commands.append("define extract_all_strings")
    commands.append("printf \"\\nüìù EXTRACTING ALL STRINGS FROM MEMORY:\\n\"")
    commands.append("dump memory memory_dump.bin $rdi-10000 $rdi+50000")
    commands.append("shell strings memory_dump.bin > extracted_strings.txt")
    commands.append("shell grep -E \"(key|secret|token|cunba|unlock|hmac|jwt)\" extracted_strings.txt")
    commands.append("end")
    commands.append("")
    
    commands.append("define watch_memory_changes")
    commands.append("printf \"\\nüëÅÔ∏è  WATCHING MEMORY CHANGES:\\n\"")
    for offset, name in MEMORY_OFFSETS.items():
        commands.append(f"watch *(long*)($rdi+0x{offset:x})")
    commands.append("continue")
    commands.append("end")
    commands.append("")
    
    return "\n".join(commands)

def create_gdb_files():
    """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ GDB —Ñ–∞–π–ª—ã"""
    
    # –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
    basic_script = generate_gdb_script()
    with open("gdb_crypto_script.txt", "w", encoding="utf-8") as f:
        f.write(basic_script)
    
    # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
    advanced_commands = generate_advanced_gdb_commands()
    with open("gdb_advanced_commands.txt", "w", encoding="utf-8") as f:
        f.write(advanced_commands)
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    usage_instructions = """# üîß –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ GDB –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê

## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:
```bash
gdb ./unlock
(gdb) source gdb_crypto_script.txt
(gdb) run eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw
```

## –ö–æ–º–∞–Ω–¥—ã –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞:
- `dump_crypto_buffers` - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –±—É—Ñ–µ—Ä—ã
- `dump_strings_around_rdi` - –Ω–∞–π—Ç–∏ —Å—Ç—Ä–æ–∫–∏ –≤ –ø–∞–º—è—Ç–∏
- `search_hmac_constants` - –ø–æ–∏—Å–∫ HMAC –∫–æ–Ω—Å—Ç–∞–Ω—Ç
- `monitor_case3_flag` - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–ª–∞–≥ case 3

## –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑:
```bash
(gdb) source gdb_advanced_commands.txt
(gdb) trace_jwt_parsing
(gdb) extract_all_strings
(gdb) watch_memory_changes
```

## –í–∞–∂–Ω—ã–µ breakpoint-—ã:
- 0x0010d54c - crypto_handler_1 (case 3, true)
- 0x0010d5c4 - crypto_handler_2 (case 3, false) 
- 0x00109ac4 - crypto_handler_3 (other, true)
- 0x0010d8e4 - crypto_handler_4 (other, false)
- 0x00103994 - –æ—Å–Ω–æ–≤–Ω–æ–π –ø–∞—Ä—Å–µ—Ä

## –ü–æ–∏—Å–∫ –∫–ª—é—á–∞:
1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å —Ä–∞–±–æ—á–∏–º —Ç–æ–∫–µ–Ω–æ–º
2. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è breakpoint-–æ–≤
3. –ò–∑—É—á–∏—Ç–µ –ø–∞–º—è—Ç—å –≤ –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–π
4. –ò—â–∏—Ç–µ —Å—Ç—Ä–æ–∫–∏ –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
5. –û—Å–æ–±–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ case 3 (–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ +0x5c90)

## –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
- `x/100s $rdi` - —Å—Ç—Ä–æ–∫–∏ –æ—Ç –∞–¥—Ä–µ—Å–∞
- `x/100x $rdi` - hex –¥–∞–º–ø –ø–∞–º—è—Ç–∏
- `find $rdi, $rdi+0x10000, "string"` - –ø–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏
- `info proc mappings` - –∫–∞—Ä—Ç–∞ –ø–∞–º—è—Ç–∏
- `generate-core-file dump.core` - —Å–æ–∑–¥–∞—Ç—å –¥–∞–º–ø
"""
    
    with open("gdb_usage_instructions.md", "w", encoding="utf-8") as f:
        f.write(usage_instructions)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω—ã GDB —Ñ–∞–π–ª—ã:")
    print("  üìÑ gdb_crypto_script.txt - –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç")
    print("  üìÑ gdb_advanced_commands.txt - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã")
    print("  üìÑ gdb_usage_instructions.md - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è")
    print("\nüöÄ –î–ª—è –∑–∞–ø—É—Å–∫–∞:")
    print("  gdb ./unlock")
    print("  (gdb) source gdb_crypto_script.txt")

if __name__ == "__main__":
    print("üîß –ì–ï–ù–ï–†–ê–¶–ò–Ø GDB –°–ö–†–ò–ü–¢–û–í –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê –ö–†–ò–ü–¢–û–§–£–ù–ö–¶–ò–ô")
    print("="*60)
    create_gdb_files()
