#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∞–¥—Ä–µ—Å–∞—Ö –ø–∞–º—è—Ç–∏ –∏–∑ –¥–µ–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
–§–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫–µ –∫–ª—é—á–µ–π –≤ –±—É—Ñ–µ—Ä–∞—Ö –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞—Ö –¥–∞–Ω–Ω—ã—Ö
"""
import jwt
import struct
import hashlib

WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"
EXACT_PAYLOAD = {"vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce", "iss": "CunBA", "timestamp": 1753096202}

class MemoryAddressAnalyzer:
    def __init__(self, binary_path="unlock"):
        self.binary_path = binary_path
        self.binary_data = None
        
        # –ö–ª—é—á–µ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏ FUN_00103994
        self.critical_addresses = {
            # –û—Å–Ω–æ–≤–Ω—ã–µ –±—É—Ñ–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            0x5db4: "main_data_buffer",      # param_1 + 0x5db4
            0x142c: "alt_buffer",            # param_1 + 0x142c  
            0x5430: "magic_buffer_0x800",    # param_1 + 0x5430, —Ä–∞–∑–º–µ—Ä 0x800
            
            # –£–∫–∞–∑–∞—Ç–µ–ª–∏ –∏ —Ä–∞–∑–º–µ—Ä—ã
            0x5d00: "data_pointer",          # param_1 + 0x5d00
            0x5d20: "data_size",            # param_1 + 0x5d20
            0x18: "context_pointer",         # param_1 + 0x18
            
            # –§–ª–∞–≥–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            0x5c90: "status_flag",           # param_1 + 0x5c90 (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –Ω–∞ == 0)
        }
        
        # –§—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–≤–æ–∑–º–æ–∂–Ω—ã–µ –∞–¥—Ä–µ—Å–∞ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π)
        self.crypto_functions = {
            0x0010d54c: "crypto_handler_1",  # case 3, bVar4 == true
            0x0010d5c4: "crypto_handler_2",  # case 3, bVar4 == false
            0x00109ac4: "crypto_handler_3",  # other cases, bVar4 == true  
            0x0010d8e4: "crypto_handler_4"   # other cases, bVar4 == false
        }
        
    def load_binary(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –±–∏–Ω–∞—Ä–Ω—ã–π —Ñ–∞–π–ª"""
        try:
            with open(self.binary_path, 'rb') as f:
                self.binary_data = f.read()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –±–∏–Ω–∞—Ä–Ω–∏–∫ {self.binary_path} ({len(self.binary_data)} –±–∞–π—Ç)")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return False
    
    def extract_data_at_addresses(self):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∞–¥—Ä–µ—Å–æ–≤"""
        if not self.load_binary():
            return []
            
        print("\nüîç –ò–ó–í–õ–ï–ß–ï–ù–ò–ï –î–ê–ù–ù–´–• –ò–ó –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ê–î–†–ï–°–û–í:")
        print("="*60)
        
        potential_keys = set()
        
        for addr, name in self.critical_addresses.items():
            print(f"\nüìç –ê–Ω–∞–ª–∏–∑ –∞–¥—Ä–µ—Å–∞ 0x{addr:x} ({name}):")
            
            # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –∫–∞–∫ —Å–º–µ—â–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª–µ
            possible_offsets = self.convert_address_to_file_offset(addr)
            
            for offset in possible_offsets:
                if 0 <= offset < len(self.binary_data):
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω–æ–π –¥–ª–∏–Ω—ã
                    data_chunks = self.extract_data_chunks(offset)
                    
                    for chunk_size, chunk_data in data_chunks.items():
                        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                        try:
                            string_data = chunk_data.decode('ascii', errors='ignore').strip('\x00')
                            if len(string_data) >= 8 and string_data.isprintable():
                                potential_keys.add(string_data)
                                print(f"  ASCII[{chunk_size}]: '{string_data}'")
                        except:
                            pass
                        
                        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –∫–∞–∫ hex
                        hex_data = chunk_data.hex()
                        if len(hex_data) >= 16:
                            potential_keys.add(hex_data)
                            print(f"  HEX[{chunk_size}]: {hex_data}")
                        
                        # –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º –∫–∞–∫ —á–∏—Å–ª–∞ (little endian)
                        if len(chunk_data) >= 4:
                            try:
                                uint32_val = struct.unpack('<I', chunk_data[:4])[0]
                                potential_keys.add(str(uint32_val))
                                potential_keys.add(f"{uint32_val:x}")
                                print(f"  UINT32: {uint32_val} (0x{uint32_val:x})")
                            except:
                                pass
                        
                        if len(chunk_data) >= 8:
                            try:
                                uint64_val = struct.unpack('<Q', chunk_data[:8])[0]
                                potential_keys.add(str(uint64_val))
                                potential_keys.add(f"{uint64_val:x}")
                                print(f"  UINT64: {uint64_val} (0x{uint64_val:x})")
                            except:
                                pass
        
        return list(potential_keys)
    
    def convert_address_to_file_offset(self, address):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∞–¥—Ä–µ—Å –ø–∞–º—è—Ç–∏ –≤ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–º–µ—â–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ"""
        # –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞
        offsets = []
        
        # 1. –ü—Ä—è–º–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞–∫ —Å–º–µ—â–µ–Ω–∏–µ
        if address < len(self.binary_data):
            offsets.append(address)
        
        # 2. –£–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ä—à–∏–µ –±–∏—Ç—ã (–≤–æ–∑–º–æ–∂–Ω–∞—è –±–∞–∑–∞ –∑–∞–≥—Ä—É–∑–∫–∏)
        for shift in [12, 16, 20, 24]:
            offset = address & ((1 << shift) - 1)
            if offset < len(self.binary_data):
                offsets.append(offset)
        
        # 3. –í—ã—á–∏—Ç–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –±–∞–∑–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
        possible_bases = [0x10000, 0x100000, 0x400000, 0x1000000]
        for base in possible_bases:
            if address > base:
                offset = address - base
                if offset < len(self.binary_data):
                    offsets.append(offset)
        
        return list(set(offsets))  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏
    
    def extract_data_chunks(self, offset):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–º–µ—â–µ–Ω–∏—è"""
        chunks = {}
        sizes = [4, 8, 16, 32, 64, 128, 256]
        
        for size in sizes:
            if offset + size <= len(self.binary_data):
                chunks[size] = self.binary_data[offset:offset + size]
        
        return chunks
    
    def analyze_crypto_function_areas(self):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±–ª–∞—Å—Ç–∏ –≤–æ–∫—Ä—É–≥ –∞–¥—Ä–µ—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π"""
        print("\nüîê –ê–ù–ê–õ–ò–ó –û–ë–õ–ê–°–¢–ï–ô –ö–†–ò–ü–¢–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–• –§–£–ù–ö–¶–ò–ô:")
        print("="*60)
        
        potential_keys = set()
        
        for func_addr, name in self.crypto_functions.items():
            print(f"\nüéØ –§—É–Ω–∫—Ü–∏—è 0x{func_addr:x} ({name}):")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å —Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–º–µ—â–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            possible_offsets = self.convert_address_to_file_offset(func_addr)
            
            for base_offset in possible_offsets:
                if base_offset < len(self.binary_data):
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–ª–∞—Å—Ç—å ¬±500 –±–∞–π—Ç –≤–æ–∫—Ä—É–≥ —Ñ—É–Ω–∫—Ü–∏–∏
                    start = max(0, base_offset - 500)
                    end = min(len(self.binary_data), base_offset + 500)
                    
                    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —ç—Ç–æ–π –æ–±–ª–∞—Å—Ç–∏
                    strings = self.extract_strings_from_region(start, end)
                    
                    for s in strings:
                        if self.is_crypto_related_string(s):
                            potential_keys.add(s)
                            print(f"  –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: '{s}'")
        
        return list(potential_keys)
    
    def extract_strings_from_region(self, start, end):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç ASCII —Å—Ç—Ä–æ–∫–∏ –∏–∑ –æ–±–ª–∞—Å—Ç–∏ –ø–∞–º—è—Ç–∏"""
        strings = []
        current_string = ""
        
        for i in range(start, end):
            byte = self.binary_data[i]
            if 32 <= byte <= 126:  # Printable ASCII
                current_string += chr(byte)
            else:
                if len(current_string) >= 8:  # –ú–∏–Ω–∏–º—É–º 8 —Å–∏–º–≤–æ–ª–æ–≤
                    strings.append(current_string)
                current_string = ""
        
        if len(current_string) >= 8:
            strings.append(current_string)
        
        return strings
    
    def is_crypto_related_string(self, s):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π"""
        crypto_keywords = [
            'key', 'secret', 'token', 'auth', 'sign', 'hmac', 'sha', 'hash',
            'cunba', 'unlock', 'mega', 'jwt', 'crypto', 'cipher', 'algorithm'
        ]
        
        s_lower = s.lower()
        return any(keyword in s_lower for keyword in crypto_keywords)
    
    def generate_structure_based_keys(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–º—è—Ç–∏"""
        print("\nüèóÔ∏è –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–õ–Æ–ß–ï–ô –ù–ê –û–°–ù–û–í–ï –°–¢–†–£–ö–¢–£–†–´:")
        print("="*60)
        
        keys = set()
        
        # –ö–ª—é—á–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–º–µ—â–µ–Ω–∏–π
        for addr, name in self.critical_addresses.items():
            keys.add(f"{addr:x}")
            keys.add(f"{addr:08x}")
            keys.add(f"offset_{addr:x}")
            keys.add(f"{name}_{addr:x}")
            
            # –•–µ—à–∏ —Å–º–µ—â–µ–Ω–∏–π
            keys.add(hashlib.md5(f"{addr:x}".encode()).hexdigest())
            keys.add(hashlib.sha256(f"{addr:x}".encode()).hexdigest())
        
        # –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å–º–µ—â–µ–Ω–∏–π
        addrs = list(self.critical_addresses.keys())
        for i in range(len(addrs)):
            for j in range(i+1, len(addrs)):
                combined = addrs[i] ^ addrs[j]  # XOR
                keys.add(f"{combined:x}")
                
                sum_val = (addrs[i] + addrs[j]) & 0xFFFFFFFF
                keys.add(f"{sum_val:x}")
        
        # –ú–∞–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏–∑ —Ñ—É–Ω–∫—Ü–∏–∏
        magic_constants = [0x20000f, 0x20000, 0x3fff, 0x3ffff, 0x3ff, 0x800, 8]
        for const in magic_constants:
            keys.add(f"magic_{const:x}")
            keys.add(hashlib.md5(f"magic_{const}".encode()).hexdigest())
        
        print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(keys)} –∫–ª—é—á–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã")
        return list(keys)
    
    def test_all_keys(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏"""
        print("\nüß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –í–°–ï–• –ö–õ–Æ–ß–ï–ô:")
        print("="*60)
        
        all_keys = set()
        
        # –°–æ–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        all_keys.update(self.extract_data_at_addresses())
        all_keys.update(self.analyze_crypto_function_areas())
        all_keys.update(self.generate_structure_based_keys())
        
        print(f"\nüéØ –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: {len(all_keys)}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á
        for i, key in enumerate(all_keys):
            if self.test_key(key):
                print(f"\nüéâ –ù–ê–ô–î–ï–ù SECRET_KEY: '{key}'")
                return key
            
            if (i + 1) % 100 == 0:
                print(f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: {i + 1}/{len(all_keys)}")
        
        print("\n‚ùå SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        return None
    
    def test_key(self, key):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–ª—é—á —Å —Ä–∞–±–æ—á–∏–º —Ç–æ–∫–µ–Ω–æ–º"""
        try:
            test_token = jwt.encode(EXACT_PAYLOAD, key, algorithm='HS256')
            return test_token == WORKING_TOKEN
        except:
            return False

if __name__ == "__main__":
    print("üöÄ –ê–ù–ê–õ–ò–ó –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ê–î–†–ï–°–û–í –ü–ê–ú–Ø–¢–ò –î–õ–Ø –ü–û–ò–°–ö–ê SECRET_KEY")
    print("="*70)
    
    analyzer = MemoryAddressAnalyzer()
    secret_key = analyzer.test_all_keys()
    
    if secret_key:
        print(f"\n‚úÖ –£–°–ü–ï–•! SECRET_KEY –Ω–∞–π–¥–µ–Ω: '{secret_key}'")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
        try:
            new_payload = EXACT_PAYLOAD.copy()
            new_payload['timestamp'] = 1753096999  # –ù–æ–≤–æ–µ –≤—Ä–µ–º—è
            new_token = jwt.encode(new_payload, secret_key, algorithm='HS256')
            print(f"\nüéØ –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω —Å –Ω–æ–≤—ã–º –≤—Ä–µ–º–µ–Ω–µ–º:")
            print(new_token)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞: {e}")
    else:
        print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –î–ê–õ–¨–ù–ï–ô–®–ï–ì–û –ê–ù–ê–õ–ò–ó–ê:")
        print("1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ GDB –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
        print("2. –î–µ–∫–æ–º–ø–∏–ª–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏:")
        for addr, name in analyzer.crypto_functions.items():
            print(f"   - 0x{addr:x} ({name})")
        print("3. –ü—Ä–æ—Å–ª–µ–¥–∏—Ç–µ –≤—ã–∑–æ–≤—ã —Ñ—É–Ω–∫—Ü–∏–∏ FUN_00103994 –≤ Ghidra")
        print("4. –ù–∞–π–¥–∏—Ç–µ –≥–¥–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –±—É—Ñ–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö")
