#!/usr/bin/env python3
"""
JWT –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö SECRET_KEY
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–±–æ—á–∏–π JWT –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∫–ª—é—á–µ–π
"""

import jwt
import json
import sys
import hashlib
from datetime import datetime
import binascii

class JWTValidator:
    def __init__(self):
        # –ò–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–±–æ—á–∏–π JWT (–∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞)
        self.known_jwt = "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ2ZWhpY2xlX2lkIjoiOTA5MDQ1NiIsImlzcyI6IkN1bkJBIiwidGltZXN0YW1wIjoxNzM2MzQzMjc0fQ.signature_here"
        
        # –ò–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        self.test_payload = {
            "vehicle_id": "9090456",
            "iss": "CunBA",
            "timestamp": 1736343274
        }
    
    def test_key_with_known_jwt(self, potential_key):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª—é—á–∞ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º JWT"""
        try:
            # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∫–ª—é—á–∞
            key_formats = [
                potential_key,  # –ö–∞–∫ –µ—Å—Ç—å
                potential_key.encode() if isinstance(potential_key, str) else potential_key,  # –í –±–∞–π—Ç–∞—Ö
                hashlib.sha256(potential_key.encode() if isinstance(potential_key, str) else potential_key).digest(),  # SHA256 —Ö—ç—à
                binascii.unhexlify(potential_key) if isinstance(potential_key, str) and len(potential_key) == 64 else None  # –ò–∑ hex
            ]
            
            for key_format in key_formats:
                if key_format is None:
                    continue
                    
                try:
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º JWT —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∫–ª—é—á–æ–º
                    test_jwt = jwt.encode(self.test_payload, key_format, algorithm='HS256')
                    print(f"‚úì –ö–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç! –§–æ—Ä–º–∞—Ç: {type(key_format)}")
                    print(f"  –¢–µ—Å—Ç–æ–≤—ã–π JWT: {test_jwt}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
                    decoded = jwt.decode(test_jwt, key_format, algorithms=['HS256'])
                    print(f"  –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π payload: {decoded}")
                    return key_format
                    
                except jwt.InvalidSignatureError:
                    continue
                except Exception as e:
                    print(f"  –û—à–∏–±–∫–∞ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º {type(key_format)}: {e}")
                    continue
            
            return None
            
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞: {e}")
            return None
    
    def generate_jwt_for_vehicle(self, key, vehicle_id):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ vehicle_id"""
        payload = {
            "vehicle_id": vehicle_id,
            "iss": "CunBA",
            "timestamp": int(datetime.now().timestamp())
        }
        
        try:
            token = jwt.encode(payload, key, algorithm='HS256')
            print(f"üéØ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JWT –¥–ª—è vehicle_id '{vehicle_id}':")
            print(f"   {token}")
            return token
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ JWT: {e}")
            return None
    
    def decode_jwt_info(self, token):
        """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏
            decoded = jwt.decode(token, options={"verify_signature": False})
            header = jwt.get_unverified_header(token)
            
            print("üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ JWT:")
            print(f"   Header: {json.dumps(header, indent=2)}")
            print(f"   Payload: {json.dumps(decoded, indent=2)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            if 'timestamp' in decoded:
                timestamp = decoded['timestamp']
                dt = datetime.fromtimestamp(timestamp)
                print(f"   –í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {dt.strftime('%Y-%m-%d %H:%M:%S')}")
            
            return decoded, header
        except Exception as e:
            print(f"‚úó –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JWT: {e}")
            return None, None

def main():
    validator = JWTValidator()
    
    print("üîê JWT –í–∞–ª–∏–¥–∞—Ç–æ—Ä –¥–ª—è unlock —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python jwt_validator.py <–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π_–∫–ª—é—á>")
        print("  python jwt_validator.py --decode <jwt_token>")
        print("  python jwt_validator.py --generate <–∫–ª—é—á> <vehicle_id>")
        return
    
    command = sys.argv[1]
    
    if command == "--decode" and len(sys.argv) == 3:
        # –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT
        jwt_token = sys.argv[2]
        validator.decode_jwt_info(jwt_token)
        
    elif command == "--generate" and len(sys.argv) == 4:
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT
        key = sys.argv[2]
        vehicle_id = sys.argv[3]
        validator.generate_jwt_for_vehicle(key, vehicle_id)
        
    else:
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∫–ª—é—á–∞
        potential_key = sys.argv[1]
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª—é—á: {potential_key}")
        
        working_key = validator.test_key_with_known_jwt(potential_key)
        
        if working_key:
            print(f"\nüéâ –ù–ê–ô–î–ï–ù –†–ê–ë–û–ß–ò–ô –ö–õ–Æ–ß!")
            print(f"–ö–ª—é—á: {working_key}")
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å JWT –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ vehicle_id
            test_vehicle = input("\n–í–≤–µ–¥–∏—Ç–µ vehicle_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
            if test_vehicle:
                validator.generate_jwt_for_vehicle(working_key, test_vehicle)
        else:
            print("üòû –ö–ª—é—á –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∫–∞–Ω–¥–∏–¥–∞—Ç.")

if __name__ == "__main__":
    main()
