#!/usr/bin/env python3
"""
–¢–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ SECRET_KEY –¥–ª—è —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π –∏–Ω–∂–µ–Ω–µ—Ä–∏–∏
"""

import jwt
import hashlib
import hmac
import base64
import binascii
import json

# 100% –†–ê–ë–û–ß–ò–ô –¢–û–ö–ï–ù (–∫–æ—Ç–æ—Ä—ã–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª unlock)
WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"

# –¢–û–ß–ù–´–ô PAYLOAD —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
EXACT_PAYLOAD = {
    "vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce",
    "iss": "CunBA", 
    "timestamp": 1753096202
}

def test_exact_key(key):
    """–¢–µ—Å—Ç –∫–ª—é—á–∞ —Å —Ç–æ—á–Ω—ã–º payload"""
    try:
        test_token = jwt.encode(EXACT_PAYLOAD, key, algorithm='HS256')
        return test_token == WORKING_TOKEN
    except:
        return False

def comprehensive_key_search():
    """–í—Å–µ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π –ø–æ–∏—Å–∫ –∫–ª—é—á–∞"""
    print("üîç –í–°–ï–°–¢–û–†–û–ù–ù–ò–ô –ü–û–ò–°–ö SECRET_KEY")
    print("="*60)
    print(f"–¶–µ–ª–µ–≤–æ–π —Ç–æ–∫–µ–Ω: {WORKING_TOKEN}")
    print(f"Payload: {EXACT_PAYLOAD}")
    print()
    
    # –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –∫–ª—é—á–µ–π
    key_candidates = []
    
    # 1. –ü—Ä—è–º—ã–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –∏–∑ –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    direct_candidates = [
        "CunBA",  # –°–∞–º—ã–π –æ—á–µ–≤–∏–¥–Ω—ã–π
        "sssss3issssssmossssssmssssss/dssssssisssss",  # –ò–∑ working_script.py
        "sssss3lssssssmossssssRssssss/dsssss3",  # –î—Ä—É–≥–∞—è –Ω–∞–π–¥–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
    ]
    key_candidates.extend(direct_candidates)
    
    # 2. Vehicle ID –∏ timestamp –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏
    vehicle_id = "0d79ff047f5cec5bf2ec2ec7d3e464ce"
    timestamp = 1753096202
    
    vid_candidates = [
        vehicle_id,
        vehicle_id.upper(),
        str(timestamp),
        f"CunBA_{vehicle_id}",
        f"CunBA_{timestamp}",
        f"unlock_{vehicle_id}",
        f"mega_{vehicle_id}_{timestamp}",
    ]
    key_candidates.extend(vid_candidates)
    
    # 3. –•—ç—à–∏ –≤—Å–µ—Ö –±–∞–∑–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
    base_strings = ["CunBA", "unlock", "mega", vehicle_id, str(timestamp)]
    for base in base_strings:
        key_candidates.extend([
            hashlib.md5(base.encode()).hexdigest(),
            hashlib.sha1(base.encode()).hexdigest(),
            hashlib.sha256(base.encode()).hexdigest(),
            hashlib.sha256(base.encode()).hexdigest()[:32],
            hashlib.sha256(base.encode()).hexdigest()[:16],
        ])
    
    # 4. –ò–∑ ELF —Ñ–∞–π–ª–∞ - –ø–æ–ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å —Å—Ç—Ä–æ–∫–∏
    try:
        with open("unlock", "rb") as f:
            binary_data = f.read()
        
        # –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫ 8-64 —Å–∏–º–≤–æ–ª–∞  
        strings = []
        current = ""
        for byte in binary_data:
            if 32 <= byte <= 126:  # ASCII
                current += chr(byte)
            else:
                if 8 <= len(current) <= 64:
                    strings.append(current)
                current = ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
        unique_strings = list(set(strings))[:500]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º
        key_candidates.extend(unique_strings)
        print(f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(unique_strings)} —Å—Ç—Ä–æ–∫ –∏–∑ –±–∏–Ω–∞—Ä–Ω–∏–∫–∞")
        
    except:
        print("–ë–∏–Ω–∞—Ä–Ω–∏–∫ unlock –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # 5. Base64 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    b64_candidates = [
        "c3Nzc3Mzaml0c3Nzc3Ntb3Nzc3Nzc21zc3Nzcy9kc3Nzc3Nzc2lzc3Nzc3M=",
        "Y3Nzc3MzaW1vY3Nzc3Ntb3Nzc3Nzc21zc3Nzcy9kc3Nzc3Nzc2lzc3Nzc3M=",
    ]
    
    for b64 in b64_candidates:
        try:
            decoded = base64.b64decode(b64).decode('ascii', errors='ignore')
            key_candidates.append(decoded)
        except:
            pass
    
    # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
    key_candidates = list(set(key_candidates))
    print(f"–í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {len(key_candidates)}")
    print()
    
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    for i, key in enumerate(key_candidates):
        if i % 1000 == 0 and i > 0:
            print(f"–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ {i}/{len(key_candidates)}...")
        
        if test_exact_key(key):
            print(f"\nüéâ –ù–ê–ô–î–ï–ù –ü–†–ê–í–ò–õ–¨–ù–´–ô SECRET_KEY!")
            print(f"–ö–ª—é—á: '{key}'")
            print(f"–î–ª–∏–Ω–∞: {len(key)} —Å–∏–º–≤–æ–ª–æ–≤") 
            print(f"–¢–∏–ø: {type(key)}")
            
            # –î–≤–æ–π–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            verification_token = jwt.encode(EXACT_PAYLOAD, key, algorithm='HS256')
            print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {'‚úÖ –î–ê' if verification_token == WORKING_TOKEN else '‚ùå –ù–ï–¢'}")
            
            return key
    
    print("\n‚ùå SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    return None

def create_final_generator(secret_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤"""
    if not secret_key:
        return
    
    generator_code = f'''#!/usr/bin/env python3
"""
–§–ò–ù–ê–õ–¨–ù–´–ô –ì–ï–ù–ï–†–ê–¢–û–† JWT –¢–û–ö–ï–ù–û–í
SECRET_KEY –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
"""
import jwt
from datetime import datetime

# –ü–†–ê–í–ò–õ–¨–ù–´–ô SECRET_KEY
SECRET_KEY = "{secret_key}"

def generate_unlock_token(vehicle_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è unlock —Å–∏—Å—Ç–µ–º—ã"""
    payload = {{
        "vehicle_id": vehicle_id,
        "iss": "CunBA",
        "timestamp": int(datetime.now().timestamp())
    }}
    
    try:
        token = jwt.encode(payload, SECRET_KEY, algorithm='HS256')
        return token
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {{e}}")
        return None

if __name__ == "__main__":
    import sys
    
    # –ü–æ–ª—É—á–∞–µ–º vehicle_id
    if len(sys.argv) > 1:
        vehicle_id = sys.argv[1]
    else:
        vehicle_id = input("–í–≤–µ–¥–∏—Ç–µ vehicle_id: ")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    token = generate_unlock_token(vehicle_id)
    
    if token:
        print("\\n‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JWT —Ç–æ–∫–µ–Ω:")
        print("=" * 80)
        print(token)
        print("=" * 80)
        print("\\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Ç–æ–∫–µ–Ω –≤ ./unlock –∫–æ–º–∞–Ω–¥–µ")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω")
'''
    
    with open("D:/vzlom/final_working_generator.py", "w", encoding="utf-8") as f:
        f.write(generator_code)
    
    print(f"\n‚úÖ –°–æ–∑–¥–∞–Ω final_working_generator.py —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º!")

if __name__ == "__main__":
    found_key = comprehensive_key_search()
    create_final_generator(found_key)
