#!/usr/bin/env python3
"""
–ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ SECRET_KEY
"""

import jwt
import json
from datetime import datetime

# –†–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω (–∫–æ—Ç–æ—Ä—ã–π –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª unlock)
WORKING_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5NjIwMn0.MWlqDVyQK4lhpZNZgaBS6gHisirYceGIxWvb9Q1-zXw"

# –ù–µ—Ä–∞–±–æ—á–∏–π —Ç–æ–∫–µ–Ω (–º–æ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
MY_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ2ZWhpY2xlX2lkIjoiMGQ3OWZmMDQ3ZjVjZWM1YmYyZWMyZWM3ZDNlNDY0Y2UiLCJpc3MiOiJDdW5CQSIsInRpbWVzdGFtcCI6MTc1MzA5Njc2MSwiZXhwIjoxNzUzMDk3MDYxfQ.StCOSqg0VcOs3UTTOfYsq1JWitZ9bLL9gTepJD8LMuY"

def analyze_tokens():
    """–ê–Ω–∞–ª–∏–∑ –æ–±–æ–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
    print("üîç –ê–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—á–µ–≥–æ –∏ –Ω–µ—Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–æ–≤")
    print("="*60)
    
    print("\nüìä –†–ê–ë–û–ß–ò–ô –¢–û–ö–ï–ù:")
    print("-" * 30)
    try:
        working_decoded = jwt.decode(WORKING_TOKEN, options={"verify_signature": False})
        print(f"Header: {jwt.get_unverified_header(WORKING_TOKEN)}")
        print(f"Payload: {json.dumps(working_decoded, indent=2)}")
        
        if 'timestamp' in working_decoded:
            ts = working_decoded['timestamp']
            dt = datetime.fromtimestamp(ts)
            print(f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {dt.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"Timestamp: {ts}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    
    print("\nüìä –ú–û–ô –¢–û–ö–ï–ù:")
    print("-" * 30)
    try:
        my_decoded = jwt.decode(MY_TOKEN, options={"verify_signature": False})
        print(f"Header: {jwt.get_unverified_header(MY_TOKEN)}")
        print(f"Payload: {json.dumps(my_decoded, indent=2)}")
        
        if 'timestamp' in my_decoded:
            ts = my_decoded['timestamp']
            dt = datetime.fromtimestamp(ts)
            print(f"–í—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏—è: {dt.strftime('%Y-%m-%d %H:%M:%S')}")
            print(f"Timestamp: {ts}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")

def try_reverse_engineer_key():
    """–ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å SECRET_KEY —á–µ—Ä–µ–∑ –æ–±—Ä–∞—Ç–Ω—É—é –∏–Ω–∂–µ–Ω–µ—Ä–∏—é"""
    print("\nüîì –ü–æ–ø—ã—Ç–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å SECRET_KEY —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞:")
    print("="*50)
    
    # –ò–∑–≤–µ—Å—Ç–Ω—ã–π payload —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
    working_payload = {
        "vehicle_id": "0d79ff047f5cec5bf2ec2ec7d3e464ce",
        "iss": "CunBA",
        "timestamp": 1753096202
    }
    
    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    possible_keys = [
        # –ü—Ä–æ—Å—Ç—ã–µ –∫–ª—é—á–∏
        "CunBA",
        "unlock", 
        "secret",
        "key",
        "mega",
        "android",
        # –ö–æ–º–±–∏–Ω–∞—Ü–∏–∏
        "CunBA_unlock",
        "mega_unlock",
        "cunba_secret",
        # –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –∫–ª—é—á–∏
        "sssss3issssssmossssssmssssss/dssssssisssss",
        "sssss3lssssssmossssssRssssss/dsssss3",
        # –•—ç—à–∏
        "5d41402abc4b2a76b9719d911017c592",  # md5("CunBA")
        # –í–∞—Ä–∏–∞—Ü–∏–∏ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        f"CunBA_{1753096202}",
        f"unlock_{1753096202}",
        # Base64 –≤–∞—Ä–∏–∞—Ü–∏–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–ª—é—á–µ–π
        "c3Nzc3Mzaml0c3Nzc3Ntb3Nzc3Nzc21zc3Nzcy9kc3Nzc3Nzc2lzc3Nzc3M=",
    ]
    
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º {len(possible_keys)} –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–µ–π...")
    
    for i, key in enumerate(possible_keys):
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —Å —ç—Ç–∏–º –∫–ª—é—á–æ–º
            test_token = jwt.encode(working_payload, key, algorithm='HS256')
            
            if test_token == WORKING_TOKEN:
                print(f"\nüéâ –ù–ê–ô–î–ï–ù –ü–†–ê–í–ò–õ–¨–ù–´–ô SECRET_KEY!")
                print(f"–ö–ª—é—á #{i+1}: '{key}'")
                print(f"–î–ª–∏–Ω–∞: {len(key)} —Å–∏–º–≤–æ–ª–æ–≤")
                print(f"–¢–∏–ø: {type(key)}")
                return key
                
        except Exception as e:
            continue
    
    print("‚ùå SECRET_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω —Å—Ä–µ–¥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
    return None

def create_working_generator(secret_key):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º"""
    if not secret_key:
        return
        
    print(f"\nüîß –°–æ–∑–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ —Å –Ω–∞–π–¥–µ–Ω–Ω—ã–º –∫–ª—é—á–æ–º:")
    print("="*50)
    
    generator_code = f'''#!/usr/bin/env python3
"""
–†–∞–±–æ—á–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä JWT —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è unlock —Å–∏—Å—Ç–µ–º—ã
SECRET_KEY –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –æ–±—Ä–∞—Ç–Ω—É—é –∏–Ω–∂–µ–Ω–µ—Ä–∏—é —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞
"""

import jwt
from datetime import datetime

# –ü–†–ê–í–ò–õ–¨–ù–´–ô SECRET_KEY (–Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ –∞–Ω–∞–ª–∏–∑ —Ä–∞–±–æ—á–µ–≥–æ —Ç–æ–∫–µ–Ω–∞)
SECRET_KEY = "{secret_key}"

def generate_unlock_token(vehicle_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–±–æ—á–µ–≥–æ JWT —Ç–æ–∫–µ–Ω–∞ –¥–ª—è unlock"""
    payload = {{
        "vehicle_id": vehicle_id,
        "iss": "CunBA",
        "timestamp": int(datetime.now().timestamp())
    }}
    
    try:
        token = jwt.encode(payload, SECRET_KEY, algorithm='HS256')
        return token
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {{e}}")
        return None

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        vehicle_id = sys.argv[1]
    else:
        vehicle_id = input("–í–≤–µ–¥–∏—Ç–µ vehicle_id: ")
    
    token = generate_unlock_token(vehicle_id)
    if token:
        print("‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JWT —Ç–æ–∫–µ–Ω:")
        print("="*80)
        print(token)
        print("="*80)
'''
    
    with open("D:/vzlom/working_generator.py", "w", encoding="utf-8") as f:
        f.write(generator_code)
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª working_generator.py —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∫–ª—é—á–æ–º")

if __name__ == "__main__":
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω—ã
    analyze_tokens()
    
    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ SECRET_KEY
    found_key = try_reverse_engineer_key()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
    create_working_generator(found_key)
